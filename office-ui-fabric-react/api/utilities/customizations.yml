### YamlMime:UniversalReference
items:
  - uid: '@uifabric/utilities!Customizations:class'
    name: Customizations
    fullName: Customizations
    langs:
      - typeScript
    type: class
    package: '@uifabric/utilities!'
    children:
      - '@uifabric/utilities!Customizations.applyBatchedUpdates:member(1)'
      - '@uifabric/utilities!Customizations.applyScopedSettings:member(1)'
      - '@uifabric/utilities!Customizations.applySettings:member(1)'
      - '@uifabric/utilities!Customizations.getSettings:member(1)'
      - '@uifabric/utilities!Customizations.observe:member(1)'
      - '@uifabric/utilities!Customizations.reset:member(1)'
      - '@uifabric/utilities!Customizations.unobserve:member(1)'
  - uid: '@uifabric/utilities!Customizations.applyBatchedUpdates:member(1)'
    summary: >-
      Used to run some code that sets Customizations without triggering an update until the end. Useful for applying
      Customizations that don't affect anything currently rendered, or for applying many customizations at once.
    name: 'applyBatchedUpdates(code, suppressUpdate)'
    fullName: 'applyBatchedUpdates(code, suppressUpdate)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: code
          description: ''
          type:
            - () => void
        - id: suppressUpdate
          description: 'Do not raise the change event at the end, preventing all updates'
          type:
            - boolean
  - uid: '@uifabric/utilities!Customizations.applyScopedSettings:member(1)'
    summary: 'Apply Customizations to a particular named scope, like a component.'
    name: 'applyScopedSettings(scopeName, settings)'
    fullName: 'applyScopedSettings(scopeName, settings)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static applyScopedSettings(scopeName: string, settings: ISettings): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: scopeName
          description: ''
          type:
            - string
        - id: settings
          description: ''
          type:
            - ISettings
  - uid: '@uifabric/utilities!Customizations.applySettings:member(1)'
    summary: Apply global Customization settings.
    name: applySettings(settings)
    fullName: applySettings(settings)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static applySettings(settings: ISettings): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: settings
          description: ''
          type:
            - ISettings
  - uid: '@uifabric/utilities!Customizations.getSettings:member(1)'
    name: 'getSettings(properties, scopeName, localSettings)'
    fullName: 'getSettings(properties, scopeName, localSettings)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static getSettings(properties: string[], scopeName?: string, localSettings?: ICustomizations): any;'
      return:
        type:
          - any
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'string[]'
        - id: scopeName
          description: ''
          type:
            - string
        - id: localSettings
          description: ''
          type:
            - '@uifabric/utilities!ICustomizations:interface'
  - uid: '@uifabric/utilities!Customizations.observe:member(1)'
    name: observe(onChange)
    fullName: observe(onChange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static observe(onChange: () => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: onChange
          description: ''
          type:
            - () => void
  - uid: '@uifabric/utilities!Customizations.reset:member(1)'
    name: reset()
    fullName: reset()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static reset(): void;'
      return:
        type:
          - void
        description: ''
  - uid: '@uifabric/utilities!Customizations.unobserve:member(1)'
    name: unobserve(onChange)
    fullName: unobserve(onChange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static unobserve(onChange: () => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: onChange
          description: ''
          type:
            - () => void
