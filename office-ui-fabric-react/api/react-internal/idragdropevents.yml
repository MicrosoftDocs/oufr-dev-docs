### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-internal!IDragDropEvents:interface'
    summary: Drag &amp; drop event callback interface.
    name: IDragDropEvents
    fullName: IDragDropEvents
    langs:
      - typeScript
    type: interface
    package: '@fluentui/react-internal!'
    children:
      - '@fluentui/react-internal!IDragDropEvents#canDrag:member'
      - '@fluentui/react-internal!IDragDropEvents#canDragGroups:member'
      - '@fluentui/react-internal!IDragDropEvents#canDrop:member'
      - '@fluentui/react-internal!IDragDropEvents#onDragEnd:member'
      - '@fluentui/react-internal!IDragDropEvents#onDragEnter:member'
      - '@fluentui/react-internal!IDragDropEvents#onDragLeave:member'
      - '@fluentui/react-internal!IDragDropEvents#onDragOver:member'
      - '@fluentui/react-internal!IDragDropEvents#onDragStart:member'
      - '@fluentui/react-internal!IDragDropEvents#onDrop:member'
  - uid: '@fluentui/react-internal!IDragDropEvents#canDrag:member'
    summary: Whether or not drag action is allowed.
    name: canDrag
    fullName: canDrag
    langs:
      - typeScript
    type: property
    syntax:
      content: 'canDrag?: (item?: any) => boolean;'
      return:
        type:
          - '(item?: any) => boolean'
  - uid: '@fluentui/react-internal!IDragDropEvents#canDragGroups:member'
    summary: Whether the whole group is draggable. This applies after canDrag returns true for the group.
    name: canDragGroups
    fullName: canDragGroups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'canDragGroups?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!IDragDropEvents#canDrop:member'
    summary: Whether or not drop action is allowed.
    name: canDrop
    fullName: canDrop
    langs:
      - typeScript
    type: property
    syntax:
      content: 'canDrop?: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => boolean;'
      return:
        type:
          - '(dropContext?: IDragDropContext, dragContext?: IDragDropContext) => boolean'
  - uid: '@fluentui/react-internal!IDragDropEvents#onDragEnd:member'
    summary: On drag end event callback.
    name: onDragEnd
    fullName: onDragEnd
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDragEnd?: (item?: any, event?: DragEvent) => void;'
      return:
        type:
          - '(item?: any, event?: DragEvent) => void'
  - uid: '@fluentui/react-internal!IDragDropEvents#onDragEnter:member'
    summary: >-
      On drag enter region event callback. Returned string is the css classes that will be added to the entering
      element.
    name: onDragEnter
    fullName: onDragEnter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDragEnter?: (item?: any, event?: DragEvent) => string;'
      return:
        type:
          - '(item?: any, event?: DragEvent) => string'
  - uid: '@fluentui/react-internal!IDragDropEvents#onDragLeave:member'
    summary: On drag leave region event callback.
    name: onDragLeave
    fullName: onDragLeave
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDragLeave?: (item?: any, event?: DragEvent) => void;'
      return:
        type:
          - '(item?: any, event?: DragEvent) => void'
  - uid: '@fluentui/react-internal!IDragDropEvents#onDragOver:member'
    summary: On drag over event callback.
    name: onDragOver
    fullName: onDragOver
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDragOver?: (item?: any, event?: DragEvent) => void;'
      return:
        type:
          - '(item?: any, event?: DragEvent) => void'
  - uid: '@fluentui/react-internal!IDragDropEvents#onDragStart:member'
    summary: On drag start event callback.
    name: onDragStart
    fullName: onDragStart
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDragStart?: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => void;'
      return:
        type:
          - '(item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => void'
  - uid: '@fluentui/react-internal!IDragDropEvents#onDrop:member'
    summary: On drop event callback.
    name: onDrop
    fullName: onDrop
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDrop?: (item?: any, event?: DragEvent) => void;'
      return:
        type:
          - '(item?: any, event?: DragEvent) => void'
