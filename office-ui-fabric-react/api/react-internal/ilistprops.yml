### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-internal!IListProps:interface'
    name: IListProps
    fullName: IListProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'React.HTMLAttributes<List<T> | HTMLDivElement> '
    syntax:
      typeParameters:
        - id: T
    package: '@fluentui/react-internal!'
    children:
      - '@fluentui/react-internal!IListProps#className:member'
      - '@fluentui/react-internal!IListProps#componentRef:member'
      - '@fluentui/react-internal!IListProps#getItemCountForPage:member'
      - '@fluentui/react-internal!IListProps#getKey:member'
      - '@fluentui/react-internal!IListProps#getPageHeight:member'
      - '@fluentui/react-internal!IListProps#getPageSpecification:member'
      - '@fluentui/react-internal!IListProps#getPageStyle:member'
      - '@fluentui/react-internal!IListProps#ignoreScrollingState:member'
      - '@fluentui/react-internal!IListProps#items:member'
      - '@fluentui/react-internal!IListProps#onPageAdded:member'
      - '@fluentui/react-internal!IListProps#onPageRemoved:member'
      - '@fluentui/react-internal!IListProps#onPagesUpdated:member'
      - '@fluentui/react-internal!IListProps#onRenderCell:member'
      - '@fluentui/react-internal!IListProps#onRenderPage:member'
      - '@fluentui/react-internal!IListProps#onRenderRoot:member'
      - '@fluentui/react-internal!IListProps#onRenderSurface:member'
      - '@fluentui/react-internal!IListProps#onShouldVirtualize:member'
      - '@fluentui/react-internal!IListProps#renderCount:member'
      - '@fluentui/react-internal!IListProps#renderedWindowsAhead:member'
      - '@fluentui/react-internal!IListProps#renderedWindowsBehind:member'
      - '@fluentui/react-internal!IListProps#role:member'
      - '@fluentui/react-internal!IListProps#startIndex:member'
      - '@fluentui/react-internal!IListProps#usePageCache:member'
      - '@fluentui/react-internal!IListProps#version:member'
  - uid: '@fluentui/react-internal!IListProps#className:member'
    summary: Optional classname to append to root list.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-internal!IListProps#componentRef:member'
    summary: >-
      Optional callback to access the IList interface. Use this instead of ref for accessing the public methods and
      properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IList>;'
      return:
        type:
          - IRefObject<IList>
  - uid: '@fluentui/react-internal!IListProps#getItemCountForPage:member'
    summary: >-
      Method called by the list to get how many items to render per page from specified index. In general, use
      `getPageSpecification` instead.
    name: getItemCountForPage
    fullName: getItemCountForPage
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;'
      return:
        type:
          - '(itemIndex?: number, visibleRect?: IRectangle) => number'
  - uid: '@fluentui/react-internal!IListProps#getKey:member'
    summary: 'Optional callback to get the item key, to be used on render.'
    name: getKey
    fullName: getKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getKey?: (item: T, index?: number) => string;'
      return:
        type:
          - '(item: T, index?: number) => string'
  - uid: '@fluentui/react-internal!IListProps#getPageHeight:member'
    summary: >-
      Method called by the list to get the pixel height for a given page. By default, we measure the first page's height
      and default all other pages to that height when calculating the surface space. It is ideal to be able to
      adequately predict page heights in order to keep the surface space from jumping in pixels, which has been seen to
      cause browser performance issues. In general, use `getPageSpecification` instead.
    name: getPageHeight
    fullName: getPageHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;'
      return:
        type:
          - '(itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number'
  - uid: '@fluentui/react-internal!IListProps#getPageSpecification:member'
    summary: >-
      Called by the list to get the specification for a page. Use this method to provide an allocation of items per
      page, as well as an estimated rendered height for the page. The list will use this to optimize virtualization.
    name: getPageSpecification
    fullName: getPageSpecification
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;'
      return:
        type:
          - '(itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification'
  - uid: '@fluentui/react-internal!IListProps#getPageStyle:member'
    summary: >-
      Method called by the list to derive the page style object. For spacer pages, the list will derive the height and
      passed in heights will be ignored.
    name: getPageStyle
    fullName: getPageStyle
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getPageStyle?: (page: IPage<T>) => any;'
      return:
        type:
          - '(page: IPage<T>) => any'
  - uid: '@fluentui/react-internal!IListProps#ignoreScrollingState:member'
    summary: >-
      Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.
      This is a performance optimization to let List skip a render cycle by not updating its scrolling state.
    name: ignoreScrollingState
    fullName: ignoreScrollingState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreScrollingState?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!IListProps#items:member'
    summary: Items to render.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'items?: T[];'
      return:
        type:
          - 'T[]'
  - uid: '@fluentui/react-internal!IListProps#onPageAdded:member'
    summary: Optional callback for monitoring when a page is added.
    name: onPageAdded
    fullName: onPageAdded
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onPageAdded?: (page: IPage<T>) => void;'
      return:
        type:
          - '(page: IPage<T>) => void'
  - uid: '@fluentui/react-internal!IListProps#onPageRemoved:member'
    summary: Optional callback for monitoring when a page is removed.
    name: onPageRemoved
    fullName: onPageRemoved
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onPageRemoved?: (page: IPage<T>) => void;'
      return:
        type:
          - '(page: IPage<T>) => void'
  - uid: '@fluentui/react-internal!IListProps#onPagesUpdated:member'
    summary: >-
      Optional callback invoked when List rendering completed. This can be on initial mount or on re-render due to
      scrolling. This method will be called as a result of changes in List pages (added or removed), and after ALL the
      changes complete. To track individual page Add / Remove use onPageAdded / onPageRemoved instead.
    name: onPagesUpdated
    fullName: onPagesUpdated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onPagesUpdated?: (pages: IPage<T>[]) => void;'
      return:
        type:
          - '(pages: IPage<T>[]) => void'
  - uid: '@fluentui/react-internal!IListProps#onRenderCell:member'
    summary: Method to call when trying to render an item.
    name: onRenderCell
    fullName: onRenderCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;'
      return:
        type:
          - '(item?: T, index?: number, isScrolling?: boolean) => React.ReactNode'
  - uid: '@fluentui/react-internal!IListProps#onRenderPage:member'
    summary: Called when the List will render a page. Override this to control how cells are rendered within a page.
    name: onRenderPage
    fullName: onRenderPage
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderPage?: IRenderFunction<IPageProps<T>>;'
      return:
        type:
          - IRenderFunction<IPageProps<T>>
  - uid: '@fluentui/react-internal!IListProps#onRenderRoot:member'
    summary: >-
      Render override for the element at the root of the `List`<!-- -->. Use this to apply some final attributes or
      structure to the content each time the list is updated with new active pages or items.
    name: onRenderRoot
    fullName: onRenderRoot
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;'
      return:
        type:
          - IRenderFunction<IListOnRenderRootProps<T>>
  - uid: '@fluentui/react-internal!IListProps#onRenderSurface:member'
    summary: >-
      Render override for the element representing the surface of the `List`<!-- -->. Use this to alter the structure of
      the rendered content if necessary on each update.
    name: onRenderSurface
    fullName: onRenderSurface
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;'
      return:
        type:
          - IRenderFunction<IListOnRenderSurfaceProps<T>>
  - uid: '@fluentui/react-internal!IListProps#onShouldVirtualize:member'
    summary: >-
      Optional callback to determine whether the list should be rendered in full, or virtualized. Virtualization will
      add and remove pages of items as the user scrolls them into the visible range. This benefits larger list scenarios
      by reducing the DOM on the screen, but can negatively affect performance for smaller lists. The default
      implementation will virtualize when this callback is not provided.
    name: onShouldVirtualize
    fullName: onShouldVirtualize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onShouldVirtualize?: (props: IListProps<T>) => boolean;'
      return:
        type:
          - '(props: IListProps<T>) => boolean'
  - uid: '@fluentui/react-internal!IListProps#renderCount:member'
    summary: Number of items to render. Defaults to items.length.
    name: renderCount
    fullName: renderCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'renderCount?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!IListProps#renderedWindowsAhead:member'
    summary: 'In addition to the visible window, how many windowHeights should we render ahead.'
    name: renderedWindowsAhead
    fullName: renderedWindowsAhead
    langs:
      - typeScript
    type: property
    syntax:
      content: 'renderedWindowsAhead?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!IListProps#renderedWindowsBehind:member'
    summary: 'In addition to the visible window, how many windowHeights should we render behind.'
    name: renderedWindowsBehind
    fullName: renderedWindowsBehind
    langs:
      - typeScript
    type: property
    syntax:
      content: 'renderedWindowsBehind?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!IListProps#role:member'
    summary: >-
      The role to assign to the list root element. Use this to override the default assignment of 'list' to the root and
      'listitem' to the cells.
    name: role
    fullName: role
    langs:
      - typeScript
    type: property
    syntax:
      content: 'role?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-internal!IListProps#startIndex:member'
    summary: Index in items array to start rendering from. Defaults to 0.
    name: startIndex
    fullName: startIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'startIndex?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!IListProps#usePageCache:member'
    summary: >-
      Boolean value to enable render page caching. This is an experimental performance optimization that is off by
      default.
    name: usePageCache
    fullName: usePageCache
    langs:
      - typeScript
    type: property
    syntax:
      content: 'usePageCache?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!IListProps#version:member'
    summary: An object which can be passed in as a fresh instance to 'force update' the list.
    name: version
    fullName: version
    langs:
      - typeScript
    type: property
    syntax:
      content: 'version?: {};'
      return:
        type:
          - '{}'
