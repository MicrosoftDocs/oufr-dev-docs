### YamlMime:UniversalReference
items:
  - uid: 'office-ui-fabric-react!ComboBox:class'
    name: ComboBox
    fullName: ComboBox
    langs:
      - typeScript
    type: class
    extends:
      - 'React.Component<IComboBoxProps, IComboBoxState> '
    package: office-ui-fabric-react!
    children:
      - 'office-ui-fabric-react!ComboBox:constructor(1)'
      - 'office-ui-fabric-react!ComboBox#componentDidMount:member(1)'
      - 'office-ui-fabric-react!ComboBox#componentDidUpdate:member(1)'
      - 'office-ui-fabric-react!ComboBox#componentWillUnmount:member(1)'
      - 'office-ui-fabric-react!ComboBox.defaultProps:member'
      - 'office-ui-fabric-react!ComboBox#dismissMenu:member'
      - 'office-ui-fabric-react!ComboBox#focus:member'
      - 'office-ui-fabric-react!ComboBox#render:member(1)'
      - 'office-ui-fabric-react!ComboBox#selectedOptions:member'
      - 'office-ui-fabric-react!ComboBox#UNSAFE_componentWillReceiveProps:member(1)'
  - uid: 'office-ui-fabric-react!ComboBox:constructor(1)'
    summary: Constructs a new instance of the `ComboBox` class
    name: (constructor)(props)
    fullName: (constructor)(props)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(props: IComboBoxProps);'
      parameters:
        - id: props
          description: ''
          type:
            - 'office-ui-fabric-react!IComboBoxProps:interface'
  - uid: 'office-ui-fabric-react!ComboBox#componentDidMount:member(1)'
    name: componentDidMount()
    fullName: componentDidMount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentDidMount(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'office-ui-fabric-react!ComboBox#componentDidUpdate:member(1)'
    name: 'componentDidUpdate(prevProps, prevState)'
    fullName: 'componentDidUpdate(prevProps, prevState)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentDidUpdate(prevProps: IComboBoxProps, prevState: IComboBoxState): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: prevProps
          description: ''
          type:
            - 'office-ui-fabric-react!IComboBoxProps:interface'
        - id: prevState
          description: ''
          type:
            - 'office-ui-fabric-react!IComboBoxState:interface'
  - uid: 'office-ui-fabric-react!ComboBox#componentWillUnmount:member(1)'
    name: componentWillUnmount()
    fullName: componentWillUnmount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentWillUnmount(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'office-ui-fabric-react!ComboBox.defaultProps:member'
    name: defaultProps
    fullName: defaultProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static defaultProps: IComboBoxProps;'
      return:
        type:
          - 'office-ui-fabric-react!IComboBoxProps:interface'
  - uid: 'office-ui-fabric-react!ComboBox#dismissMenu:member'
    summary: Close menu callout if it is open
    name: dismissMenu
    fullName: dismissMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dismissMenu: () => void;'
      return:
        type:
          - () => void
  - uid: 'office-ui-fabric-react!ComboBox#focus:member'
    name: focus
    fullName: focus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'focus: (shouldOpenOnFocus?: boolean | undefined, useFocusAsync?: boolean | undefined) => void;'
      return:
        type:
          - '(shouldOpenOnFocus?: boolean | undefined, useFocusAsync?: boolean | undefined) => void'
  - uid: 'office-ui-fabric-react!ComboBox#render:member(1)'
    name: render()
    fullName: render()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'render(): JSX.Element;'
      return:
        type:
          - JSX.Element
        description: ''
  - uid: 'office-ui-fabric-react!ComboBox#selectedOptions:member'
    summary: All selected options
    name: selectedOptions
    fullName: selectedOptions
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly selectedOptions: IComboBoxOption[];'
      return:
        type:
          - 'IComboBoxOption[]'
  - uid: 'office-ui-fabric-react!ComboBox#UNSAFE_componentWillReceiveProps:member(1)'
    name: UNSAFE_componentWillReceiveProps(newProps)
    fullName: UNSAFE_componentWillReceiveProps(newProps)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'UNSAFE_componentWillReceiveProps(newProps: IComboBoxProps): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newProps
          description: ''
          type:
            - 'office-ui-fabric-react!IComboBoxProps:interface'
