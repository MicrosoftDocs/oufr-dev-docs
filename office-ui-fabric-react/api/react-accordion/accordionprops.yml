### YamlMime:TSType
name: AccordionProps
uid: '@fluentui/react-accordion!AccordionProps:interface'
package: '@fluentui/react-accordion!'
fullName: AccordionProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: collapsible
    uid: '@fluentui/react-accordion!AccordionProps#collapsible:member'
    package: '@fluentui/react-accordion!'
    fullName: collapsible
    summary: Indicates if Accordion support multiple Panels closed at the same time
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'collapsible?: boolean;'
      return:
        type: boolean
  - name: defaultIndex
    uid: '@fluentui/react-accordion!AccordionProps#defaultIndex:member'
    package: '@fluentui/react-accordion!'
    fullName: defaultIndex
    summary: Default value for the uncontrolled state of the panel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultIndex?: AccordionIndex;'
      return:
        type: AccordionIndex
  - name: index
    uid: '@fluentui/react-accordion!AccordionProps#index:member'
    package: '@fluentui/react-accordion!'
    fullName: index
    summary: Controls the state of the panel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'index?: AccordionIndex;'
      return:
        type: AccordionIndex
  - name: multiple
    uid: '@fluentui/react-accordion!AccordionProps#multiple:member'
    package: '@fluentui/react-accordion!'
    fullName: multiple
    summary: Indicates if Accordion support multiple Panels opened at the same time
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'multiple?: boolean;'
      return:
        type: boolean
methods:
  - name: 'onToggle(event, index)'
    uid: '@fluentui/react-accordion!AccordionProps#onToggle:member(1)'
    package: '@fluentui/react-accordion!'
    fullName: 'onToggle(event, index)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onToggle?(event: React.MouseEvent<HTMLElement>, index: number): void;'
      parameters:
        - id: event
          description: ''
          type: React.MouseEvent&lt;HTMLElement&gt;
        - id: index
          description: ''
          type: number
      return:
        type: void
        description: ''
extends: ComponentProps
