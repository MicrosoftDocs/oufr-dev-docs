### YamlMime:TSType
name: IBreadcrumbProps
uid: '@fluentui/react!IBreadcrumbProps:interface'
package: '@fluentui/react!'
fullName: IBreadcrumbProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: ariaLabel
    uid: '@fluentui/react!IBreadcrumbProps#ariaLabel:member'
    package: '@fluentui/react!'
    fullName: ariaLabel
    summary: >-
      Aria label for the root element of the breadcrumb (which is a navigation
      landmark).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type: string
  - name: className
    uid: '@fluentui/react!IBreadcrumbProps#className:member'
    package: '@fluentui/react!'
    fullName: className
    summary: Optional class for the root breadcrumb element.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: componentRef
    uid: '@fluentui/react!IBreadcrumbProps#componentRef:member'
    package: '@fluentui/react!'
    fullName: componentRef
    summary: >-
      Optional callback to access the `IBreadcrumb` interface. Use this instead
      of `ref` for accessing the public methods and properties of the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IBreadcrumb>;'
      return:
        type: IRefObject&lt;IBreadcrumb&gt;
  - name: dividerAs
    uid: '@fluentui/react!IBreadcrumbProps#dividerAs:member'
    package: '@fluentui/react!'
    fullName: dividerAs
    summary: Render a custom divider in place of the default chevron `>`
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dividerAs?: IComponentAs<IDividerAsProps>;'
      return:
        type: IComponentAs&lt;IDividerAsProps&gt;
  - name: focusZoneProps
    uid: '@fluentui/react!IBreadcrumbProps#focusZoneProps:member'
    package: '@fluentui/react!'
    fullName: focusZoneProps
    summary: Extra props for the root FocusZone.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'focusZoneProps?: IFocusZoneProps;'
      return:
        type: '<xref uid="@fluentui/react-focus!IFocusZoneProps:interface" />'
  - name: items
    uid: '@fluentui/react!IBreadcrumbProps#items:member'
    package: '@fluentui/react!'
    fullName: items
    summary: Collection of breadcrumbs to render
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'items: IBreadcrumbItem[];'
      return:
        type: 'IBreadcrumbItem[]'
  - name: maxDisplayedItems
    uid: '@fluentui/react!IBreadcrumbProps#maxDisplayedItems:member'
    package: '@fluentui/react!'
    fullName: maxDisplayedItems
    summary: >-
      The maximum number of breadcrumbs to display before coalescing. If not
      specified, all breadcrumbs will be rendered.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxDisplayedItems?: number;'
      return:
        type: number
  - name: onGrowData
    uid: '@fluentui/react!IBreadcrumbProps#onGrowData:member'
    package: '@fluentui/react!'
    fullName: onGrowData
    summary: >-
      Method that determines how to group the length of the breadcrumb. Return
      undefined to never increase breadcrumb length.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onGrowData?: (data: IBreadcrumbData) => IBreadcrumbData | undefined;'
      return:
        type: '(data: IBreadcrumbData) =&gt; IBreadcrumbData | undefined'
  - name: onReduceData
    uid: '@fluentui/react!IBreadcrumbProps#onReduceData:member'
    package: '@fluentui/react!'
    fullName: onReduceData
    summary: >-
      Method that determines how to reduce the length of the breadcrumb. Return
      undefined to never reduce breadcrumb length.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onReduceData?: (data: IBreadcrumbData) => IBreadcrumbData | undefined;'
      return:
        type: '(data: IBreadcrumbData) =&gt; IBreadcrumbData | undefined'
  - name: onRenderItem
    uid: '@fluentui/react!IBreadcrumbProps#onRenderItem:member'
    package: '@fluentui/react!'
    fullName: onRenderItem
    summary: Custom render function for each breadcrumb item.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderItem?: IRenderFunction<IBreadcrumbItem>;'
      return:
        type: IRenderFunction&lt;IBreadcrumbItem&gt;
  - name: onRenderOverflowIcon
    uid: '@fluentui/react!IBreadcrumbProps#onRenderOverflowIcon:member'
    package: '@fluentui/react!'
    fullName: onRenderOverflowIcon
    summary: Render a custom overflow icon in place of the default icon `...`
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderOverflowIcon?: IRenderFunction<IButtonProps>;'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
  - name: overflowAriaLabel
    uid: '@fluentui/react!IBreadcrumbProps#overflowAriaLabel:member'
    package: '@fluentui/react!'
    fullName: overflowAriaLabel
    summary: Aria label for the overflow button.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'overflowAriaLabel?: string;'
      return:
        type: string
  - name: overflowButtonAs
    uid: '@fluentui/react!IBreadcrumbProps#overflowButtonAs:member'
    package: '@fluentui/react!'
    fullName: overflowButtonAs
    summary: Custom component for the overflow button.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'overflowButtonAs?: IComponentAs<IButtonProps>;'
      return:
        type: IComponentAs&lt;IButtonProps&gt;
  - name: overflowIndex
    uid: '@fluentui/react!IBreadcrumbProps#overflowIndex:member'
    package: '@fluentui/react!'
    fullName: overflowIndex
    summary: Optional index where overflow items will be collapsed.  0
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'overflowIndex?: number;'
      return:
        type: number
  - name: styles
    uid: '@fluentui/react!IBreadcrumbProps#styles:member'
    package: '@fluentui/react!'
    fullName: styles
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        styles?: IStyleFunctionOrObject<IBreadcrumbStyleProps,
        IBreadcrumbStyles>;
      return:
        type: 'IStyleFunctionOrObject&lt;IBreadcrumbStyleProps, IBreadcrumbStyles&gt;'
  - name: theme
    uid: '@fluentui/react!IBreadcrumbProps#theme:member'
    package: '@fluentui/react!'
    fullName: theme
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
  - name: tooltipHostProps
    uid: '@fluentui/react!IBreadcrumbProps#tooltipHostProps:member'
    package: '@fluentui/react!'
    fullName: tooltipHostProps
    summary: Extra props for the TooltipHost which wraps each breadcrumb item.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tooltipHostProps?: ITooltipHostProps;'
      return:
        type: ITooltipHostProps
extends: 'React.HTMLAttributes&lt;HTMLElement&gt; '
