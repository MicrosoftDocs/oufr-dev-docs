### YamlMime:TSType
name: IDetailsColumnProps
uid: '@fluentui/react!IDetailsColumnProps:interface'
package: '@fluentui/react!'
fullName: IDetailsColumnProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: cellStyleProps
    uid: '@fluentui/react!IDetailsColumnProps#cellStyleProps:member'
    package: '@fluentui/react!'
    fullName: cellStyleProps
    summary: Custom styles for cell rendering.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cellStyleProps?: ICellStyleProps;'
      return:
        type: ICellStyleProps
  - name: column
    uid: '@fluentui/react!IDetailsColumnProps#column:member'
    package: '@fluentui/react!'
    fullName: column
    summary: The column definition for the component instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'column: IColumn;'
      return:
        type: IColumn
  - name: columnIndex
    uid: '@fluentui/react!IDetailsColumnProps#columnIndex:member'
    package: '@fluentui/react!'
    fullName: columnIndex
    summary: The column index for the component instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'columnIndex: number;'
      return:
        type: number
  - name: componentRef
    uid: '@fluentui/react!IDetailsColumnProps#componentRef:member'
    package: '@fluentui/react!'
    fullName: componentRef
    summary: A reference to the component instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: () => void;'
      return:
        type: () =&gt; void
  - name: dragDropHelper
    uid: '@fluentui/react!IDetailsColumnProps#dragDropHelper:member'
    package: '@fluentui/react!'
    fullName: dragDropHelper
    summary: The drag and drop helper for the component instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dragDropHelper?: IDragDropHelper | null;'
      return:
        type: IDragDropHelper | null
  - name: isDraggable
    uid: '@fluentui/react!IDetailsColumnProps#isDraggable:member'
    package: '@fluentui/react!'
    fullName: isDraggable
    summary: Whether or not the column can be re-ordered via drag and drop.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isDraggable?: boolean;'
      return:
        type: boolean
  - name: isDropped
    uid: '@fluentui/react!IDetailsColumnProps#isDropped:member'
    package: '@fluentui/react!'
    fullName: isDropped
    summary: Whether or not the column has been dropped via drag and drop.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isDropped?: boolean;'
      return:
        type: boolean
  - name: onColumnClick
    uid: '@fluentui/react!IDetailsColumnProps#onColumnClick:member'
    package: '@fluentui/react!'
    fullName: onColumnClick
    summary: Callback fired when click event occurs.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) =>
        void;
      return:
        type: '(ev: React.MouseEvent&lt;HTMLElement&gt;, column: IColumn) =&gt; void'
  - name: onColumnContextMenu
    uid: '@fluentui/react!IDetailsColumnProps#onColumnContextMenu:member'
    package: '@fluentui/react!'
    fullName: onColumnContextMenu
    summary: Callback fired on contextual menu event to provide contextual menu UI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onColumnContextMenu?: (column: IColumn, ev:
        React.MouseEvent<HTMLElement>) => void;
      return:
        type: '(column: IColumn, ev: React.MouseEvent&lt;HTMLElement&gt;) =&gt; void'
  - name: onRenderColumnHeaderTooltip
    uid: '@fluentui/react!IDetailsColumnProps#onRenderColumnHeaderTooltip:member'
    package: '@fluentui/react!'
    fullName: onRenderColumnHeaderTooltip
    summary: Render function for providing a column header tooltip.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onRenderColumnHeaderTooltip?:
        IRenderFunction<IDetailsColumnRenderTooltipProps>;
      return:
        type: IRenderFunction&lt;IDetailsColumnRenderTooltipProps&gt;
  - name: parentId
    uid: '@fluentui/react!IDetailsColumnProps#parentId:member'
    package: '@fluentui/react!'
    fullName: parentId
    summary: Parent ID used for accessibility label(s).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parentId?: string;'
      return:
        type: string
  - name: setDraggedItemIndex
    uid: '@fluentui/react!IDetailsColumnProps#setDraggedItemIndex:member'
    package: '@fluentui/react!'
    fullName: setDraggedItemIndex
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use `updateDragInfo`
    syntax:
      content: 'setDraggedItemIndex?: (itemIndex: number) => void;'
      return:
        type: '(itemIndex: number) =&gt; void'
  - name: styles
    uid: '@fluentui/react!IDetailsColumnProps#styles:member'
    package: '@fluentui/react!'
    fullName: styles
    summary: The component styles to respect during render.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps,
        IDetailsColumnStyles>;
      return:
        type: >-
          IStyleFunctionOrObject&lt;IDetailsColumnStyleProps,
          IDetailsColumnStyles&gt;
  - name: theme
    uid: '@fluentui/react!IDetailsColumnProps#theme:member'
    package: '@fluentui/react!'
    fullName: theme
    summary: The theme object to respect during render.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
  - name: updateDragInfo
    uid: '@fluentui/react!IDetailsColumnProps#updateDragInfo:member'
    package: '@fluentui/react!'
    fullName: updateDragInfo
    summary: Callback on drag and drop event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        updateDragInfo?: (props: {
                itemIndex: number;
            }, event?: MouseEvent) => void;
      return:
        type: |-
          (props: {
                  itemIndex: number;
              }, event?: MouseEvent) =&gt; void
  - name: useFastIcons
    uid: '@fluentui/react!IDetailsColumnProps#useFastIcons:member'
    package: '@fluentui/react!'
    fullName: useFastIcons
    summary: >-
      Whether to use fast icon and check components. The icons can't be targeted
      by customization but are still customizable via class names.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useFastIcons?: boolean;'
      return:
        type: boolean
extends: 'React.ClassAttributes&lt;DetailsColumnBase&gt; '
