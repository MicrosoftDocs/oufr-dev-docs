### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react!IDetailsHeaderBaseProps:interface'
    name: IDetailsHeaderBaseProps
    fullName: IDetailsHeaderBaseProps
    langs:
      - typeScript
    type: interface
    extends:
      - React.ClassAttributes<DetailsHeaderBase>
      - 'IDetailsItemProps '
    package: '@fluentui/react!'
    children:
      - '@fluentui/react!IDetailsHeaderBaseProps#ariaLabel:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#ariaLabelForSelectAllCheckbox:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#ariaLabelForSelectionColumn:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#ariaLabelForToggleAllGroupsButton:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#className:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#collapseAllVisibility:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#columnReorderOptions:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#columnReorderProps:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#componentRef:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#isAllCollapsed:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#layoutMode:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#minimumPixelsForDrag:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#onColumnAutoResized:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#onColumnClick:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#onColumnContextMenu:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#onColumnIsSizingChanged:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#onColumnResized:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#onRenderColumnHeaderTooltip:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#onRenderDetailsCheckbox:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#onToggleCollapseAll:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#selectAllVisibility:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#styles:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#theme:member'
      - '@fluentui/react!IDetailsHeaderBaseProps#useFastIcons:member'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#ariaLabel:member'
    summary: ariaLabel for the entire header
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#ariaLabelForSelectAllCheckbox:member'
    summary: ariaLabel for the header checkbox that selects or deselects everything
    name: ariaLabelForSelectAllCheckbox
    fullName: ariaLabelForSelectAllCheckbox
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForSelectAllCheckbox?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#ariaLabelForSelectionColumn:member'
    summary: ariaLabel for the selection column
    name: ariaLabelForSelectionColumn
    fullName: ariaLabelForSelectionColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForSelectionColumn?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#ariaLabelForToggleAllGroupsButton:member'
    summary: ariaLabel for expand/collapse group button
    name: ariaLabelForToggleAllGroupsButton
    fullName: ariaLabelForToggleAllGroupsButton
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForToggleAllGroupsButton?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#className:member'
    summary: Overriding class name
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#collapseAllVisibility:member'
    summary: Whether to collapse for all visibility
    name: collapseAllVisibility
    fullName: collapseAllVisibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'collapseAllVisibility?: CollapseAllVisibility;'
      return:
        type:
          - CollapseAllVisibility
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#columnReorderOptions:member'
    summary: Column reordering options
    name: columnReorderOptions
    fullName: columnReorderOptions
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnReorderOptions?: IColumnReorderOptions;'
      return:
        type:
          - IColumnReorderOptions
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#columnReorderProps:member'
    summary: Column reordering options
    name: columnReorderProps
    fullName: columnReorderProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnReorderProps?: IColumnReorderHeaderProps;'
      return:
        type:
          - IColumnReorderHeaderProps
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#componentRef:member'
    summary: Ref to the component itself
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IDetailsHeader>;'
      return:
        type:
          - IRefObject<IDetailsHeader>
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#isAllCollapsed:member'
    summary: Whether or not all is collapsed
    name: isAllCollapsed
    fullName: isAllCollapsed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isAllCollapsed?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#layoutMode:member'
    summary: Layout mode - fixedColumns or justified
    name: layoutMode
    fullName: layoutMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'layoutMode: DetailsListLayoutMode;'
      return:
        type:
          - DetailsListLayoutMode
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#minimumPixelsForDrag:member'
    summary: Minimum pixels to be moved before dragging is registered
    name: minimumPixelsForDrag
    fullName: minimumPixelsForDrag
    langs:
      - typeScript
    type: property
    syntax:
      content: 'minimumPixelsForDrag?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#onColumnAutoResized:member'
    summary: Callback for when column is automatically resized
    name: onColumnAutoResized
    fullName: onColumnAutoResized
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;'
      return:
        type:
          - '(column: IColumn, columnIndex: number) => void'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#onColumnClick:member'
    summary: Callback for when the column is clicked
    name: onColumnClick
    fullName: onColumnClick
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;'
      return:
        type:
          - '(ev: React.MouseEvent<HTMLElement>, column: IColumn) => void'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#onColumnContextMenu:member'
    summary: Callback for when the column needs to show a context menu
    name: onColumnContextMenu
    fullName: onColumnContextMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;'
      return:
        type:
          - '(column: IColumn, ev: React.MouseEvent<HTMLElement>) => void'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#onColumnIsSizingChanged:member'
    summary: Callback for when column sizing has changed
    name: onColumnIsSizingChanged
    fullName: onColumnIsSizingChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;'
      return:
        type:
          - '(column: IColumn, isSizing: boolean) => void'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#onColumnResized:member'
    summary: Callback for when column is resized
    name: onColumnResized
    fullName: onColumnResized
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;'
      return:
        type:
          - '(column: IColumn, newWidth: number, columnIndex: number) => void'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#onRenderColumnHeaderTooltip:member'
    summary: Callback to render a tooltip for the column header
    name: onRenderColumnHeaderTooltip
    fullName: onRenderColumnHeaderTooltip
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;'
      return:
        type:
          - IRenderFunction<IDetailsColumnRenderTooltipProps>
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#onRenderDetailsCheckbox:member'
    summary: 'If provided, can be used to render a custom checkbox'
    name: onRenderDetailsCheckbox
    fullName: onRenderDetailsCheckbox
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;'
      return:
        type:
          - IRenderFunction<IDetailsCheckboxProps>
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#onToggleCollapseAll:member'
    summary: Callback for when collapse all is toggled
    name: onToggleCollapseAll
    fullName: onToggleCollapseAll
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onToggleCollapseAll?: (isAllCollapsed: boolean) => void;'
      return:
        type:
          - '(isAllCollapsed: boolean) => void'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#selectAllVisibility:member'
    summary: Select all button visibility
    name: selectAllVisibility
    fullName: selectAllVisibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectAllVisibility?: SelectAllVisibility;'
      return:
        type:
          - SelectAllVisibility
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#styles:member'
    summary: Call to provide customized styling that will layer on top of the variant rules.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#theme:member'
    summary: Theme from the Higher Order Component
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@fluentui/theme!ITheme:interface'
  - uid: '@fluentui/react!IDetailsHeaderBaseProps#useFastIcons:member'
    summary: >-
      Whether to use fast icon and check components. The icons can't be targeted by customization but are still
      customizable via class names.
    name: useFastIcons
    fullName: useFastIcons
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useFastIcons?: boolean;'
      return:
        type:
          - boolean
