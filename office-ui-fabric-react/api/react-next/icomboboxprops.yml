### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-next!IComboBoxProps:interface'
    name: IComboBoxProps
    fullName: IComboBoxProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'ISelectableDroppableTextProps<IComboBox, IComboBox> '
    package: '@fluentui/react-next!'
    children:
      - '@fluentui/react-next!IComboBoxProps#allowFreeform:member'
      - '@fluentui/react-next!IComboBoxProps#ariaDescribedBy:member'
      - '@fluentui/react-next!IComboBoxProps#autoComplete:member'
      - '@fluentui/react-next!IComboBoxProps#autofill:member'
      - '@fluentui/react-next!IComboBoxProps#buttonIconProps:member'
      - '@fluentui/react-next!IComboBoxProps#caretDownButtonStyles:member'
      - '@fluentui/react-next!IComboBoxProps#comboBoxOptionStyles:member'
      - '@fluentui/react-next!IComboBoxProps#componentRef:member'
      - '@fluentui/react-next!IComboBoxProps#dropdownMaxWidth:member'
      - '@fluentui/react-next!IComboBoxProps#dropdownWidth:member'
      - '@fluentui/react-next!IComboBoxProps#getClassNames:member'
      - '@fluentui/react-next!IComboBoxProps#iconButtonProps:member'
      - '@fluentui/react-next!IComboBoxProps#isButtonAriaHidden:member'
      - '@fluentui/react-next!IComboBoxProps#keytipProps:member'
      - '@fluentui/react-next!IComboBoxProps#multiSelectDelimiter:member'
      - '@fluentui/react-next!IComboBoxProps#onChange:member'
      - '@fluentui/react-next!IComboBoxProps#onItemClick:member'
      - '@fluentui/react-next!IComboBoxProps#onMenuDismiss:member'
      - '@fluentui/react-next!IComboBoxProps#onMenuDismissed:member'
      - '@fluentui/react-next!IComboBoxProps#onMenuOpen:member'
      - '@fluentui/react-next!IComboBoxProps#onPendingValueChanged:member'
      - '@fluentui/react-next!IComboBoxProps#onRenderLabel:member'
      - '@fluentui/react-next!IComboBoxProps#onRenderLowerContent:member'
      - '@fluentui/react-next!IComboBoxProps#onRenderUpperContent:member'
      - '@fluentui/react-next!IComboBoxProps#onResolveOptions:member'
      - '@fluentui/react-next!IComboBoxProps#onScrollToItem:member'
      - '@fluentui/react-next!IComboBoxProps#options:member'
      - '@fluentui/react-next!IComboBoxProps#persistMenu:member'
      - '@fluentui/react-next!IComboBoxProps#scrollSelectedToTop:member'
      - '@fluentui/react-next!IComboBoxProps#shouldRestoreFocus:member'
      - '@fluentui/react-next!IComboBoxProps#styles:member'
      - '@fluentui/react-next!IComboBoxProps#text:member'
      - '@fluentui/react-next!IComboBoxProps#theme:member'
      - '@fluentui/react-next!IComboBoxProps#useComboBoxAsMenuWidth:member'
  - uid: '@fluentui/react-next!IComboBoxProps#allowFreeform:member'
    summary: >-
      Whether the ComboBox is free form, meaning that the user input is not bound to provided options. Defaults to
      false.
    name: allowFreeform
    fullName: allowFreeform
    langs:
      - typeScript
    type: property
    syntax:
      content: 'allowFreeform?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IComboBoxProps#ariaDescribedBy:member'
    summary: Optional prop to add a string id that can be referenced inside the aria-describedby attribute
    name: ariaDescribedBy
    fullName: ariaDescribedBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IComboBoxProps#autoComplete:member'
    summary: >-
      Whether the ComboBox auto completes. As the user is inputing text, it will be suggested potential matches from the
      list of options. If the combo box is expanded, this will also scroll to the suggested option, and give it a
      selected style.
    name: autoComplete
    fullName: autoComplete
    langs:
      - typeScript
    type: property
    syntax:
      content: 'autoComplete?: ''on'' | ''off'';'
      return:
        type:
          - '''on'' | ''off'''
  - uid: '@fluentui/react-next!IComboBoxProps#autofill:member'
    summary: The AutofillProps to be passed into the Autofill component inside combobox
    name: autofill
    fullName: autofill
    langs:
      - typeScript
    type: property
    syntax:
      content: 'autofill?: IAutofillProps;'
      return:
        type:
          - 'office-ui-fabric-react!IAutofillProps:interface'
  - uid: '@fluentui/react-next!IComboBoxProps#buttonIconProps:member'
    summary: The IconProps to use for the button aspect of the combobox
    name: buttonIconProps
    fullName: buttonIconProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'buttonIconProps?: IIconProps;'
      return:
        type:
          - 'office-ui-fabric-react!IIconProps:interface'
  - uid: '@fluentui/react-next!IComboBoxProps#caretDownButtonStyles:member'
    summary: Styles for the caret down button.
    name: caretDownButtonStyles
    fullName: caretDownButtonStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'caretDownButtonStyles?: Partial<IButtonStyles>;'
      return:
        type:
          - Partial<IButtonStyles>
  - uid: '@fluentui/react-next!IComboBoxProps#comboBoxOptionStyles:member'
    summary: >-
      Default styles that should be applied to ComboBox options, in case an option does not come with user-defined
      custom styles
    name: comboBoxOptionStyles
    fullName: comboBoxOptionStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'comboBoxOptionStyles?: Partial<IComboBoxOptionStyles>;'
      return:
        type:
          - Partial<IComboBoxOptionStyles>
  - uid: '@fluentui/react-next!IComboBoxProps#componentRef:member'
    summary: >-
      Optional callback to access the IComboBox interface. Use this instead of ref for accessing the public methods and
      properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IComboBox>;'
      return:
        type:
          - IRefObject<IComboBox>
  - uid: '@fluentui/react-next!IComboBoxProps#dropdownMaxWidth:member'
    summary: Custom max width for dropdown
    name: dropdownMaxWidth
    fullName: dropdownMaxWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dropdownMaxWidth?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-next!IComboBoxProps#dropdownWidth:member'
    summary: Custom width for dropdown (unless useComboBoxAsMenuWidth is undefined or false)
    name: dropdownWidth
    fullName: dropdownWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dropdownWidth?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-next!IComboBoxProps#getClassNames:member'
    summary: >-
      Custom function for providing the classNames for the ComboBox. Can be used to provide all styles for the component
      instead of applying them on top of the default styles.
    name: getClassNames
    fullName: getClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        getClassNames?: (theme: ITheme, isOpen: boolean, disabled: boolean, required: boolean, focused: boolean,
        allowFreeForm: boolean, hasErrorMessage: boolean, className?: string) => IComboBoxClassNames;
      return:
        type:
          - >-
            (theme: ITheme, isOpen: boolean, disabled: boolean, required: boolean, focused: boolean, allowFreeForm:
            boolean, hasErrorMessage: boolean, className?: string) => IComboBoxClassNames
  - uid: '@fluentui/react-next!IComboBoxProps#iconButtonProps:member'
    summary: Optional iconButton props on combo box
    name: iconButtonProps
    fullName: iconButtonProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'iconButtonProps?: IButtonProps;'
      return:
        type:
          - 'office-ui-fabric-react!IButtonProps:interface'
  - uid: '@fluentui/react-next!IComboBoxProps#isButtonAriaHidden:member'
    summary: >-
      Sets the 'aria-hidden' attribute on the ComboBox's button element instructing screen readers how to handle the
      element. This element is hidden by default because all functionality is handled by the input element and the arrow
      button is only meant to be decorative.
    name: isButtonAriaHidden
    fullName: isButtonAriaHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isButtonAriaHidden?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IComboBoxProps#keytipProps:member'
    summary: Optional keytip for this combo box
    name: keytipProps
    fullName: keytipProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'keytipProps?: IKeytipProps;'
      return:
        type:
          - 'office-ui-fabric-react!IKeytipProps:interface'
  - uid: '@fluentui/react-next!IComboBoxProps#multiSelectDelimiter:member'
    summary: 'When multiple items are selected, this will be used to separate values in the combobox input.'
    name: multiSelectDelimiter
    fullName: multiSelectDelimiter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'multiSelectDelimiter?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IComboBoxProps#onChange:member'
    summary: >-
      Callback issued when either: 1) the selected option changes 2) a manually edited value is submitted. In this case
      there may not be a matched option if allowFreeform is also true (and hence only value would be true, the other
      parameter would be null in this case)
    name: onChange
    fullName: onChange
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        onChange?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) =>
        void;
      return:
        type:
          - '(event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void'
  - uid: '@fluentui/react-next!IComboBoxProps#onItemClick:member'
    summary: Callback issued when a ComboBox item is clicked.
    name: onItemClick
    fullName: onItemClick
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onItemClick?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number) => void;'
      return:
        type:
          - '(event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number) => void'
  - uid: '@fluentui/react-next!IComboBoxProps#onMenuDismiss:member'
    summary: Function that gets invoked before the menu gets dismissed
    name: onMenuDismiss
    fullName: onMenuDismiss
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMenuDismiss?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-next!IComboBoxProps#onMenuDismissed:member'
    summary: Function that gets invoked when the ComboBox menu is dismissed
    name: onMenuDismissed
    fullName: onMenuDismissed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMenuDismissed?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-next!IComboBoxProps#onMenuOpen:member'
    summary: Function that gets invoked when the ComboBox menu is launched
    name: onMenuOpen
    fullName: onMenuOpen
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMenuOpen?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-next!IComboBoxProps#onPendingValueChanged:member'
    summary: >-
      Callback issued when the user changes the pending value in ComboBox. This will be called any time the component is
      updated and there is a current pending value. Option, index, and value will all be undefined if no change has
      taken place and the previously entered pending value is still valid.
    name: onPendingValueChanged
    fullName: onPendingValueChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onPendingValueChanged?: (option?: IComboBoxOption, index?: number, value?: string) => void;'
      return:
        type:
          - '(option?: IComboBoxOption, index?: number, value?: string) => void'
  - uid: '@fluentui/react-next!IComboBoxProps#onRenderLabel:member'
    summary: Custom render function for the label text.
    name: onRenderLabel
    fullName: onRenderLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderLabel?: IRenderFunction<IOnRenderComboBoxLabelProps>;'
      return:
        type:
          - IRenderFunction<IOnRenderComboBoxLabelProps>
  - uid: '@fluentui/react-next!IComboBoxProps#onRenderLowerContent:member'
    summary: Add additional content below the callout list.
    name: onRenderLowerContent
    fullName: onRenderLowerContent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderLowerContent?: IRenderFunction<IComboBoxProps>;'
      return:
        type:
          - IRenderFunction<IComboBoxProps>
  - uid: '@fluentui/react-next!IComboBoxProps#onRenderUpperContent:member'
    summary: Add additional content above the callout list.
    name: onRenderUpperContent
    fullName: onRenderUpperContent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderUpperContent?: IRenderFunction<IComboBoxProps>;'
      return:
        type:
          - IRenderFunction<IComboBoxProps>
  - uid: '@fluentui/react-next!IComboBoxProps#onResolveOptions:member'
    summary: >-
      Callback issued when the options should be resolved, if they have been updated or if they need to be passed in the
      first time
    name: onResolveOptions
    fullName: onResolveOptions
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onResolveOptions?: (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>;'
      return:
        type:
          - '(options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>'
  - uid: '@fluentui/react-next!IComboBoxProps#onScrollToItem:member'
    summary: Callback issued when the ComboBox requests the list to scroll to a specific element
    name: onScrollToItem
    fullName: onScrollToItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onScrollToItem?: (itemIndex: number) => void;'
      return:
        type:
          - '(itemIndex: number) => void'
  - uid: '@fluentui/react-next!IComboBoxProps#options:member'
    summary: Collection of options for this ComboBox
    name: options
    fullName: options
    langs:
      - typeScript
    type: property
    syntax:
      content: 'options: IComboBoxOption[];'
      return:
        type:
          - 'IComboBoxOption[]'
  - uid: '@fluentui/react-next!IComboBoxProps#persistMenu:member'
    summary: >-
      Menu will not be created or destroyed when opened or closed, instead it will be hidden. This will improve perf of
      the menu opening but could potentially impact overall perf by having more elements in the dom. Should only be used
      when perf is important. Note: This may increase the amount of time it takes for the comboBox itself to mount.
    name: persistMenu
    fullName: persistMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'persistMenu?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IComboBoxProps#scrollSelectedToTop:member'
    summary: >-
      When options are scrollable the selected option is positioned at the top of the callout when it is opened (unless
      it has reached the end of the scrollbar).
    name: scrollSelectedToTop
    fullName: scrollSelectedToTop
    langs:
      - typeScript
    type: property
    syntax:
      content: 'scrollSelectedToTop?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IComboBoxProps#shouldRestoreFocus:member'
    summary: >-
      When specified, determines whether the callout (the menu which drops down) should restore the focus after being
      dismissed or not. If false, then the menu will not try to set focus to whichever element had focus before the menu
      was opened.
    name: shouldRestoreFocus
    fullName: shouldRestoreFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldRestoreFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IComboBoxProps#styles:member'
    summary: Custom styles for this component
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: Partial<IComboBoxStyles>;'
      return:
        type:
          - Partial<IComboBoxStyles>
  - uid: '@fluentui/react-next!IComboBoxProps#text:member'
    summary: 'Value to show in the input, does not have to map to a combobox option'
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'text?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IComboBoxProps#theme:member'
    summary: Theme provided by HOC.
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - ITheme
  - uid: '@fluentui/react-next!IComboBoxProps#useComboBoxAsMenuWidth:member'
    summary: Whether to use the ComboBoxes width as the menu's width
    name: useComboBoxAsMenuWidth
    fullName: useComboBoxAsMenuWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useComboBoxAsMenuWidth?: boolean;'
      return:
        type:
          - boolean
