### YamlMime:TSPackage
uid: '@fluentui/style-utilities!'
name: '@fluentui/style-utilities'
type: package
summary: ''
interfaces:
  - '@fluentui/style-utilities!IGetFocusStylesOptions:interface'
  - '@fluentui/style-utilities!IIconOptions:interface'
  - '@fluentui/style-utilities!IIconRecord:interface'
  - '@fluentui/style-utilities!IIconSubset:interface'
  - '@fluentui/style-utilities!IIconSubsetRecord:interface'
functions:
  - name: buildClassMap(styles)
    uid: '@fluentui/style-utilities!buildClassMap:function(1)'
    package: '@fluentui/style-utilities!'
    summary: Builds a class names object from a given map.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        export declare function buildClassMap<T extends Object>(styles: T): {
            [key in keyof T]?: string;
        };
      parameters:
        - id: styles
          description: Map of unprocessed styles.
          type: T
      return:
        type: |-
          {
              [key in keyof T]?: string;
          }
        description: Map of property name to class name.
  - name: focusClear()
    uid: '@fluentui/style-utilities!focusClear:function(1)'
    package: '@fluentui/style-utilities!'
    summary: Generates style to clear browser specific focus styles.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function focusClear(): IRawStyle;'
      return:
        type: '<xref uid="@fluentui/merge-styles!IRawStyle:interface" />'
        description: ''
  - name: getEdgeChromiumNoHighContrastAdjustSelector()
    uid: >-
      @fluentui/style-utilities!getEdgeChromiumNoHighContrastAdjustSelector:function(1)
    package: '@fluentui/style-utilities!'
    summary: >-
      The style which turns off high contrast adjustment in (only) Edge Chromium
      browser.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `getHighContrastNoAdjustStyle`
    syntax:
      content: |-
        export declare function getEdgeChromiumNoHighContrastAdjustSelector(): {
            [EdgeChromiumHighContrastSelector]: IRawStyle;
        };
      return:
        type: |-
          {
              [EdgeChromiumHighContrastSelector]: IRawStyle;
          }
        description: ''
  - name: 'getFadedOverflowStyle(theme, color, direction, width, height)'
    uid: '@fluentui/style-utilities!getFadedOverflowStyle:function(1)'
    package: '@fluentui/style-utilities!'
    summary: >-
      - Generates a style used to fade out an overflowing content by defining a
      style for an :after pseudo element. - Apply it to the :after selector for
      all combination of states the parent of content might have (normal, hover,
      selected, focus). - Requires the target to have position set to relative
      and overflow set to hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getFadedOverflowStyle(theme: ITheme, color?:
        keyof ISemanticColors | keyof IPalette, direction?: 'horizontal' |
        'vertical', width?: string | number, height?: string | number):
        IRawStyle;
      parameters:
        - id: theme
          description: The theme object to use.
          type: '<xref uid="@fluentui/theme!ITheme:interface" />'
        - id: color
          description: >-
            The background color to fade out to. Accepts only keys of
            ISemanticColors or IPalette. Defaults to 'bodyBackground'.
          type: keyof ISemanticColors | keyof IPalette
        - id: direction
          description: The direction of the overflow. Defaults to horizontal.
          type: '''horizontal'' | ''vertical'''
        - id: width
          description: >-
            The width of the fading overflow. Vertical direction defaults it to
            100% vs 20px when horizontal.
          type: string | number
        - id: height
          description: >-
            The Height of the fading overflow. Vertical direction defaults it to
            50% vs 100% when horizontal.
          type: string | number
      return:
        type: '<xref uid="@fluentui/merge-styles!IRawStyle:interface" />'
        description: The style object.
  - name: 'getFocusOutlineStyle(theme, inset, width, color)'
    uid: '@fluentui/style-utilities!getFocusOutlineStyle:function(1)'
    package: '@fluentui/style-utilities!'
    summary: Generates a style which can be used to set a border on focus.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getFocusOutlineStyle(theme: ITheme, inset?:
        number, width?: number, color?: string): IRawStyle;
      parameters:
        - id: theme
          description: The theme object to use.
          type: '<xref uid="@fluentui/theme!ITheme:interface" />'
        - id: inset
          description: The number of pixels to inset the border (default 0)
          type: number
        - id: width
          description: The border width in pixels (default 1)
          type: number
        - id: color
          description: >-
            Color of the outline (default `theme.palette.neutralSecondary`<!--
            -->)
          type: string
      return:
        type: '<xref uid="@fluentui/merge-styles!IRawStyle:interface" />'
        description: The style object.
  - name: 'getFocusStyle(theme, options)'
    uid: '@fluentui/style-utilities!getFocusStyle:function(1)'
    package: '@fluentui/style-utilities!'
    summary: >-
      Generates a focus style which can be used to define an :after focus
      border.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getFocusStyle(theme: ITheme, options?:
        IGetFocusStylesOptions): IRawStyle;
      parameters:
        - id: theme
          description: The theme object to use.
          type: '<xref uid="@fluentui/theme!ITheme:interface" />'
        - id: options
          description: Options to customize the focus border.
          type: IGetFocusStylesOptions
      return:
        type: '<xref uid="@fluentui/merge-styles!IRawStyle:interface" />'
        description: The style object.
  - name: >-
      getFocusStyle(theme, inset, position, highContrastStyle, borderColor,
      outlineColor, isFocusedOnly)
    uid: '@fluentui/style-utilities!getFocusStyle:function(2)'
    package: '@fluentui/style-utilities!'
    summary: >-
      Generates a focus style which can be used to define an :after focus
      border.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use the object parameter version instead.
    syntax:
      content: >-
        export declare function getFocusStyle(theme: ITheme, inset?: number,
        position?: 'relative' | 'absolute', highContrastStyle?: IRawStyle |
        undefined, borderColor?: string, outlineColor?: string, isFocusedOnly?:
        boolean): IRawStyle;
      parameters:
        - id: theme
          description: The theme object to use.
          type: '<xref uid="@fluentui/theme!ITheme:interface" />'
        - id: inset
          description: The number of pixels to inset the border.
          type: number
        - id: position
          description: >-
            The positioning applied to the container. Must be 'relative' or
            'absolute' so that the focus border can live around it.
          type: '''relative'' | ''absolute'''
        - id: highContrastStyle
          description: Style for high contrast mode.
          type: IRawStyle | undefined
        - id: borderColor
          description: Color of the border.
          type: string
        - id: outlineColor
          description: Color of the outline.
          type: string
        - id: isFocusedOnly
          description: If the styles should apply on focus or not.
          type: boolean
      return:
        type: '<xref uid="@fluentui/merge-styles!IRawStyle:interface" />'
        description: The style object.
  - name: 'getGlobalClassNames(classNames, theme, disableGlobalClassNames)'
    uid: '@fluentui/style-utilities!getGlobalClassNames:function(1)'
    package: '@fluentui/style-utilities!'
    summary: >-
      Checks for the `disableGlobalClassNames` property on the `theme` to
      determine if it should return `classNames` Note that calls to this
      function are memoized.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getGlobalClassNames<T>(classNames:
        GlobalClassNames<T>, theme: ITheme, disableGlobalClassNames?: boolean):
        GlobalClassNames<T>;
      parameters:
        - id: classNames
          description: >-
            The collection of global class names that apply when the flag is
            false. Make sure to pass in the same instance on each call to
            benefit from memoization.
          type: GlobalClassNames&lt;T&gt;
        - id: theme
          description: The theme to check the flag on
          type: '<xref uid="@fluentui/theme!ITheme:interface" />'
        - id: disableGlobalClassNames
          description: >-
            Optional. Explicitly opt in/out of disabling global classnames.
            Defaults to false.
          type: boolean
      return:
        type: GlobalClassNames&lt;T&gt;
        description: ''
  - name: getHighContrastNoAdjustStyle()
    uid: '@fluentui/style-utilities!getHighContrastNoAdjustStyle:function(1)'
    package: '@fluentui/style-utilities!'
    summary: The style which turns off high contrast adjustment in browsers.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getHighContrastNoAdjustStyle(): IRawStyle;'
      return:
        type: '<xref uid="@fluentui/merge-styles!IRawStyle:interface" />'
        description: ''
  - name: getIcon(name)
    uid: '@fluentui/style-utilities!getIcon:function(1)'
    package: '@fluentui/style-utilities!'
    summary: >-
      Gets an icon definition. If an icon is requested but the subset has yet to
      be registered, it will get registered immediately.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getIcon(name?: string): IIconRecord | undefined;'
      parameters:
        - id: name
          description: Name of icon.
          type: string
      return:
        type: IIconRecord | undefined
        description: ''
  - name: getIconClassName(name)
    uid: '@fluentui/style-utilities!getIconClassName:function(1)'
    package: '@fluentui/style-utilities!'
    summary: >-
      Gets an icon classname. You should be able to add this classname to an I
      tag with no additional classnames, and render the icon.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getIconClassName(name: string): string;'
      parameters:
        - id: name
          description: ''
          type: string
      return:
        type: string
        description: ''
  - name: getPlaceholderStyles(styles)
    uid: '@fluentui/style-utilities!getPlaceholderStyles:function(1)'
    package: '@fluentui/style-utilities!'
    summary: >-
      Generates placeholder style for each of the browsers supported by
      `@fluentui/react`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getPlaceholderStyles(styles: IStyle): IStyle;'
      parameters:
        - id: styles
          description: The style to use.
          type: IStyle
      return:
        type: IStyle
        description: >-
          The placeholder style object for each browser depending on the
          placeholder directive it uses.
  - name: 'getScreenSelector(min, max)'
    uid: '@fluentui/style-utilities!getScreenSelector:function(1)'
    package: '@fluentui/style-utilities!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getScreenSelector(min: number | undefined, max:
        number | undefined): string;
      parameters:
        - id: min
          description: ''
          type: number | undefined
        - id: max
          description: ''
          type: number | undefined
      return:
        type: string
        description: ''
  - name: getTheme(depComments)
    uid: '@fluentui/style-utilities!getTheme:function(1)'
    package: '@fluentui/style-utilities!'
    summary: Gets the theme object
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getTheme(depComments?: boolean): ITheme;'
      parameters:
        - id: depComments
          description: Whether to include deprecated tags as comments for deprecated slots.
          type: boolean
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
        description: ''
  - name: 'loadTheme(theme, depComments)'
    uid: '@fluentui/style-utilities!loadTheme:function(1)'
    package: '@fluentui/style-utilities!'
    summary: 'Applies the theme, while filling in missing slots.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function loadTheme(theme: IPartialTheme, depComments?:
        boolean): ITheme;
      parameters:
        - id: theme
          description: Partial theme object.
          type: '<xref uid="@fluentui/theme!IPartialTheme:interface" />'
        - id: depComments
          description: Whether to include deprecated tags as comments for deprecated slots.
          type: boolean
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
        description: ''
  - name: 'registerIconAlias(iconName, mappedToName)'
    uid: '@fluentui/style-utilities!registerIconAlias:function(1)'
    package: '@fluentui/style-utilities!'
    summary: Remaps one icon name to another.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function registerIconAlias(iconName: string,
        mappedToName: string): void;
      parameters:
        - id: iconName
          description: ''
          type: string
        - id: mappedToName
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: 'registerIcons(iconSubset, options)'
    uid: '@fluentui/style-utilities!registerIcons:function(1)'
    package: '@fluentui/style-utilities!'
    summary: Registers a given subset of icons.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function registerIcons(iconSubset: IIconSubset, options?:
        Partial<IIconOptions>): void;
      parameters:
        - id: iconSubset
          description: the icon subset definition.
          type: IIconSubset
        - id: options
          description: ''
          type: Partial&lt;IIconOptions&gt;
      return:
        type: void
        description: ''
  - name: registerOnThemeChangeCallback(callback)
    uid: '@fluentui/style-utilities!registerOnThemeChangeCallback:function(1)'
    package: '@fluentui/style-utilities!'
    summary: >-
      Registers a callback that gets called whenever the theme changes. This
      should only be used when the component cannot automatically get theme
      changes through its state. This will not register duplicate callbacks.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function registerOnThemeChangeCallback(callback: (theme:
        ITheme) => void): void;
      parameters:
        - id: callback
          description: ''
          type: '(theme: ITheme) =&gt; void'
      return:
        type: void
        description: ''
  - name: removeOnThemeChangeCallback(callback)
    uid: '@fluentui/style-utilities!removeOnThemeChangeCallback:function(1)'
    package: '@fluentui/style-utilities!'
    summary: >-
      See registerOnThemeChangeCallback(). Removes previously registered
      callbacks.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function removeOnThemeChangeCallback(callback: (theme:
        ITheme) => void): void;
      parameters:
        - id: callback
          description: ''
          type: '(theme: ITheme) =&gt; void'
      return:
        type: void
        description: ''
  - name: setIconOptions(options)
    uid: '@fluentui/style-utilities!setIconOptions:function(1)'
    package: '@fluentui/style-utilities!'
    summary: Sets the icon options.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function setIconOptions(options: Partial<IIconOptions>):
        void;
      parameters:
        - id: options
          description: ''
          type: Partial&lt;IIconOptions&gt;
      return:
        type: void
        description: ''
  - name: unregisterIcons(iconNames)
    uid: '@fluentui/style-utilities!unregisterIcons:function(1)'
    package: '@fluentui/style-utilities!'
    summary: Unregisters icons by name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function unregisterIcons(iconNames: string[]): void;'
      parameters:
        - id: iconNames
          description: List of icons to unregister.
          type: 'string[]'
      return:
        type: void
        description: ''
