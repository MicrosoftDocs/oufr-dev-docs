### YamlMime:TSType
name: IContextualMenuProps
uid: 'office-ui-fabric-react!IContextualMenuProps:interface'
package: office-ui-fabric-react!
fullName: IContextualMenuProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: alignTargetEdge
    uid: 'office-ui-fabric-react!IContextualMenuProps#alignTargetEdge:member'
    package: office-ui-fabric-react!
    fullName: alignTargetEdge
    summary: >-
      If true the positioning logic will prefer to flip edges rather than to
      nudge the rectangle to fit within bounds, thus making sure the element
      aligns perfectly with target's alignment edge
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'alignTargetEdge?: boolean;'
      return:
        type: boolean
  - name: ariaLabel
    uid: 'office-ui-fabric-react!IContextualMenuProps#ariaLabel:member'
    package: office-ui-fabric-react!
    fullName: ariaLabel
    summary: >-
      Accessible label for the ContextualMenu's root element (inside the
      callout).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type: string
  - name: beakWidth
    uid: 'office-ui-fabric-react!IContextualMenuProps#beakWidth:member'
    package: office-ui-fabric-react!
    fullName: beakWidth
    summary: The width of the beak.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'beakWidth?: number;'
      return:
        type: number
  - name: bounds
    uid: 'office-ui-fabric-react!IContextualMenuProps#bounds:member'
    package: office-ui-fabric-react!
    fullName: bounds
    summary: >-
      The bounding rectangle (or callback that returns a rectangle) which the
      contextual menu can appear in.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        bounds?: IRectangle | ((target?: Target, targetWindow?: Window) =>
        IRectangle | undefined);
      return:
        type: >-
          IRectangle | ((target?: Target, targetWindow?: Window) =&gt;
          IRectangle | undefined)
  - name: calloutProps
    uid: 'office-ui-fabric-react!IContextualMenuProps#calloutProps:member'
    package: office-ui-fabric-react!
    fullName: calloutProps
    summary: Additional custom props for the Callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calloutProps?: ICalloutProps;'
      return:
        type: ICalloutProps
  - name: className
    uid: 'office-ui-fabric-react!IContextualMenuProps#className:member'
    package: office-ui-fabric-react!
    fullName: className
    summary: Additional CSS class to apply to the ContextualMenu.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: componentRef
    uid: 'office-ui-fabric-react!IContextualMenuProps#componentRef:member'
    package: office-ui-fabric-react!
    fullName: componentRef
    summary: >-
      Optional callback to access the IContextualMenu interface. Use this
      instead of ref for accessing the public methods and properties of the
      component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IContextualMenu>;'
      return:
        type: IRefObject&lt;IContextualMenu&gt;
  - name: contextualMenuItemAs
    uid: 'office-ui-fabric-react!IContextualMenuProps#contextualMenuItemAs:member'
    package: office-ui-fabric-react!
    fullName: contextualMenuItemAs
    summary: Custom component to use for rendering individual menu items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        contextualMenuItemAs?: React.ComponentClass<IContextualMenuItemProps> |
        React.FunctionComponent<IContextualMenuItemProps>;
      return:
        type: >-
          React.ComponentClass&lt;IContextualMenuItemProps&gt; |
          React.FunctionComponent&lt;IContextualMenuItemProps&gt;
  - name: coverTarget
    uid: 'office-ui-fabric-react!IContextualMenuProps#coverTarget:member'
    package: office-ui-fabric-react!
    fullName: coverTarget
    summary: >-
      If true, the menu will be positioned to cover the target. If false, it
      will be positioned next to the target.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type: boolean
  - name: delayUpdateFocusOnHover
    uid: 'office-ui-fabric-react!IContextualMenuProps#delayUpdateFocusOnHover:member'
    package: office-ui-fabric-react!
    fullName: delayUpdateFocusOnHover
    summary: >-
      If true, the contextual menu will not be updated until focus enters the
      menu via other means. This will only result in different behavior when
      `shouldFocusOnMount = false`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delayUpdateFocusOnHover?: boolean;'
      return:
        type: boolean
  - name: directionalHint
    uid: 'office-ui-fabric-react!IContextualMenuProps#directionalHint:member'
    package: office-ui-fabric-react!
    fullName: directionalHint
    summary: How the menu should be positioned
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type: DirectionalHint
  - name: directionalHintFixed
    uid: 'office-ui-fabric-react!IContextualMenuProps#directionalHintFixed:member'
    package: office-ui-fabric-react!
    fullName: directionalHintFixed
    summary: >-
      If true the position will not change sides in an attempt to fit the
      ContextualMenu within bounds. It will still attempt to align it to
      whatever bounds are given.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type: boolean
  - name: directionalHintForRTL
    uid: 'office-ui-fabric-react!IContextualMenuProps#directionalHintForRTL:member'
    package: office-ui-fabric-react!
    fullName: directionalHintForRTL
    summary: >-
      How the menu should be positioned in RTL layouts. If not specified, a
      mirror of `directionalHint` will be used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type: DirectionalHint
  - name: doNotLayer
    uid: 'office-ui-fabric-react!IContextualMenuProps#doNotLayer:member'
    package: office-ui-fabric-react!
    fullName: doNotLayer
    summary: If true do not render on a new layer. If false render on a new layer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'doNotLayer?: boolean;'
      return:
        type: boolean
  - name: focusZoneProps
    uid: 'office-ui-fabric-react!IContextualMenuProps#focusZoneProps:member'
    package: office-ui-fabric-react!
    fullName: focusZoneProps
    summary: >-
      Props to pass down to the FocusZone. NOTE: the default FocusZoneDirection
      will be used unless a direction is specified in the focusZoneProps (even
      if other focusZoneProps are defined)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'focusZoneProps?: IFocusZoneProps;'
      return:
        type: '<xref uid="@fluentui/react-focus!IFocusZoneProps:interface" />'
  - name: gapSpace
    uid: 'office-ui-fabric-react!IContextualMenuProps#gapSpace:member'
    package: office-ui-fabric-react!
    fullName: gapSpace
    summary: The gap between the ContextualMenu and the target
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'gapSpace?: number;'
      return:
        type: number
  - name: getMenuClassNames
    uid: 'office-ui-fabric-react!IContextualMenuProps#getMenuClassNames:member'
    package: office-ui-fabric-react!
    fullName: getMenuClassNames
    summary: Method to provide the classnames to style the contextual menu.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `styles` instead to leverage mergeStyles API.
    syntax:
      content: >-
        getMenuClassNames?: (theme: ITheme, className?: string) =>
        IContextualMenuClassNames;
      return:
        type: '(theme: ITheme, className?: string) =&gt; IContextualMenuClassNames'
  - name: hidden
    uid: 'office-ui-fabric-react!IContextualMenuProps#hidden:member'
    package: office-ui-fabric-react!
    fullName: hidden
    summary: >-
      If true, renders the ContextualMenu in a hidden state. Use this flag,
      rather than rendering a ContextualMenu conditionally based on visibility,
      to improve rendering performance when it becomes visible. Note: When
      ContextualMenu is hidden its content will not be rendered. It will only
      render once the ContextualMenu is visible.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hidden?: boolean;'
      return:
        type: boolean
  - name: id
    uid: 'office-ui-fabric-react!IContextualMenuProps#id:member'
    package: office-ui-fabric-react!
    fullName: id
    summary: >-
      ID for the ContextualMenu's root element (inside the callout). Should be
      used for `aria-owns` and other such uses, rather than direct reference for
      programmatic purposes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id?: string;'
      return:
        type: string
  - name: isBeakVisible
    uid: 'office-ui-fabric-react!IContextualMenuProps#isBeakVisible:member'
    package: office-ui-fabric-react!
    fullName: isBeakVisible
    summary: If true then the beak is visible. If false it will not be shown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isBeakVisible?: boolean;'
      return:
        type: boolean
  - name: isSubMenu
    uid: 'office-ui-fabric-react!IContextualMenuProps#isSubMenu:member'
    package: office-ui-fabric-react!
    fullName: isSubMenu
    summary: Whether this menu is a submenu of another menu.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isSubMenu?: boolean;'
      return:
        type: boolean
  - name: items
    uid: 'office-ui-fabric-react!IContextualMenuProps#items:member'
    package: office-ui-fabric-react!
    fullName: items
    summary: Menu items to display.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'items: IContextualMenuItem[];'
      return:
        type: 'IContextualMenuItem[]'
  - name: labelElementId
    uid: 'office-ui-fabric-react!IContextualMenuProps#labelElementId:member'
    package: office-ui-fabric-react!
    fullName: labelElementId
    summary: Used as `aria-labelledby` for the menu element inside the callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'labelElementId?: string;'
      return:
        type: string
  - name: onDismiss
    uid: 'office-ui-fabric-react!IContextualMenuProps#onDismiss:member'
    package: office-ui-fabric-react!
    fullName: onDismiss
    summary: >-
      Callback when the ContextualMenu tries to close. If `dismissAll` is true
      then all submenus will be dismissed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDismiss?: (ev?: React.MouseEvent | React.KeyboardEvent, dismissAll?:
        boolean) => void;
      return:
        type: >-
          (ev?: React.MouseEvent | React.KeyboardEvent, dismissAll?: boolean)
          =&gt; void
  - name: onItemClick
    uid: 'office-ui-fabric-react!IContextualMenuProps#onItemClick:member'
    package: office-ui-fabric-react!
    fullName: onItemClick
    summary: >-
      Click handler which is invoked if `onClick` is not passed for individual
      contextual menu item. Returning true will dismiss the menu even if
      `ev.preventDefault()` was called.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onItemClick?: (ev?: React.MouseEvent<HTMLElement> |
        React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean
        | void;
      return:
        type: >-
          (ev?: React.MouseEvent&lt;HTMLElement&gt; |
          React.KeyboardEvent&lt;HTMLElement&gt;, item?: IContextualMenuItem)
          =&gt; boolean | void
  - name: onMenuDismissed
    uid: 'office-ui-fabric-react!IContextualMenuProps#onMenuDismissed:member'
    package: office-ui-fabric-react!
    fullName: onMenuDismissed
    summary: Callback for when the menu is being closed (removing from the DOM).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onMenuDismissed?: (contextualMenu?: IContextualMenuProps) => void;'
      return:
        type: '(contextualMenu?: IContextualMenuProps) =&gt; void'
  - name: onMenuOpened
    uid: 'office-ui-fabric-react!IContextualMenuProps#onMenuOpened:member'
    package: office-ui-fabric-react!
    fullName: onMenuOpened
    summary: Callback for when the menu has been opened.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onMenuOpened?: (contextualMenu?: IContextualMenuProps) => void;'
      return:
        type: '(contextualMenu?: IContextualMenuProps) =&gt; void'
  - name: onRenderMenuList
    uid: 'office-ui-fabric-react!IContextualMenuProps#onRenderMenuList:member'
    package: office-ui-fabric-react!
    fullName: onRenderMenuList
    summary: Method to override the render of the list of menu items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderMenuList?: IRenderFunction<IContextualMenuListProps>;'
      return:
        type: IRenderFunction&lt;IContextualMenuListProps&gt;
  - name: onRenderSubMenu
    uid: 'office-ui-fabric-react!IContextualMenuProps#onRenderSubMenu:member'
    package: office-ui-fabric-react!
    fullName: onRenderSubMenu
    summary: Custom render function for a submenu.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderSubMenu?: IRenderFunction<IContextualMenuProps>;'
      return:
        type: IRenderFunction&lt;IContextualMenuProps&gt;
  - name: onRestoreFocus
    uid: 'office-ui-fabric-react!IContextualMenuProps#onRestoreFocus:member'
    package: office-ui-fabric-react!
    fullName: onRestoreFocus
    summary: >-
      Called when the component is unmounting, and focus needs to be restored.
      Argument passed down contains two variables, the element that the
      underlying popup believes focus should go to and whether or not the popup
      currently contains focus. If this prop is provided, focus will not be
      restored automatically, you'll need to call originalElement.focus()
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        onRestoreFocus?: (options: {
                originalElement?: HTMLElement | Window;
                containsFocus: boolean;
                documentContainsFocus: boolean;
            }) => void;
      return:
        type: |-
          (options: {
                  originalElement?: HTMLElement | Window;
                  containsFocus: boolean;
                  documentContainsFocus: boolean;
              }) =&gt; void
  - name: shouldFocusOnContainer
    uid: 'office-ui-fabric-react!IContextualMenuProps#shouldFocusOnContainer:member'
    package: office-ui-fabric-react!
    fullName: shouldFocusOnContainer
    summary: >-
      Whether to focus on the contextual menu container (as opposed to the first
      menu item).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldFocusOnContainer?: boolean;'
      return:
        type: boolean
  - name: shouldFocusOnMount
    uid: 'office-ui-fabric-react!IContextualMenuProps#shouldFocusOnMount:member'
    package: office-ui-fabric-react!
    fullName: shouldFocusOnMount
    summary: Whether to focus on the menu when mounted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldFocusOnMount?: boolean;'
      return:
        type: boolean
  - name: shouldUpdateWhenHidden
    uid: 'office-ui-fabric-react!IContextualMenuProps#shouldUpdateWhenHidden:member'
    package: office-ui-fabric-react!
    fullName: shouldUpdateWhenHidden
    summary: >-
      If true, the menu will be updated even when `hidden=true`<!-- -->. Note
      that this will consume resources to update even when nothing is being
      shown to the user. This might be helpful if your updates are small and you
      want the menu to display quickly when `hidden` is set to false.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldUpdateWhenHidden?: boolean;'
      return:
        type: boolean
  - name: styles
    uid: 'office-ui-fabric-react!IContextualMenuProps#styles:member'
    package: office-ui-fabric-react!
    fullName: styles
    summary: >-
      Call to provide customized styling that will layer on top of the variant
      rules.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        styles?: IStyleFunctionOrObject<IContextualMenuStyleProps,
        IContextualMenuStyles>;
      return:
        type: >-
          IStyleFunctionOrObject&lt;IContextualMenuStyleProps,
          IContextualMenuStyles&gt;
  - name: subMenuHoverDelay
    uid: 'office-ui-fabric-react!IContextualMenuProps#subMenuHoverDelay:member'
    package: office-ui-fabric-react!
    fullName: subMenuHoverDelay
    summary: >-
      Delay (in milliseconds) to wait before expanding / dismissing a submenu on
      mouseEnter or mouseLeave
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'subMenuHoverDelay?: number;'
      return:
        type: number
  - name: target
    uid: 'office-ui-fabric-react!IContextualMenuProps#target:member'
    package: office-ui-fabric-react!
    fullName: target
    summary: >-
      The target that the ContextualMenu should try to position itself based on.
      It can be either an element, a query selector string resolving to a valid
      element, or a MouseEvent. If a MouseEvent is given, the origin point of
      the event will be used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'target?: Target;'
      return:
        type: Target
  - name: theme
    uid: 'office-ui-fabric-react!IContextualMenuProps#theme:member'
    package: office-ui-fabric-react!
    fullName: theme
    summary: Theme provided by higher-order component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
  - name: title
    uid: 'office-ui-fabric-react!IContextualMenuProps#title:member'
    package: office-ui-fabric-react!
    fullName: title
    summary: 'Title to be displayed at the top of the menu, above the items.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'title?: string;'
      return:
        type: string
  - name: useTargetAsMinWidth
    uid: 'office-ui-fabric-react!IContextualMenuProps#useTargetAsMinWidth:member'
    package: office-ui-fabric-react!
    fullName: useTargetAsMinWidth
    summary: >-
      If true the context menu will have a minimum width equal to the width of
      the target element
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useTargetAsMinWidth?: boolean;'
      return:
        type: boolean
  - name: useTargetWidth
    uid: 'office-ui-fabric-react!IContextualMenuProps#useTargetWidth:member'
    package: office-ui-fabric-react!
    fullName: useTargetWidth
    summary: >-
      If true the context menu will render as the same width as the target
      element
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useTargetWidth?: boolean;'
      return:
        type: boolean
extends: IBaseProps&lt;IContextualMenu&gt;
