### YamlMime:TSType
name: ICalloutProps
uid: 'office-ui-fabric-react!ICalloutProps:interface'
package: office-ui-fabric-react!
fullName: ICalloutProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: alignTargetEdge
    uid: 'office-ui-fabric-react!ICalloutProps#alignTargetEdge:member'
    package: office-ui-fabric-react!
    fullName: alignTargetEdge
    summary: >-
      If true the positioning logic will prefer to flip edges rather than to
      nudge the rectangle to fit within bounds, thus making sure the element
      aligns perfectly with target's alignment edge
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'alignTargetEdge?: boolean;'
      return:
        type: boolean
  - name: ariaDescribedBy
    uid: 'office-ui-fabric-react!ICalloutProps#ariaDescribedBy:member'
    package: office-ui-fabric-react!
    fullName: ariaDescribedBy
    summary: >-
      Defines the element id referencing the element containing the description
      for the callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type: string
  - name: ariaLabel
    uid: 'office-ui-fabric-react!ICalloutProps#ariaLabel:member'
    package: office-ui-fabric-react!
    fullName: ariaLabel
    summary: Accessible label text for callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type: string
  - name: ariaLabelledBy
    uid: 'office-ui-fabric-react!ICalloutProps#ariaLabelledBy:member'
    package: office-ui-fabric-react!
    fullName: ariaLabelledBy
    summary: >-
      Defines the element id referencing the element containing label text for
      callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabelledBy?: string;'
      return:
        type: string
  - name: backgroundColor
    uid: 'office-ui-fabric-react!ICalloutProps#backgroundColor:member'
    package: office-ui-fabric-react!
    fullName: backgroundColor
    summary: The background color of the Callout in hex format ie. \#ffffff.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'backgroundColor?: string;'
      return:
        type: string
  - name: beakWidth
    uid: 'office-ui-fabric-react!ICalloutProps#beakWidth:member'
    package: office-ui-fabric-react!
    fullName: beakWidth
    summary: The width of the beak.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'beakWidth?: number;'
      return:
        type: number
  - name: bounds
    uid: 'office-ui-fabric-react!ICalloutProps#bounds:member'
    package: office-ui-fabric-react!
    fullName: bounds
    summary: >-
      The bounding rectangle (or callback that returns a rectangle) for which
      the contextual menu can appear in.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        bounds?: IRectangle | ((target?: Target, targetWindow?: Window) =>
        IRectangle | undefined);
      return:
        type: >-
          IRectangle | ((target?: Target, targetWindow?: Window) =&gt;
          IRectangle | undefined)
  - name: calloutMaxHeight
    uid: 'office-ui-fabric-react!ICalloutProps#calloutMaxHeight:member'
    package: office-ui-fabric-react!
    fullName: calloutMaxHeight
    summary: >-
      Set max height of callout When not set the callout will expand with
      contents up to the bottom of the screen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calloutMaxHeight?: number;'
      return:
        type: number
  - name: calloutMaxWidth
    uid: 'office-ui-fabric-react!ICalloutProps#calloutMaxWidth:member'
    package: office-ui-fabric-react!
    fullName: calloutMaxWidth
    summary: >-
      Custom width for callout including borders. If value is 0, no width is
      applied.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calloutMaxWidth?: number;'
      return:
        type: number
  - name: calloutWidth
    uid: 'office-ui-fabric-react!ICalloutProps#calloutWidth:member'
    package: office-ui-fabric-react!
    fullName: calloutWidth
    summary: >-
      Custom width for callout including borders. If value is 0, no width is
      applied.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calloutWidth?: number;'
      return:
        type: number
  - name: className
    uid: 'office-ui-fabric-react!ICalloutProps#className:member'
    package: office-ui-fabric-react!
    fullName: className
    summary: CSS class to apply to the callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: coverTarget
    uid: 'office-ui-fabric-react!ICalloutProps#coverTarget:member'
    package: office-ui-fabric-react!
    fullName: coverTarget
    summary: >-
      If true the position returned will have the menu element cover the target.
      If false then it will position next to the target;
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type: boolean
  - name: directionalHint
    uid: 'office-ui-fabric-react!ICalloutProps#directionalHint:member'
    package: office-ui-fabric-react!
    fullName: directionalHint
    summary: How the element should be positioned
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type: DirectionalHint
  - name: directionalHintFixed
    uid: 'office-ui-fabric-react!ICalloutProps#directionalHintFixed:member'
    package: office-ui-fabric-react!
    fullName: directionalHintFixed
    summary: >-
      If true the position will not change sides in an attempt to fit the
      callout within bounds. It will still attempt to align it to whatever
      bounds are given.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type: boolean
  - name: directionalHintForRTL
    uid: 'office-ui-fabric-react!ICalloutProps#directionalHintForRTL:member'
    package: office-ui-fabric-react!
    fullName: directionalHintForRTL
    summary: >-
      How the element should be positioned in RTL layouts. If not specified, a
      mirror of the `directionalHint` alignment edge will be used instead. This
      means that `DirectionalHint.BottomLeft` will change to
      `DirectionalHint.BottomRight` but `DirectionalHint.LeftAuto` will not
      change.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type: DirectionalHint
  - name: dismissOnTargetClick
    uid: 'office-ui-fabric-react!ICalloutProps#dismissOnTargetClick:member'
    package: office-ui-fabric-react!
    fullName: dismissOnTargetClick
    summary: If true then the callout will dismiss when the target element is clicked
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dismissOnTargetClick?: boolean;'
      return:
        type: boolean
  - name: doNotLayer
    uid: 'office-ui-fabric-react!ICalloutProps#doNotLayer:member'
    package: office-ui-fabric-react!
    fullName: doNotLayer
    summary: If true do not render on a new layer. If false render on a new layer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'doNotLayer?: boolean;'
      return:
        type: boolean
  - name: finalHeight
    uid: 'office-ui-fabric-react!ICalloutProps#finalHeight:member'
    package: office-ui-fabric-react!
    fullName: finalHeight
    summary: >-
      Specify the final height of the content. To be used when expanding the
      content dynamically so that callout can adjust its position.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'finalHeight?: number;'
      return:
        type: number
  - name: gapSpace
    uid: 'office-ui-fabric-react!ICalloutProps#gapSpace:member'
    package: office-ui-fabric-react!
    fullName: gapSpace
    summary: The gap between the Callout and the target
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'gapSpace?: number;'
      return:
        type: number
  - name: hidden
    uid: 'office-ui-fabric-react!ICalloutProps#hidden:member'
    package: office-ui-fabric-react!
    fullName: hidden
    summary: >-
      If specified, renders the Callout in a hidden state. Use this flag, rather
      than rendering a callout conditionally based on visibility, to improve
      rendering performance when it becomes visible. Note: When callout is
      hidden its content will not be rendered. It will only render once the
      callout is visible.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hidden?: boolean;'
      return:
        type: boolean
  - name: hideOverflow
    uid: 'office-ui-fabric-react!ICalloutProps#hideOverflow:member'
    package: office-ui-fabric-react!
    fullName: hideOverflow
    summary: >-
      Manually set OverflowYHidden style prop to true on calloutMain element A
      variety of callout load animations will need this to hide the scollbar
      that can appear
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hideOverflow?: boolean;'
      return:
        type: boolean
  - name: isBeakVisible
    uid: 'office-ui-fabric-react!ICalloutProps#isBeakVisible:member'
    package: office-ui-fabric-react!
    fullName: isBeakVisible
    summary: If true then the beak is visible. If false it will not be shown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isBeakVisible?: boolean;'
      return:
        type: boolean
  - name: layerProps
    uid: 'office-ui-fabric-react!ICalloutProps#layerProps:member'
    package: office-ui-fabric-react!
    fullName: layerProps
    summary: Optional props to pass to the Layer component hosting the panel.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'layerProps?: ILayerProps;'
      return:
        type: ILayerProps
  - name: minPagePadding
    uid: 'office-ui-fabric-react!ICalloutProps#minPagePadding:member'
    package: office-ui-fabric-react!
    fullName: minPagePadding
    summary: The minimum distance the callout will be away from the edge of the screen.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'minPagePadding?: number;'
      return:
        type: number
  - name: onDismiss
    uid: 'office-ui-fabric-react!ICalloutProps#onDismiss:member'
    package: office-ui-fabric-react!
    fullName: onDismiss
    summary: Callback when the Callout tries to close.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onDismiss?: (ev?: any) => void;'
      return:
        type: '(ev?: any) =&gt; void'
  - name: onLayerMounted
    uid: 'office-ui-fabric-react!ICalloutProps#onLayerMounted:member'
    package: office-ui-fabric-react!
    fullName: onLayerMounted
    summary: Optional callback when the layer content has mounted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onLayerMounted?: () => void;'
      return:
        type: () =&gt; void
  - name: onPositioned
    uid: 'office-ui-fabric-react!ICalloutProps#onPositioned:member'
    package: office-ui-fabric-react!
    fullName: onPositioned
    summary: >-
      Optional callback that is called once the callout has been correctly
      positioned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onPositioned?: (positions?: ICalloutPositionedInfo) => void;'
      return:
        type: '(positions?: ICalloutPositionedInfo) =&gt; void'
  - name: onRestoreFocus
    uid: 'office-ui-fabric-react!ICalloutProps#onRestoreFocus:member'
    package: office-ui-fabric-react!
    fullName: onRestoreFocus
    summary: >-
      Called when the component is unmounting, and focus needs to be restored.
      Argument passed down contains two variables, the element that the
      underlying popup believes focus should go to \* and whether or not the
      popup currently contains focus. If this is provided, focus will not be
      restored automatically, you'll need to call originalElement.focus()
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        onRestoreFocus?: (options: {
                originalElement?: HTMLElement | Window;
                containsFocus: boolean;
                documentContainsFocus: boolean;
            }) => void;
      return:
        type: |-
          (options: {
                  originalElement?: HTMLElement | Window;
                  containsFocus: boolean;
                  documentContainsFocus: boolean;
              }) =&gt; void
  - name: onScroll
    uid: 'office-ui-fabric-react!ICalloutProps#onScroll:member'
    package: office-ui-fabric-react!
    fullName: onScroll
    summary: Callback when the Callout body is scrolled.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onScroll?: () => void;'
      return:
        type: () =&gt; void
  - name: preventDismissOnEvent
    uid: 'office-ui-fabric-react!ICalloutProps#preventDismissOnEvent:member'
    package: office-ui-fabric-react!
    fullName: preventDismissOnEvent
    summary: >-
      If defined, then takes priority over preventDismissOnLostFocus,
      preventDismissOnResize, and preventDismissOnScroll. If it returns true,
      then callout will not dismiss for this event. If not defined or returns
      false, callout can dismiss for this event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        preventDismissOnEvent?: (ev: Event | React.FocusEvent |
        React.KeyboardEvent | React.MouseEvent) => boolean;
      return:
        type: >-
          (ev: Event | React.FocusEvent | React.KeyboardEvent |
          React.MouseEvent) =&gt; boolean
  - name: preventDismissOnLostFocus
    uid: 'office-ui-fabric-react!ICalloutProps#preventDismissOnLostFocus:member'
    package: office-ui-fabric-react!
    fullName: preventDismissOnLostFocus
    summary: If true then the callout will not dismiss when it loses focus
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use preventDismissOnEvent callback instead
    syntax:
      content: 'preventDismissOnLostFocus?: boolean;'
      return:
        type: boolean
  - name: preventDismissOnResize
    uid: 'office-ui-fabric-react!ICalloutProps#preventDismissOnResize:member'
    package: office-ui-fabric-react!
    fullName: preventDismissOnResize
    summary: If true then the callout will not dismiss on resize
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use preventDismissOnEvent callback instead
    syntax:
      content: 'preventDismissOnResize?: boolean;'
      return:
        type: boolean
  - name: preventDismissOnScroll
    uid: 'office-ui-fabric-react!ICalloutProps#preventDismissOnScroll:member'
    package: office-ui-fabric-react!
    fullName: preventDismissOnScroll
    summary: If true then the callout will not dismiss on scroll
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use preventDismissOnEvent callback instead
    syntax:
      content: 'preventDismissOnScroll?: boolean;'
      return:
        type: boolean
  - name: role
    uid: 'office-ui-fabric-react!ICalloutProps#role:member'
    package: office-ui-fabric-react!
    fullName: role
    summary: 'Aria role assigned to the callout (Eg. dialog, alertdialog).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'role?: string;'
      return:
        type: string
  - name: setInitialFocus
    uid: 'office-ui-fabric-react!ICalloutProps#setInitialFocus:member'
    package: office-ui-fabric-react!
    fullName: setInitialFocus
    summary: >-
      If true then the callout will attempt to focus the first focusable element
      that it contains. If it doesn't find an element, no focus will be set and
      the method will return false. This means that it's the contents
      responsibility to either set focus or have focusable items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setInitialFocus?: boolean;'
      return:
        type: boolean
  - name: shouldDismissOnWindowFocus
    uid: 'office-ui-fabric-react!ICalloutProps#shouldDismissOnWindowFocus:member'
    package: office-ui-fabric-react!
    fullName: shouldDismissOnWindowFocus
    summary: If true then the callout will dismiss when the window gets focus
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldDismissOnWindowFocus?: boolean;'
      return:
        type: boolean
  - name: shouldRestoreFocus
    uid: 'office-ui-fabric-react!ICalloutProps#shouldRestoreFocus:member'
    package: office-ui-fabric-react!
    fullName: shouldRestoreFocus
    summary: >-
      If true, when this component is unmounted, focus will be restored to the
      element that had focus when the component first mounted.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use onRestoreFocus callback instead
    syntax:
      content: 'shouldRestoreFocus?: boolean;'
      return:
        type: boolean
  - name: shouldUpdateWhenHidden
    uid: 'office-ui-fabric-react!ICalloutProps#shouldUpdateWhenHidden:member'
    package: office-ui-fabric-react!
    fullName: shouldUpdateWhenHidden
    summary: >-
      If true, the component will be updated even when hidden=true. Note that
      this would consume resources to update even though nothing is being shown
      to the user. This might be helpful though if your updates are small and
      you want the callout to be revealed fast to the user when hidden is set to
      false.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldUpdateWhenHidden?: boolean;'
      return:
        type: boolean
  - name: style
    uid: 'office-ui-fabric-react!ICalloutProps#style:member'
    package: office-ui-fabric-react!
    fullName: style
    summary: >-
      CSS style to apply to the callout.


      If you set `overflowY` in this object, it provides a performance
      optimization by preventing Popup (underlying component of Callout) from
      calculating whether it needs a scroll bar.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style?: React.CSSProperties;'
      return:
        type: React.CSSProperties
  - name: styles
    uid: 'office-ui-fabric-react!ICalloutProps#styles:member'
    package: office-ui-fabric-react!
    fullName: styles
    summary: Optional styles for the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        styles?: IStyleFunctionOrObject<ICalloutContentStyleProps,
        ICalloutContentStyles>;
      return:
        type: >-
          IStyleFunctionOrObject&lt;ICalloutContentStyleProps,
          ICalloutContentStyles&gt;
  - name: target
    uid: 'office-ui-fabric-react!ICalloutProps#target:member'
    package: office-ui-fabric-react!
    fullName: target
    summary: >-
      The target that the Callout should try to position itself based on. It can
      be either an Element a querySelector string of a valid Element or a
      MouseEvent. If MouseEvent is given then the origin point of the event will
      be used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'target?: Target;'
      return:
        type: Target
  - name: theme
    uid: 'office-ui-fabric-react!ICalloutProps#theme:member'
    package: office-ui-fabric-react!
    fullName: theme
    summary: Optional theme for component
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
extends: 'React.HTMLAttributes&lt;HTMLDivElement&gt; '
