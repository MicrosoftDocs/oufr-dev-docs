### YamlMime:TSType
name: IContextualMenuItem
uid: '@fluentui/react-internal!IContextualMenuItem:interface'
package: '@fluentui/react-internal!'
fullName: IContextualMenuItem
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: ariaLabel
    uid: '@fluentui/react-internal!IContextualMenuItem#ariaLabel:member'
    package: '@fluentui/react-internal!'
    fullName: ariaLabel
    summary: >-
      Custom accessible label for the element. If no override is specified, the
      `aria-label` attribute will contain the item name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type: string
  - name: canCheck
    uid: '@fluentui/react-internal!IContextualMenuItem#canCheck:member'
    package: '@fluentui/react-internal!'
    fullName: canCheck
    summary: Whether or not this menu item can be checked
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'canCheck?: boolean;'
      return:
        type: boolean
  - name: checked
    uid: '@fluentui/react-internal!IContextualMenuItem#checked:member'
    package: '@fluentui/react-internal!'
    fullName: checked
    summary: Whether or not this menu item is currently checked.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'checked?: boolean;'
      return:
        type: boolean
  - name: className
    uid: '@fluentui/react-internal!IContextualMenuItem#className:member'
    package: '@fluentui/react-internal!'
    fullName: className
    summary: Additional CSS class to apply to the menu item.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: componentRef
    uid: '@fluentui/react-internal!IContextualMenuItem#componentRef:member'
    package: '@fluentui/react-internal!'
    fullName: componentRef
    summary: >-
      Optional callback to access the IContextualMenuRenderItem interface. This
      will get passed down to ContextualMenuItem.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IContextualMenuRenderItem>;'
      return:
        type: IRefObject&lt;IContextualMenuRenderItem&gt;
  - name: customOnRenderListLength
    uid: >-
      @fluentui/react-internal!IContextualMenuItem#customOnRenderListLength:member
    package: '@fluentui/react-internal!'
    fullName: customOnRenderListLength
    summary: >-
      When rendering a custom menu component that is passed in, the component
      might also be a list of elements. We want to keep track of the correct
      index our menu is using based off of the length of the custom list. It is
      up to the user to increment the count for their list.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'customOnRenderListLength?: number;'
      return:
        type: number
  - name: data
    uid: '@fluentui/react-internal!IContextualMenuItem#data:member'
    package: '@fluentui/react-internal!'
    fullName: data
    summary: Any custom data the developer wishes to associate with the menu item.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'data?: any;'
      return:
        type: any
  - name: disabled
    uid: '@fluentui/react-internal!IContextualMenuItem#disabled:member'
    package: '@fluentui/react-internal!'
    fullName: disabled
    summary: Whether the menu item is disabled
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'disabled?: boolean;'
      return:
        type: boolean
  - name: getItemClassNames
    uid: '@fluentui/react-internal!IContextualMenuItem#getItemClassNames:member'
    package: '@fluentui/react-internal!'
    fullName: getItemClassNames
    summary: >-
      Method to provide the classnames to style the individual items inside a
      menu.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: >-
      Use `styles` prop of `IContextualMenuItemProps` to leverage mergeStyles
      API.
    syntax:
      content: >-
        getItemClassNames?: (theme: ITheme, disabled: boolean, expanded:
        boolean, checked: boolean, isAnchorLink: boolean, knownIcon: boolean,
        itemClassName?: string, dividerClassName?: string, iconClassName?:
        string, subMenuClassName?: string, primaryDisabled?: boolean) =>
        IMenuItemClassNames;
      return:
        type: >-
          (theme: ITheme, disabled: boolean, expanded: boolean, checked:
          boolean, isAnchorLink: boolean, knownIcon: boolean, itemClassName?:
          string, dividerClassName?: string, iconClassName?: string,
          subMenuClassName?: string, primaryDisabled?: boolean) =&gt;
          IMenuItemClassNames
  - name: getSplitButtonVerticalDividerClassNames
    uid: >-
      @fluentui/react-internal!IContextualMenuItem#getSplitButtonVerticalDividerClassNames:member
    package: '@fluentui/react-internal!'
    fullName: getSplitButtonVerticalDividerClassNames
    summary: >-
      Method to provide the classnames to style the Vertical Divider of a split
      button inside a menu. Default value is the
      `getSplitButtonVerticalDividerClassNames` func defined in
      `ContextualMenu.classnames.ts`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getSplitButtonVerticalDividerClassNames?: (theme: ITheme) =>
        IVerticalDividerClassNames;
      return:
        type: '(theme: ITheme) =&gt; IVerticalDividerClassNames'
  - name: href
    uid: '@fluentui/react-internal!IContextualMenuItem#href:member'
    package: '@fluentui/react-internal!'
    fullName: href
    summary: Navigate to this URL when the menu item is clicked.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'href?: string;'
      return:
        type: string
  - name: iconProps
    uid: '@fluentui/react-internal!IContextualMenuItem#iconProps:member'
    package: '@fluentui/react-internal!'
    fullName: iconProps
    summary: Props for an icon to display next to the item.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'iconProps?: IIconProps;'
      return:
        type: IIconProps
  - name: inactive
    uid: '@fluentui/react-internal!IContextualMenuItem#inactive:member'
    package: '@fluentui/react-internal!'
    fullName: inactive
    summary: >-
      This prop is no longer used. All contextual menu items are now focusable
      when disabled.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: in 6.38.2 will be removed in 7.0.0
    syntax:
      content: 'inactive?: boolean;'
      return:
        type: boolean
  - name: itemProps
    uid: '@fluentui/react-internal!IContextualMenuItem#itemProps:member'
    package: '@fluentui/react-internal!'
    fullName: itemProps
    summary: >-
      Optional IContextualMenuItemProps overrides to customize behaviors such as
      item styling via `styles`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemProps?: Partial<IContextualMenuItemProps>;'
      return:
        type: Partial&lt;IContextualMenuItemProps&gt;
  - name: itemType
    uid: '@fluentui/react-internal!IContextualMenuItem#itemType:member'
    package: '@fluentui/react-internal!'
    fullName: itemType
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemType?: ContextualMenuItemType;'
      return:
        type: ContextualMenuItemType
  - name: key
    uid: '@fluentui/react-internal!IContextualMenuItem#key:member'
    package: '@fluentui/react-internal!'
    fullName: key
    summary: Unique id to identify the item
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'key: string;'
      return:
        type: string
  - name: keytipProps
    uid: '@fluentui/react-internal!IContextualMenuItem#keytipProps:member'
    package: '@fluentui/react-internal!'
    fullName: keytipProps
    summary: Keytip for this contextual menu item
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'keytipProps?: IKeytipProps;'
      return:
        type: IKeytipProps
  - name: name
    uid: '@fluentui/react-internal!IContextualMenuItem#name:member'
    package: '@fluentui/react-internal!'
    fullName: name
    summary: Text of the menu item.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `text` instead.
    syntax:
      content: 'name?: string;'
      return:
        type: string
  - name: onClick
    uid: '@fluentui/react-internal!IContextualMenuItem#onClick:member'
    package: '@fluentui/react-internal!'
    fullName: onClick
    summary: >-
      Callback for when the menu item is invoked. If `ev.preventDefault()` is
      called in `onClick`<!-- -->, the click will not close the menu.


      Only for ContextualMenu items, returning true will dismiss the menu even
      if `ev.preventDefault()` was called (does not apply for button or
      CommandBar sub-menu items).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onClick?: (ev?: React.MouseEvent<HTMLElement> |
        React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean
        | void;
      return:
        type: >-
          (ev?: React.MouseEvent&lt;HTMLElement&gt; |
          React.KeyboardEvent&lt;HTMLElement&gt;, item?: IContextualMenuItem)
          =&gt; boolean | void
  - name: onMouseDown
    uid: '@fluentui/react-internal!IContextualMenuItem#onMouseDown:member'
    package: '@fluentui/react-internal!'
    fullName: onMouseDown
    summary: >-
      A function to be executed on mouse down. This is executed before an
      `onClick` event and can be used to interrupt native on click events as
      well. The click event should still handle the commands. This should only
      be used in special cases when react and non-react are mixed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseDown?: (item: IContextualMenuItem, event:
        React.MouseEvent<HTMLElement>) => void;
      return:
        type: >-
          (item: IContextualMenuItem, event:
          React.MouseEvent&lt;HTMLElement&gt;) =&gt; void
  - name: onRender
    uid: '@fluentui/react-internal!IContextualMenuItem#onRender:member'
    package: '@fluentui/react-internal!'
    fullName: onRender
    summary: >-
      Method to custom render this menu item. For keyboard accessibility, the
      top-level rendered item should be a focusable element (like an anchor or a
      button) or have the `data-is-focusable` property set to true.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onRender?: (item: any, dismissMenu: (ev?: any, dismissAll?: boolean) =>
        void) => React.ReactNode;
      return:
        type: >-
          (item: any, dismissMenu: (ev?: any, dismissAll?: boolean) =&gt; void)
          =&gt; React.ReactNode
  - name: onRenderContent
    uid: '@fluentui/react-internal!IContextualMenuItem#onRenderContent:member'
    package: '@fluentui/react-internal!'
    fullName: onRenderContent
    summary: Method to customize sub-components rendering of this menu item.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onRenderContent?: (props: IContextualMenuItemProps, defaultRenders:
        IContextualMenuItemRenderFunctions) => React.ReactNode;
      return:
        type: >-
          (props: IContextualMenuItemProps, defaultRenders:
          IContextualMenuItemRenderFunctions) =&gt; React.ReactNode
  - name: onRenderIcon
    uid: '@fluentui/react-internal!IContextualMenuItem#onRenderIcon:member'
    package: '@fluentui/react-internal!'
    fullName: onRenderIcon
    summary: Custom render function for the menu item icon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderIcon?: IRenderFunction<IContextualMenuItemProps>;'
      return:
        type: IRenderFunction&lt;IContextualMenuItemProps&gt;
  - name: primaryDisabled
    uid: '@fluentui/react-internal!IContextualMenuItem#primaryDisabled:member'
    package: '@fluentui/react-internal!'
    fullName: primaryDisabled
    summary: >-
      If the menu item is a split button, this prop disables purely the primary
      action of the button.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'primaryDisabled?: boolean;'
      return:
        type: boolean
  - name: rel
    uid: '@fluentui/react-internal!IContextualMenuItem#rel:member'
    package: '@fluentui/react-internal!'
    fullName: rel
    summary: >-
      Link relation setting when using `href`<!-- -->. If `target` is
      `_blank`<!-- -->, `rel` is defaulted to a value to prevent clickjacking.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rel?: string;'
      return:
        type: string
  - name: role
    uid: '@fluentui/react-internal!IContextualMenuItem#role:member'
    package: '@fluentui/react-internal!'
    fullName: role
    summary: >-
      Optional override for the menu button's role. Defaults to `menuitem` or
      `menuitemcheckbox`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'role?: string;'
      return:
        type: string
  - name: secondaryText
    uid: '@fluentui/react-internal!IContextualMenuItem#secondaryText:member'
    package: '@fluentui/react-internal!'
    fullName: secondaryText
    summary: Secondary description for the menu item to display
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'secondaryText?: string;'
      return:
        type: string
  - name: sectionProps
    uid: '@fluentui/react-internal!IContextualMenuItem#sectionProps:member'
    package: '@fluentui/react-internal!'
    fullName: sectionProps
    summary: >-
      Properties to apply to render this item as a section. This prop is
      mutually exclusive with `subMenuProps`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sectionProps?: IContextualMenuSection;'
      return:
        type: IContextualMenuSection
  - name: shortCut
    uid: '@fluentui/react-internal!IContextualMenuItem#shortCut:member'
    package: '@fluentui/react-internal!'
    fullName: shortCut
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Not used
    syntax:
      content: 'shortCut?: string;'
      return:
        type: string
  - name: split
    uid: '@fluentui/react-internal!IContextualMenuItem#split:member'
    package: '@fluentui/react-internal!'
    fullName: split
    summary: Whether or not this menu item is a splitButton.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'split?: boolean;'
      return:
        type: boolean
  - name: style
    uid: '@fluentui/react-internal!IContextualMenuItem#style:member'
    package: '@fluentui/react-internal!'
    fullName: style
    summary: Additional styles to apply to the menu item
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: in favor of the `styles` prop to leverage mergeStyles API.
    syntax:
      content: 'style?: React.CSSProperties;'
      return:
        type: React.CSSProperties
  - name: submenuIconProps
    uid: '@fluentui/react-internal!IContextualMenuItem#submenuIconProps:member'
    package: '@fluentui/react-internal!'
    fullName: submenuIconProps
    summary: Props for the Icon used for the chevron.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'submenuIconProps?: IIconProps;'
      return:
        type: IIconProps
  - name: subMenuProps
    uid: '@fluentui/react-internal!IContextualMenuItem#subMenuProps:member'
    package: '@fluentui/react-internal!'
    fullName: subMenuProps
    summary: >-
      Properties to apply to a submenu to this item.


      The ContextualMenu will provide default values for `target`<!-- -->,
      `onDismiss`<!-- -->, `isSubMenu`<!-- -->, `id`<!-- -->,
      `shouldFocusOnMount`<!-- -->, `directionalHint`<!-- -->, `className`<!--
      -->, and `gapSpace`<!-- -->, all of which can be overridden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'subMenuProps?: IContextualMenuProps;'
      return:
        type: IContextualMenuProps
  - name: target
    uid: '@fluentui/react-internal!IContextualMenuItem#target:member'
    package: '@fluentui/react-internal!'
    fullName: target
    summary: Target window when using `href`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'target?: string;'
      return:
        type: string
  - name: text
    uid: '@fluentui/react-internal!IContextualMenuItem#text:member'
    package: '@fluentui/react-internal!'
    fullName: text
    summary: >-
      Text of the menu item. If a standard hyphen (-) is passed in, then the
      item will be rendered as a divider. If a dash must appear as text, use an
      emdash (—), figuredash (‒), or minus symbol (−) instead.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text?: string;'
      return:
        type: string
  - name: title
    uid: '@fluentui/react-internal!IContextualMenuItem#title:member'
    package: '@fluentui/react-internal!'
    fullName: title
    summary: Title (tooltip) text displayed when hovering over an item.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'title?: string;'
      return:
        type: string
