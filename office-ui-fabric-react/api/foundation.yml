### YamlMime:TSPackage
uid: '@uifabric/foundation!'
name: '@uifabric/foundation'
type: package
summary: ''
interfaces:
  - '@uifabric/foundation!IComponentOptions:interface'
  - '@uifabric/foundation!IControlledStateOptions:interface'
  - '@uifabric/foundation!IDefaultSlotProps:interface'
  - '@uifabric/foundation!IFactoryOptions:interface'
  - '@uifabric/foundation!IProcessedSlotProps:interface'
  - '@uifabric/foundation!ISlot:interface'
  - '@uifabric/foundation!ISlotCreator:interface'
  - '@uifabric/foundation!ISlotOptions:interface'
  - '@uifabric/foundation!IStyleableComponentProps:interface'
  - '@uifabric/foundation!IThemeProviderProps:interface'
  - '@uifabric/foundation!ITokenBaseArray:interface'
functions:
  - name: 'createComponent(view, options)'
    uid: '@uifabric/foundation!createComponent:function(1)'
    package: '@uifabric/foundation'
    summary: >-
      Assembles a higher order component based on the following: styles, theme,
      view, and state. Imposes a separation of concern and centralizes styling
      processing to increase ease of use and robustness in how components use
      and apply styling and theming.


      Automatically merges and applies themes and styles with theme / styleprops
      having the highest priority. State component, if provided, is passed in
      props for processing. Props from state / user are automatically processed
      and styled before finally being passed to view.


      State components should contain all stateful behavior and should not
      generate any JSX, but rather simply call the view prop.


      Views should simply be stateless pure functions that receive all props
      needed for rendering their output.


      State component is optional. If state is not provided, created component
      is essentially a functional stateless component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function createComponent<TComponentProps extends
        ValidProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>, TViewProps
        extends TComponentProps = TComponentProps, TStatics = {}>(view:
        IViewComponent<TViewProps>, options?: IComponentOptions<TComponentProps,
        TTokens, TStyleSet, TViewProps, TStatics>):
        React.FunctionComponent<TComponentProps> & TStatics;
      parameters:
        - id: view
          description: ''
          type: IViewComponent&lt;TViewProps&gt;
        - id: options
          description: component Component options. See IComponentOptions for more detail.
          type: >-
            IComponentOptions&lt;TComponentProps, TTokens, TStyleSet,
            TViewProps, TStatics&gt;
      return:
        type: React.FunctionComponent&lt;TComponentProps&gt; & TStatics
        description: ''
  - name: 'createFactory(DefaultComponent, options)'
    uid: '@uifabric/foundation!createFactory:function(1)'
    package: '@uifabric/foundation'
    summary: >-
      This function creates factories that render ouput depending on the user
      ISlotProp props passed in.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function createFactory<TProps extends ValidProps,
        TShorthandProp extends ValidShorthand = never>(DefaultComponent:
        React.ComponentType<TProps>, options?: IFactoryOptions<TProps>):
        ISlotFactory<TProps, TShorthandProp>;
      parameters:
        - id: DefaultComponent
          description: Base component to render when not overridden by user props.
          type: React.ComponentType&lt;TProps&gt;
        - id: options
          description: >-
            Factory options, including defaultProp value for shorthand prop
            mapping.
          type: IFactoryOptions&lt;TProps&gt;
      return:
        type: 'ISlotFactory&lt;TProps, TShorthandProp&gt;'
        description: ISlotFactory function used for rendering slots.
  - name: 'getControlledDerivedProps(props, propName, derivedValue)'
    uid: '@uifabric/foundation!getControlledDerivedProps:function(1)'
    package: '@uifabric/foundation'
    summary: >-
      Simple controlled helper that gives priority to props value and falls back
      to derived value.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getControlledDerivedProps<TProps, TProp extends
        keyof TProps>(props: Readonly<TProps>, propName: TProp, derivedValue:
        TProps[TProp]): TProps[TProp];
      parameters:
        - id: props
          description: The props object containing controlled prop values.
          type: Readonly&lt;TProps&gt;
        - id: propName
          description: The controlled prop name.
          type: TProp
        - id: derivedValue
          description: Derived value. Returned when controlled value is not present.
          type: 'TProps[TProp]'
      return:
        type: 'TProps[TProp]'
        description: ''
  - name: 'getSlots(userProps, slots)'
    uid: '@uifabric/foundation!getSlots:function(1)'
    package: '@uifabric/foundation'
    summary: >-
      This function generates slots that can be used in JSX given a definition
      of slots and their corresponding types.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getSlots<TComponentProps extends
        ISlottableProps<TComponentSlots>, TComponentSlots>(userProps:
        TComponentProps, slots: ISlotDefinition<Required<TComponentSlots>>):
        ISlots<Required<TComponentSlots>>;
      parameters:
        - id: userProps
          description: Props as pass to component.
          type: TComponentProps
        - id: slots
          description: >-
            Slot definition object defining the default slot component for each
            slot.
          type: ISlotDefinition&lt;Required&lt;TComponentSlots&gt;&gt;
      return:
        type: ISlots&lt;Required&lt;TComponentSlots&gt;&gt;
        description: A set of created slots that components can render in JSX.
  - name: 'useControlledState(props, propName, options)'
    uid: '@uifabric/foundation!useControlledState:function(1)'
    package: '@uifabric/foundation'
    summary: >-
      Controlled state helper that gives priority to props value. Useful for
      components that have props with both controlled and uncontrolled modes.
      Any props values will override state, but will not update internal state.
      If prop is defined and then later undefined, state will revert to its
      previous value.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function useControlledState<TProps, TProp extends keyof
        TProps, TDefaultProp extends keyof TProps>(props: Readonly<TProps>,
        propName: TProp, options?: IControlledStateOptions<TProps, TProp,
        TDefaultProp>): [TProps[TProp] | undefined,
        React.Dispatch<React.SetStateAction<TProps[TProp]>>];
      parameters:
        - id: props
          description: The props object containing controlled prop values.
          type: Readonly&lt;TProps&gt;
        - id: propName
          description: The controlled prop name.
          type: TProp
        - id: options
          description: >-
            Options. defaultPropValue is only used if defaultPropName (or its
            value) is undefined.
          type: 'IControlledStateOptions&lt;TProps, TProp, TDefaultProp&gt;'
      return:
        type: >-
          [TProps[TProp] | undefined,
          React.Dispatch&lt;React.SetStateAction&lt;TProps[TProp]&gt;&gt;]
        description: ''
  - name: 'withSlots(type, props, children)'
    uid: '@uifabric/foundation!withSlots:function(1)'
    package: '@uifabric/foundation'
    summary: >-
      This function is required for any module that uses slots.


      This function is a slot resolver that automatically evaluates slot
      functions to generate React elements. A byproduct of this resolver is that
      it removes slots from the React hierarchy by bypassing
      React.createElement.


      To use this function on a per-file basis, use the jsx directive targeting
      withSlots. This directive must be the FIRST LINE in the file to work
      correctly. Usage of this pragma also requires withSlots import statement.


      See React.createElement
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function withSlots<P>(type: ISlot<P> |
        React.FunctionComponent<P> | string, props?: (React.Attributes & P) |
        null, ...children: React.ReactNode[]):
        ReturnType<React.FunctionComponent<P>>;
      parameters:
        - id: type
          description: ''
          type: ISlot&lt;P&gt; | React.FunctionComponent&lt;P&gt; | string
        - id: props
          description: ''
          type: (React.Attributes & P) | null
        - id: children
          description: ''
          type: 'React.ReactNode[]'
      return:
        type: ReturnType&lt;React.FunctionComponent&lt;P&gt;&gt;
        description: ''
