### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react!IDetailsRowBaseProps:interface'
    name: IDetailsRowBaseProps
    fullName: IDetailsRowBaseProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'Pick<IDetailsListProps, ''onRenderItemColumn'' | ''getCellValueKey''>'
      - IBaseProps<IDetailsRow>
      - 'IDetailsItemProps '
    package: '@fluentui/react!'
    children:
      - '@fluentui/react!IDetailsRowBaseProps#cellsByColumn:member'
      - '@fluentui/react!IDetailsRowBaseProps#checkboxCellClassName:member'
      - '@fluentui/react!IDetailsRowBaseProps#checkButtonAriaLabel:member'
      - '@fluentui/react!IDetailsRowBaseProps#className:member'
      - '@fluentui/react!IDetailsRowBaseProps#collapseAllVisibility:member'
      - '@fluentui/react!IDetailsRowBaseProps#compact:member'
      - '@fluentui/react!IDetailsRowBaseProps#componentRef:member'
      - '@fluentui/react!IDetailsRowBaseProps#dragDropEvents:member'
      - '@fluentui/react!IDetailsRowBaseProps#dragDropHelper:member'
      - '@fluentui/react!IDetailsRowBaseProps#enableUpdateAnimations:member'
      - '@fluentui/react!IDetailsRowBaseProps#eventsToRegister:member'
      - '@fluentui/react!IDetailsRowBaseProps#getRowAriaDescribedBy:member'
      - '@fluentui/react!IDetailsRowBaseProps#getRowAriaLabel:member'
      - '@fluentui/react!IDetailsRowBaseProps#item:member'
      - '@fluentui/react!IDetailsRowBaseProps#itemIndex:member'
      - '@fluentui/react!IDetailsRowBaseProps#onDidMount:member'
      - '@fluentui/react!IDetailsRowBaseProps#onRenderCheck:member'
      - '@fluentui/react!IDetailsRowBaseProps#onRenderDetailsCheckbox:member'
      - '@fluentui/react!IDetailsRowBaseProps#onWillUnmount:member'
      - '@fluentui/react!IDetailsRowBaseProps#rowFieldsAs:member'
      - '@fluentui/react!IDetailsRowBaseProps#styles:member'
      - '@fluentui/react!IDetailsRowBaseProps#theme:member'
      - '@fluentui/react!IDetailsRowBaseProps#useFastIcons:member'
      - '@fluentui/react!IDetailsRowBaseProps#useReducedRowRenderer:member'
  - uid: '@fluentui/react!IDetailsRowBaseProps#cellsByColumn:member'
    summary: Optional pre-rendered content per column. Preferred over onRender or onRenderItemColumn if provided.
    name: cellsByColumn
    fullName: cellsByColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        cellsByColumn?: {
                [columnKey: string]: React.ReactNode;
            };
      return:
        type:
          - |-
            {
                    [columnKey: string]: React.ReactNode;
                }
  - uid: '@fluentui/react!IDetailsRowBaseProps#checkboxCellClassName:member'
    summary: Class name for the checkbox cell
    name: checkboxCellClassName
    fullName: checkboxCellClassName
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkboxCellClassName?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react!IDetailsRowBaseProps#checkButtonAriaLabel:member'
    summary: Check button's aria label
    name: checkButtonAriaLabel
    fullName: checkButtonAriaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkButtonAriaLabel?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react!IDetailsRowBaseProps#className:member'
    summary: Overriding class name
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react!IDetailsRowBaseProps#collapseAllVisibility:member'
    summary: Collapse all visibility
    name: collapseAllVisibility
    fullName: collapseAllVisibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'collapseAllVisibility?: CollapseAllVisibility;'
      return:
        type:
          - CollapseAllVisibility
  - uid: '@fluentui/react!IDetailsRowBaseProps#compact:member'
    summary: Whether to render in compact mode
    name: compact
    fullName: compact
    langs:
      - typeScript
    type: property
    syntax:
      content: 'compact?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react!IDetailsRowBaseProps#componentRef:member'
    summary: Ref of the component
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IDetailsRow>;'
      return:
        type:
          - IRefObject<IDetailsRow>
  - uid: '@fluentui/react!IDetailsRowBaseProps#dragDropEvents:member'
    summary: Handling drag and drop events
    name: dragDropEvents
    fullName: dragDropEvents
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dragDropEvents?: IDragDropEvents;'
      return:
        type:
          - IDragDropEvents
  - uid: '@fluentui/react!IDetailsRowBaseProps#dragDropHelper:member'
    summary: Helper for the drag and drop
    name: dragDropHelper
    fullName: dragDropHelper
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dragDropHelper?: IDragDropHelper;'
      return:
        type:
          - IDragDropHelper
  - uid: '@fluentui/react!IDetailsRowBaseProps#enableUpdateAnimations:member'
    summary: Whether to animate updates
    name: enableUpdateAnimations
    fullName: enableUpdateAnimations
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableUpdateAnimations?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react!IDetailsRowBaseProps#eventsToRegister:member'
    summary: A list of events to register
    name: eventsToRegister
    fullName: eventsToRegister
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        eventsToRegister?: {
                eventName: string;
                callback: (item?: any, index?: number, event?: any) => void;
            }[];
      return:
        type:
          - |-
            {
                    eventName: string;
                    callback: (item?: any, index?: number, event?: any) => void;
                }[]
  - uid: '@fluentui/react!IDetailsRowBaseProps#getRowAriaDescribedBy:member'
    summary: Callback for getting the row aria-describedby
    name: getRowAriaDescribedBy
    fullName: getRowAriaDescribedBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getRowAriaDescribedBy?: (item: any) => string;'
      return:
        type:
          - '(item: any) => string'
  - uid: '@fluentui/react!IDetailsRowBaseProps#getRowAriaLabel:member'
    summary: Callback for getting the row aria label
    name: getRowAriaLabel
    fullName: getRowAriaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getRowAriaLabel?: (item: any) => string;'
      return:
        type:
          - '(item: any) => string'
  - uid: '@fluentui/react!IDetailsRowBaseProps#item:member'
    summary: Data source for this component
    name: item
    fullName: item
    langs:
      - typeScript
    type: property
    syntax:
      content: 'item: any;'
      return:
        type:
          - any
  - uid: '@fluentui/react!IDetailsRowBaseProps#itemIndex:member'
    summary: Index of the collection of items of the DetailsList
    name: itemIndex
    fullName: itemIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemIndex: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react!IDetailsRowBaseProps#onDidMount:member'
    summary: Callback for did mount for parent
    name: onDidMount
    fullName: onDidMount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDidMount?: (row?: DetailsRowBase) => void;'
      return:
        type:
          - '(row?: DetailsRowBase) => void'
  - uid: '@fluentui/react!IDetailsRowBaseProps#onRenderCheck:member'
    summary: Callback for rendering a checkbox
    name: onRenderCheck
    fullName: onRenderCheck
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderCheck?: (props: IDetailsRowCheckProps) => JSX.Element;'
      return:
        type:
          - '(props: IDetailsRowCheckProps) => JSX.Element'
  - uid: '@fluentui/react!IDetailsRowBaseProps#onRenderDetailsCheckbox:member'
    summary: 'If provided, can be used to render a custom checkbox'
    name: onRenderDetailsCheckbox
    fullName: onRenderDetailsCheckbox
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;'
      return:
        type:
          - IRenderFunction<IDetailsCheckboxProps>
  - uid: '@fluentui/react!IDetailsRowBaseProps#onWillUnmount:member'
    summary: Callback for will mount for parent
    name: onWillUnmount
    fullName: onWillUnmount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onWillUnmount?: (row?: DetailsRowBase) => void;'
      return:
        type:
          - '(row?: DetailsRowBase) => void'
  - uid: '@fluentui/react!IDetailsRowBaseProps#rowFieldsAs:member'
    summary: DOM element into which to render row field
    name: rowFieldsAs
    fullName: rowFieldsAs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowFieldsAs?: React.ComponentType<IDetailsRowFieldsProps>;'
      return:
        type:
          - React.ComponentType<IDetailsRowFieldsProps>
  - uid: '@fluentui/react!IDetailsRowBaseProps#styles:member'
    summary: Overriding styles to this row
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>'
  - uid: '@fluentui/react!IDetailsRowBaseProps#theme:member'
    summary: Theme provided by styled() function
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@fluentui/theme!ITheme:interface'
  - uid: '@fluentui/react!IDetailsRowBaseProps#useFastIcons:member'
    summary: >-
      Whether to use fast icon and check components. The icons can't be targeted by customization but are still
      customizable via class names.
    name: useFastIcons
    fullName: useFastIcons
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useFastIcons?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react!IDetailsRowBaseProps#useReducedRowRenderer:member'
    summary: Rerender DetailsRow only when props changed. Might cause regression when depending on external updates.
    name: useReducedRowRenderer
    fullName: useReducedRowRenderer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useReducedRowRenderer?: boolean;'
      return:
        type:
          - boolean
