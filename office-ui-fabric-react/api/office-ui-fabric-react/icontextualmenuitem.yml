### YamlMime:UniversalReference
items:
  - uid: 'office-ui-fabric-react!IContextualMenuItem:interface'
    name: IContextualMenuItem
    fullName: IContextualMenuItem
    langs:
      - typeScript
    type: interface
    package: office-ui-fabric-react!
    children:
      - 'office-ui-fabric-react!IContextualMenuItem#ariaLabel:member'
      - 'office-ui-fabric-react!IContextualMenuItem#canCheck:member'
      - 'office-ui-fabric-react!IContextualMenuItem#checked:member'
      - 'office-ui-fabric-react!IContextualMenuItem#className:member'
      - 'office-ui-fabric-react!IContextualMenuItem#componentRef:member'
      - 'office-ui-fabric-react!IContextualMenuItem#customOnRenderListLength:member'
      - 'office-ui-fabric-react!IContextualMenuItem#data:member'
      - 'office-ui-fabric-react!IContextualMenuItem#disabled:member'
      - 'office-ui-fabric-react!IContextualMenuItem#getItemClassNames:member'
      - 'office-ui-fabric-react!IContextualMenuItem#getSplitButtonVerticalDividerClassNames:member'
      - 'office-ui-fabric-react!IContextualMenuItem#href:member'
      - 'office-ui-fabric-react!IContextualMenuItem#iconProps:member'
      - 'office-ui-fabric-react!IContextualMenuItem#inactive:member'
      - 'office-ui-fabric-react!IContextualMenuItem#itemProps:member'
      - 'office-ui-fabric-react!IContextualMenuItem#itemType:member'
      - 'office-ui-fabric-react!IContextualMenuItem#key:member'
      - 'office-ui-fabric-react!IContextualMenuItem#keytipProps:member'
      - 'office-ui-fabric-react!IContextualMenuItem#name:member'
      - 'office-ui-fabric-react!IContextualMenuItem#onClick:member'
      - 'office-ui-fabric-react!IContextualMenuItem#onMouseDown:member'
      - 'office-ui-fabric-react!IContextualMenuItem#onRender:member'
      - 'office-ui-fabric-react!IContextualMenuItem#onRenderContent:member'
      - 'office-ui-fabric-react!IContextualMenuItem#onRenderIcon:member'
      - 'office-ui-fabric-react!IContextualMenuItem#primaryDisabled:member'
      - 'office-ui-fabric-react!IContextualMenuItem#rel:member'
      - 'office-ui-fabric-react!IContextualMenuItem#role:member'
      - 'office-ui-fabric-react!IContextualMenuItem#secondaryText:member'
      - 'office-ui-fabric-react!IContextualMenuItem#sectionProps:member'
      - 'office-ui-fabric-react!IContextualMenuItem#shortCut:member'
      - 'office-ui-fabric-react!IContextualMenuItem#split:member'
      - 'office-ui-fabric-react!IContextualMenuItem#style:member'
      - 'office-ui-fabric-react!IContextualMenuItem#submenuIconProps:member'
      - 'office-ui-fabric-react!IContextualMenuItem#subMenuProps:member'
      - 'office-ui-fabric-react!IContextualMenuItem#target:member'
      - 'office-ui-fabric-react!IContextualMenuItem#text:member'
      - 'office-ui-fabric-react!IContextualMenuItem#title:member'
  - uid: 'office-ui-fabric-react!IContextualMenuItem#ariaLabel:member'
    summary: >-
      Custom accessible label for the element. If no override is specified, the `aria-label` attribute will contain the
      item name.
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#canCheck:member'
    summary: Whether or not this menu item can be checked
    name: canCheck
    fullName: canCheck
    langs:
      - typeScript
    type: property
    syntax:
      content: 'canCheck?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IContextualMenuItem#checked:member'
    summary: Whether or not this menu item is currently checked.
    name: checked
    fullName: checked
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checked?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IContextualMenuItem#className:member'
    summary: Additional CSS class to apply to the menu item.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#componentRef:member'
    summary: >-
      Optional callback to access the IContextualMenuRenderItem interface. This will get passed down to
      ContextualMenuItem.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IContextualMenuRenderItem>;'
      return:
        type:
          - IRefObject<IContextualMenuRenderItem>
  - uid: 'office-ui-fabric-react!IContextualMenuItem#customOnRenderListLength:member'
    summary: >-
      When rendering a custom menu component that is passed in, the component might also be a list of elements. We want
      to keep track of the correct index our menu is using based off of the length of the custom list. It is up to the
      user to increment the count for their list.
    name: customOnRenderListLength
    fullName: customOnRenderListLength
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customOnRenderListLength?: number;'
      return:
        type:
          - number
  - uid: 'office-ui-fabric-react!IContextualMenuItem#data:member'
    summary: Any custom data the developer wishes to associate with the menu item.
    name: data
    fullName: data
    langs:
      - typeScript
    type: property
    syntax:
      content: 'data?: any;'
      return:
        type:
          - any
  - uid: 'office-ui-fabric-react!IContextualMenuItem#disabled:member'
    summary: Whether the menu item is disabled
    name: disabled
    fullName: disabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'disabled?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IContextualMenuItem#getItemClassNames:member'
    summary: Method to provide the classnames to style the individual items inside a menu.
    deprecated:
      content: Use `styles` prop of `IContextualMenuItemProps` to leverage mergeStyles API.
    name: getItemClassNames
    fullName: getItemClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        getItemClassNames?: (theme: ITheme, disabled: boolean, expanded: boolean, checked: boolean, isAnchorLink:
        boolean, knownIcon: boolean, itemClassName?: string, dividerClassName?: string, iconClassName?: string,
        subMenuClassName?: string, primaryDisabled?: boolean) => IMenuItemClassNames;
      return:
        type:
          - >-
            (theme: ITheme, disabled: boolean, expanded: boolean, checked: boolean, isAnchorLink: boolean, knownIcon:
            boolean, itemClassName?: string, dividerClassName?: string, iconClassName?: string, subMenuClassName?:
            string, primaryDisabled?: boolean) => IMenuItemClassNames
  - uid: 'office-ui-fabric-react!IContextualMenuItem#getSplitButtonVerticalDividerClassNames:member'
    summary: >-
      Method to provide the classnames to style the Vertical Divider of a split button inside a menu. Default value is
      the `getSplitButtonVerticalDividerClassNames` func defined in `ContextualMenu.classnames.ts`<!-- -->.
    name: getSplitButtonVerticalDividerClassNames
    fullName: getSplitButtonVerticalDividerClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getSplitButtonVerticalDividerClassNames?: (theme: ITheme) => IVerticalDividerClassNames;'
      return:
        type:
          - '(theme: ITheme) => IVerticalDividerClassNames'
  - uid: 'office-ui-fabric-react!IContextualMenuItem#href:member'
    summary: Navigate to this URL when the menu item is clicked.
    name: href
    fullName: href
    langs:
      - typeScript
    type: property
    syntax:
      content: 'href?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#iconProps:member'
    summary: Props for an icon to display next to the item.
    name: iconProps
    fullName: iconProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'iconProps?: IIconProps;'
      return:
        type:
          - IIconProps
  - uid: 'office-ui-fabric-react!IContextualMenuItem#inactive:member'
    summary: This prop is no longer used. All contextual menu items are now focusable when disabled.
    deprecated:
      content: in 6.38.2 will be removed in 7.0.0
    name: inactive
    fullName: inactive
    langs:
      - typeScript
    type: property
    syntax:
      content: 'inactive?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IContextualMenuItem#itemProps:member'
    summary: Optional IContextualMenuItemProps overrides to customize behaviors such as item styling via `styles`<!-- -->.
    name: itemProps
    fullName: itemProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemProps?: Partial<IContextualMenuItemProps>;'
      return:
        type:
          - Partial<IContextualMenuItemProps>
  - uid: 'office-ui-fabric-react!IContextualMenuItem#itemType:member'
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType?: ContextualMenuItemType;'
      return:
        type:
          - ContextualMenuItemType
  - uid: 'office-ui-fabric-react!IContextualMenuItem#key:member'
    summary: Unique id to identify the item
    name: key
    fullName: key
    langs:
      - typeScript
    type: property
    syntax:
      content: 'key: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#keytipProps:member'
    summary: Keytip for this contextual menu item
    name: keytipProps
    fullName: keytipProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'keytipProps?: IKeytipProps;'
      return:
        type:
          - IKeytipProps
  - uid: 'office-ui-fabric-react!IContextualMenuItem#name:member'
    summary: Text of the menu item.
    deprecated:
      content: Use `text` instead.
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#onClick:member'
    summary: >-
      Callback for when the menu item is invoked. If `ev.preventDefault()` is called in `onClick`<!-- -->, the click
      will not close the menu.


      Only for ContextualMenu items, returning true will dismiss the menu even if `ev.preventDefault()` was called (does
      not apply for button or CommandBar sub-menu items).
    name: onClick
    fullName: onClick
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        onClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) =>
        boolean | void;
      return:
        type:
          - >-
            (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) =>
            boolean | void
  - uid: 'office-ui-fabric-react!IContextualMenuItem#onMouseDown:member'
    summary: >-
      A function to be executed on mouse down. This is executed before an `onClick` event and can be used to interrupt
      native on click events as well. The click event should still handle the commands. This should only be used in
      special cases when react and non-react are mixed.
    name: onMouseDown
    fullName: onMouseDown
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMouseDown?: (item: IContextualMenuItem, event: React.MouseEvent<HTMLElement>) => void;'
      return:
        type:
          - '(item: IContextualMenuItem, event: React.MouseEvent<HTMLElement>) => void'
  - uid: 'office-ui-fabric-react!IContextualMenuItem#onRender:member'
    summary: >-
      Method to custom render this menu item. For keyboard accessibility, the top-level rendered item should be a
      focusable element (like an anchor or a button) or have the `data-is-focusable` property set to true.
    name: onRender
    fullName: onRender
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRender?: (item: any, dismissMenu: (ev?: any, dismissAll?: boolean) => void) => React.ReactNode;'
      return:
        type:
          - '(item: any, dismissMenu: (ev?: any, dismissAll?: boolean) => void) => React.ReactNode'
  - uid: 'office-ui-fabric-react!IContextualMenuItem#onRenderContent:member'
    summary: Method to customize sub-components rendering of this menu item.
    name: onRenderContent
    fullName: onRenderContent
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        onRenderContent?: (props: IContextualMenuItemProps, defaultRenders: IContextualMenuItemRenderFunctions) =>
        React.ReactNode;
      return:
        type:
          - '(props: IContextualMenuItemProps, defaultRenders: IContextualMenuItemRenderFunctions) => React.ReactNode'
  - uid: 'office-ui-fabric-react!IContextualMenuItem#onRenderIcon:member'
    summary: Custom render function for the menu item icon
    name: onRenderIcon
    fullName: onRenderIcon
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderIcon?: IRenderFunction<IContextualMenuItemProps>;'
      return:
        type:
          - IRenderFunction<IContextualMenuItemProps>
  - uid: 'office-ui-fabric-react!IContextualMenuItem#primaryDisabled:member'
    summary: 'If the menu item is a split button, this prop disables purely the primary action of the button.'
    name: primaryDisabled
    fullName: primaryDisabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'primaryDisabled?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IContextualMenuItem#rel:member'
    summary: >-
      Link relation setting when using `href`<!-- -->. If `target` is `_blank`<!-- -->, `rel` is defaulted to a value to
      prevent clickjacking.
    name: rel
    fullName: rel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rel?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#role:member'
    summary: Optional override for the menu button's role. Defaults to `menuitem` or `menuitemcheckbox`<!-- -->.
    name: role
    fullName: role
    langs:
      - typeScript
    type: property
    syntax:
      content: 'role?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#secondaryText:member'
    summary: Seconday description for the menu item to display
    name: secondaryText
    fullName: secondaryText
    langs:
      - typeScript
    type: property
    syntax:
      content: 'secondaryText?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#sectionProps:member'
    summary: Properties to apply to render this item as a section. This prop is mutually exclusive with `subMenuProps`<!-- -->.
    name: sectionProps
    fullName: sectionProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'sectionProps?: IContextualMenuSection;'
      return:
        type:
          - IContextualMenuSection
  - uid: 'office-ui-fabric-react!IContextualMenuItem#shortCut:member'
    deprecated:
      content: Not used
    name: shortCut
    fullName: shortCut
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shortCut?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#split:member'
    summary: Whether or not this menu item is a splitButton.
    name: split
    fullName: split
    langs:
      - typeScript
    type: property
    syntax:
      content: 'split?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IContextualMenuItem#style:member'
    summary: Additional styles to apply to the menu item
    deprecated:
      content: in favor of the `styles` prop to leverage mergeStyles API.
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style?: React.CSSProperties;'
      return:
        type:
          - React.CSSProperties
  - uid: 'office-ui-fabric-react!IContextualMenuItem#submenuIconProps:member'
    summary: Props for the Icon used for the chevron.
    name: submenuIconProps
    fullName: submenuIconProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'submenuIconProps?: IIconProps;'
      return:
        type:
          - IIconProps
  - uid: 'office-ui-fabric-react!IContextualMenuItem#subMenuProps:member'
    summary: >-
      Properties to apply to a submenu to this item.


      The ContextualMenu will provide default values for `target`<!-- -->, `onDismiss`<!-- -->, `isSubMenu`<!-- -->,
      `id`<!-- -->, `shouldFocusOnMount`<!-- -->, `directionalHint`<!-- -->, `className`<!-- -->, and `gapSpace`<!--
      -->, all of which can be overridden.
    name: subMenuProps
    fullName: subMenuProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subMenuProps?: IContextualMenuProps;'
      return:
        type:
          - IContextualMenuProps
  - uid: 'office-ui-fabric-react!IContextualMenuItem#target:member'
    summary: Target window when using `href`<!-- -->.
    name: target
    fullName: target
    langs:
      - typeScript
    type: property
    syntax:
      content: 'target?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#text:member'
    summary: >-
      Text of the menu item. If a standard hyphen (-) is passed in, then the item will be rendered as a divider. If a
      dash must appear as text, use an emdash (—), figuredash (‒), or minus symbol (−) instead.
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'text?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IContextualMenuItem#title:member'
    summary: Title (tooltip) text displayed when hovering over an item.
    name: title
    fullName: title
    langs:
      - typeScript
    type: property
    syntax:
      content: 'title?: string;'
      return:
        type:
          - string
