### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps:interface'
    name: ICalendarDayGridProps
    fullName: ICalendarDayGridProps
    langs:
      - typeScript
    type: interface
    extends:
      - '@fluentui/date-time-utilities!IDayGridOptions:interface'
      - 'IBaseProps<ICalendarDayGrid> '
    package: '@fluentui/react-date-time!'
    children:
      - '@fluentui/react-date-time!ICalendarDayGridProps#allFocusable:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#animationDirection:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#className:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#componentRef:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#customDayCellRef:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#dateRangeType:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#dateTimeFormatter:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#daysToSelectInDayView:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#firstDayOfWeek:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#firstWeekOfYear:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#getMarkedDays:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#labelledBy:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#lightenDaysOutsideNavigatedMonth:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#maxDate:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#minDate:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#navigatedDate:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#onDismiss:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#onNavigateDate:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#onSelectDate:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#restrictedDates:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#selectedDate:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#showCloseButton:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#showWeekNumbers:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#strings:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#styles:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#theme:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#today:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#weeksToShow:member'
      - '@fluentui/react-date-time!ICalendarDayGridProps#workWeekDays:member'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#allFocusable:member'
    summary: 'Allows all dates and buttons to be focused, including disabled ones'
    name: allFocusable
    fullName: allFocusable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'allFocusable?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#animationDirection:member'
    summary: 'The cardinal directions for animation to occur during transitions, either horizontal or veritcal'
    name: animationDirection
    fullName: animationDirection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'animationDirection?: AnimationDirection;'
      return:
        type:
          - '@fluentui/react-date-time!AnimationDirection:enum'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#className:member'
    summary: Additional CSS class(es) to apply to the CalendarDayGrid.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#componentRef:member'
    summary: >-
      Optional callback to access the ICalendarDayGrid interface. Use this instead of ref for accessing the public
      methods and properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<ICalendarDayGrid>;'
      return:
        type:
          - IRefObject<ICalendarDayGrid>
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#customDayCellRef:member'
    summary: >-
      Ref callback for individual days. Allows for customization of the styling, properties, or listeners of the
      specific day.
    name: customDayCellRef
    fullName: customDayCellRef
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        customDayCellRef?: (element: HTMLElement, date: Date, classNames: IProcessedStyleSet<ICalendarDayGridStyles>) =>
        void;
      return:
        type:
          - '(element: HTMLElement, date: Date, classNames: IProcessedStyleSet<ICalendarDayGridStyles>) => void'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#dateRangeType:member'
    summary: The date range type indicating how many days should be selected as the user selects days
    name: dateRangeType
    fullName: dateRangeType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateRangeType: DateRangeType;'
      return:
        type:
          - '@fluentui/date-time-utilities!DateRangeType:enum'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#dateTimeFormatter:member'
    summary: 'Apply additional formating to dates, for example localized date formatting.'
    name: dateTimeFormatter
    fullName: dateTimeFormatter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeFormatter: IDateFormatting;'
      return:
        type:
          - '@fluentui/date-time-utilities!IDateFormatting:interface'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#daysToSelectInDayView:member'
    summary: The number of days to select while dateRangeType === DateRangeType.Day. Used in order to have multi-day views.
    name: daysToSelectInDayView
    fullName: daysToSelectInDayView
    langs:
      - typeScript
    type: property
    syntax:
      content: 'daysToSelectInDayView?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#firstDayOfWeek:member'
    summary: The first day of the week for your locale.
    name: firstDayOfWeek
    fullName: firstDayOfWeek
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstDayOfWeek: DayOfWeek;'
      return:
        type:
          - '@fluentui/date-time-utilities!DayOfWeek:enum'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#firstWeekOfYear:member'
    summary: >-
      Defines when the first week of the year should start, FirstWeekOfYear.FirstDay, FirstWeekOfYear.FirstFullWeek or
      FirstWeekOfYear.FirstFourDayWeek are the possible values
    name: firstWeekOfYear
    fullName: firstWeekOfYear
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstWeekOfYear: FirstWeekOfYear;'
      return:
        type:
          - '@fluentui/date-time-utilities!FirstWeekOfYear:enum'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#getMarkedDays:member'
    summary: >-
      Optional callback function to mark specific days with a small symbol. Fires when the date range changes, gives the
      starting and ending displayed dates and expects the list of which days in between should be marked.
    name: getMarkedDays
    fullName: getMarkedDays
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getMarkedDays?: (startingDate: Date, endingDate: Date) => Date[];'
      return:
        type:
          - '(startingDate: Date, endingDate: Date) => Date[]'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#labelledBy:member'
    summary: The ID of the control that labels this one
    name: labelledBy
    fullName: labelledBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'labelledBy?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#lightenDaysOutsideNavigatedMonth:member'
    summary: Whether to show days outside the selected month with lighter styles
    name: lightenDaysOutsideNavigatedMonth
    fullName: lightenDaysOutsideNavigatedMonth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lightenDaysOutsideNavigatedMonth?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#maxDate:member'
    summary: If set the Calendar will not allow navigation to or selection of a date later than this value.
    name: maxDate
    fullName: maxDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'maxDate?: Date;'
      return:
        type:
          - Date
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#minDate:member'
    summary: If set the Calendar will not allow navigation to or selection of a date earlier than this value.
    name: minDate
    fullName: minDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'minDate?: Date;'
      return:
        type:
          - Date
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#navigatedDate:member'
    summary: The currently navigated date
    name: navigatedDate
    fullName: navigatedDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'navigatedDate: Date;'
      return:
        type:
          - Date
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#onDismiss:member'
    summary: Callback issued when calendar day is closed
    name: onDismiss
    fullName: onDismiss
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDismiss?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#onNavigateDate:member'
    summary: Callback issued when a date in the calendar is navigated
    name: onNavigateDate
    fullName: onNavigateDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;'
      return:
        type:
          - '(date: Date, focusOnNavigatedDay: boolean) => void'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#onSelectDate:member'
    summary: Callback issued when a date is selected
    name: onSelectDate
    fullName: onSelectDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;'
      return:
        type:
          - '(date: Date, selectedDateRangeArray?: Date[]) => void'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#restrictedDates:member'
    summary: If set the Calendar will not allow selection of dates in this array.
    name: restrictedDates
    fullName: restrictedDates
    langs:
      - typeScript
    type: property
    syntax:
      content: 'restrictedDates?: Date[];'
      return:
        type:
          - 'Date[]'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#selectedDate:member'
    summary: The currently selected date
    name: selectedDate
    fullName: selectedDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectedDate: Date;'
      return:
        type:
          - Date
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#showCloseButton:member'
    summary: Whether the close button should be shown or not
    name: showCloseButton
    fullName: showCloseButton
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showCloseButton?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#showWeekNumbers:member'
    summary: Whether the calendar should show the week number (weeks 1 to 53) before each week row
    name: showWeekNumbers
    fullName: showWeekNumbers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showWeekNumbers?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#strings:member'
    summary: Localized strings to use in the CalendarDayGrid
    name: strings
    fullName: strings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'strings: ICalendarStrings;'
      return:
        type:
          - ICalendarStrings
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#styles:member'
    summary: Customized styles for the component.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<ICalendarDayGridStyleProps, ICalendarDayGridStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<ICalendarDayGridStyleProps, ICalendarDayGridStyles>'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#theme:member'
    summary: Theme (provided through customization).
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@fluentui/theme!ITheme:interface'
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#today:member'
    summary: 'Value of today. If unspecified, current time in client machine will be used.'
    name: today
    fullName: today
    langs:
      - typeScript
    type: property
    syntax:
      content: 'today?: Date;'
      return:
        type:
          - Date
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#weeksToShow:member'
    summary: >-
      How many weeks to show by default. If not provided, will show enough weeks to display the current month, between 4
      and 6 depending
    name: weeksToShow
    fullName: weeksToShow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'weeksToShow?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-date-time!ICalendarDayGridProps#workWeekDays:member'
    summary: >-
      The days that are selectable when `dateRangeType` is WorkWeek. If `dateRangeType` is not WorkWeek this property
      does nothing.
    name: workWeekDays
    fullName: workWeekDays
    langs:
      - typeScript
    type: property
    syntax:
      content: 'workWeekDays?: DayOfWeek[];'
      return:
        type:
          - 'DayOfWeek[]'
