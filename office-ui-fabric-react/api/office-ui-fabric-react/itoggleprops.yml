### YamlMime:TSType
name: IToggleProps
uid: 'office-ui-fabric-react!IToggleProps:interface'
package: office-ui-fabric-react!
fullName: IToggleProps
summary: Toggle component props.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: ariaLabel
    uid: 'office-ui-fabric-react!IToggleProps#ariaLabel:member'
    package: office-ui-fabric-react!
    fullName: ariaLabel
    summary: Text for screen-reader to announce as the name of the toggle.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type: string
  - name: as
    uid: 'office-ui-fabric-react!IToggleProps#as:member'
    package: office-ui-fabric-react!
    fullName: as
    summary: Render the root element as another type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'as?: IComponentAs<React.HTMLAttributes<HTMLElement>>;'
      return:
        type: IComponentAs&lt;React.HTMLAttributes&lt;HTMLElement&gt;&gt;
  - name: checked
    uid: 'office-ui-fabric-react!IToggleProps#checked:member'
    package: office-ui-fabric-react!
    fullName: checked
    summary: >-
      Checked state of the toggle. If you are maintaining state yourself, use
      this property. Otherwise use `defaultChecked`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'checked?: boolean;'
      return:
        type: boolean
  - name: componentRef
    uid: 'office-ui-fabric-react!IToggleProps#componentRef:member'
    package: office-ui-fabric-react!
    fullName: componentRef
    summary: >-
      Optional callback to access the IToggle interface. Use this instead of ref
      for accessing the public methods and properties of the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IToggle>;'
      return:
        type: IRefObject&lt;IToggle&gt;
  - name: defaultChecked
    uid: 'office-ui-fabric-react!IToggleProps#defaultChecked:member'
    package: office-ui-fabric-react!
    fullName: defaultChecked
    summary: >-
      Initial state of the toggle. If you want the toggle to maintain its own
      state, use this. Otherwise use `checked`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultChecked?: boolean;'
      return:
        type: boolean
  - name: disabled
    uid: 'office-ui-fabric-react!IToggleProps#disabled:member'
    package: office-ui-fabric-react!
    fullName: disabled
    summary: Optional disabled flag.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'disabled?: boolean;'
      return:
        type: boolean
  - name: inlineLabel
    uid: 'office-ui-fabric-react!IToggleProps#inlineLabel:member'
    package: office-ui-fabric-react!
    fullName: inlineLabel
    summary: >-
      Whether the label (not the onText/offText) should be positioned inline
      with the toggle control. Left (right in RTL) side when on/off text
      provided VS right (left in RTL) side when no on/off text. Caution: when
      not providing on/off text user may get confused in differentiating the
      on/off states of the toggle.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inlineLabel?: boolean;'
      return:
        type: boolean
  - name: keytipProps
    uid: 'office-ui-fabric-react!IToggleProps#keytipProps:member'
    package: office-ui-fabric-react!
    fullName: keytipProps
    summary: Optional keytip for this toggle
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'keytipProps?: IKeytipProps;'
      return:
        type: IKeytipProps
  - name: label
    uid: 'office-ui-fabric-react!IToggleProps#label:member'
    package: office-ui-fabric-react!
    fullName: label
    summary: A label for the toggle.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'label?: string | JSX.Element;'
      return:
        type: string | JSX.Element
  - name: offAriaLabel
    uid: 'office-ui-fabric-react!IToggleProps#offAriaLabel:member'
    package: office-ui-fabric-react!
    fullName: offAriaLabel
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: 'Use `ariaLabel` for name, and let the metadata convey state'
    syntax:
      content: 'offAriaLabel?: string;'
      return:
        type: string
  - name: offText
    uid: 'office-ui-fabric-react!IToggleProps#offText:member'
    package: office-ui-fabric-react!
    fullName: offText
    summary: >-
      Text to display when toggle is OFF. Caution: when not providing on/off
      text user may get confused in differentiating the on/off states of the
      toggle.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'offText?: string;'
      return:
        type: string
  - name: onAriaLabel
    uid: 'office-ui-fabric-react!IToggleProps#onAriaLabel:member'
    package: office-ui-fabric-react!
    fullName: onAriaLabel
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: 'Use `ariaLabel` for name, and let the metadata convey state'
    syntax:
      content: 'onAriaLabel?: string;'
      return:
        type: string
  - name: onChange
    uid: 'office-ui-fabric-react!IToggleProps#onChange:member'
    package: office-ui-fabric-react!
    fullName: onChange
    summary: Callback issued when the value changes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onChange?: (event: React.MouseEvent<HTMLElement>, checked?: boolean) =>
        void;
      return:
        type: >-
          (event: React.MouseEvent&lt;HTMLElement&gt;, checked?: boolean) =&gt;
          void
  - name: onChanged
    uid: 'office-ui-fabric-react!IToggleProps#onChanged:member'
    package: office-ui-fabric-react!
    fullName: onChanged
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `onChange` instead.
    syntax:
      content: 'onChanged?: (checked: boolean) => void;'
      return:
        type: '(checked: boolean) =&gt; void'
  - name: onText
    uid: 'office-ui-fabric-react!IToggleProps#onText:member'
    package: office-ui-fabric-react!
    fullName: onText
    summary: >-
      Text to display when toggle is ON. Caution: when not providing on/off text
      user may get confused in differentiating the on/off states of the toggle.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onText?: string;'
      return:
        type: string
  - name: role
    uid: 'office-ui-fabric-react!IToggleProps#role:member'
    package: office-ui-fabric-react!
    fullName: role
    summary: >-
      (Optional) Specify whether to use the "switch" role (ARIA 1.1) or the
      checkbox role (ARIA 1.0). If unspecified, defaults to "switch".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'role?: ''checkbox'' | ''switch'' | ''menuitemcheckbox'';'
      return:
        type: '''checkbox'' | ''switch'' | ''menuitemcheckbox'''
  - name: styles
    uid: 'office-ui-fabric-react!IToggleProps#styles:member'
    package: office-ui-fabric-react!
    fullName: styles
    summary: Optional styles for the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>;'
      return:
        type: 'IStyleFunctionOrObject&lt;IToggleStyleProps, IToggleStyles&gt;'
  - name: theme
    uid: 'office-ui-fabric-react!IToggleProps#theme:member'
    package: office-ui-fabric-react!
    fullName: theme
    summary: Theme provided by HOC.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
extends: 'React.HTMLAttributes&lt;HTMLElement&gt; '
