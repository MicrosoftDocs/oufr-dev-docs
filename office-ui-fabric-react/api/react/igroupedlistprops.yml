### YamlMime:TSType
name: IGroupedListProps
uid: '@fluentui/react!IGroupedListProps:interface'
package: '@fluentui/react!'
fullName: IGroupedListProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: className
    uid: '@fluentui/react!IGroupedListProps#className:member'
    package: '@fluentui/react!'
    fullName: className
    summary: Optional class name to add to the root element.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: compact
    uid: '@fluentui/react!IGroupedListProps#compact:member'
    package: '@fluentui/react!'
    fullName: compact
    summary: >-
      Boolean value to indicate if the component should render in compact mode.
      Set to false by default
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'compact?: boolean;'
      return:
        type: boolean
  - name: componentRef
    uid: '@fluentui/react!IGroupedListProps#componentRef:member'
    package: '@fluentui/react!'
    fullName: componentRef
    summary: >-
      Optional callback to access the IGroupedList interface. Use this instead
      of ref for accessing the public methods and properties of the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IGroupedList>;'
      return:
        type: IRefObject&lt;IGroupedList&gt;
  - name: dragDropEvents
    uid: '@fluentui/react!IGroupedListProps#dragDropEvents:member'
    package: '@fluentui/react!'
    fullName: dragDropEvents
    summary: Map of callback functions related to drag and drop functionality.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dragDropEvents?: IDragDropEvents;'
      return:
        type: IDragDropEvents
  - name: dragDropHelper
    uid: '@fluentui/react!IGroupedListProps#dragDropHelper:member'
    package: '@fluentui/react!'
    fullName: dragDropHelper
    summary: helper to manage drag/drop across item and groups
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dragDropHelper?: IDragDropHelper;'
      return:
        type: IDragDropHelper
  - name: eventsToRegister
    uid: '@fluentui/react!IGroupedListProps#eventsToRegister:member'
    package: '@fluentui/react!'
    fullName: eventsToRegister
    summary: >-
      Event names and corresponding callbacks that will be registered to groups
      and rendered elements
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        eventsToRegister?: {
                eventName: string;
                callback: (context: IDragDropContext, event?: any) => void;
            }[];
      return:
        type: |-
          {
                  eventName: string;
                  callback: (context: IDragDropContext, event?: any) =&gt; void;
              }[]
  - name: focusZoneProps
    uid: '@fluentui/react!IGroupedListProps#focusZoneProps:member'
    package: '@fluentui/react!'
    fullName: focusZoneProps
    summary: Optional properties to pass through to the FocusZone.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'focusZoneProps?: IFocusZoneProps;'
      return:
        type: '<xref uid="@fluentui/react-focus!IFocusZoneProps:interface" />'
  - name: getGroupHeight
    uid: '@fluentui/react!IGroupedListProps#getGroupHeight:member'
    package: '@fluentui/react!'
    fullName: getGroupHeight
    summary: >-
      Optional function to override default group height calculation used by
      list virtualization.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getGroupHeight?: (group: IGroup, groupIndex: number) => number;'
      return:
        type: '(group: IGroup, groupIndex: number) =&gt; number'
  - name: groupProps
    uid: '@fluentui/react!IGroupedListProps#groupProps:member'
    package: '@fluentui/react!'
    fullName: groupProps
    summary: Optional override properties to render groups.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'groupProps?: IGroupRenderProps;'
      return:
        type: IGroupRenderProps
  - name: groups
    uid: '@fluentui/react!IGroupedListProps#groups:member'
    package: '@fluentui/react!'
    fullName: groups
    summary: Optional grouping instructions.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'groups?: IGroup[];'
      return:
        type: 'IGroup[]'
  - name: items
    uid: '@fluentui/react!IGroupedListProps#items:member'
    package: '@fluentui/react!'
    fullName: items
    summary: List of items to render.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'items: any[];'
      return:
        type: 'any[]'
  - name: listProps
    uid: '@fluentui/react!IGroupedListProps#listProps:member'
    package: '@fluentui/react!'
    fullName: listProps
    summary: Optional properties to pass through to the list components being rendered.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'listProps?: IListProps;'
      return:
        type: IListProps
  - name: onGroupExpandStateChanged
    uid: '@fluentui/react!IGroupedListProps#onGroupExpandStateChanged:member'
    package: '@fluentui/react!'
    fullName: onGroupExpandStateChanged
    summary: >-
      Optional callback when the group expand state changes between all
      collapsed and at least one group is expanded.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;'
      return:
        type: '(isSomeGroupExpanded: boolean) =&gt; void'
  - name: onRenderCell
    uid: '@fluentui/react!IGroupedListProps#onRenderCell:member'
    package: '@fluentui/react!'
    fullName: onRenderCell
    summary: Rendering callback to render the group items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onRenderCell: (nestingDepth?: number, item?: any, index?: number) =>
        React.ReactNode;
      return:
        type: >-
          (nestingDepth?: number, item?: any, index?: number) =&gt;
          React.ReactNode
  - name: onShouldVirtualize
    uid: '@fluentui/react!IGroupedListProps#onShouldVirtualize:member'
    package: '@fluentui/react!'
    fullName: onShouldVirtualize
    summary: >-
      Optional callback to determine whether the list should be rendered in
      full, or virtualized. Virtualization will add and remove pages of items as
      the user scrolls them into the visible range. This benefits larger list
      scenarios by reducing the DOM on the screen, but can negatively affect
      performance for smaller lists. The default implementation will virtualize
      when this callback is not provided.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onShouldVirtualize?: (props: IListProps) => boolean;'
      return:
        type: '(props: IListProps) =&gt; boolean'
  - name: role
    uid: '@fluentui/react!IGroupedListProps#role:member'
    package: '@fluentui/react!'
    fullName: role
    summary: Override the default role for GroupedList.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'role?: string;'
      return:
        type: string
  - name: rootListProps
    uid: '@fluentui/react!IGroupedListProps#rootListProps:member'
    package: '@fluentui/react!'
    fullName: rootListProps
    summary: >-
      Optional properties to pass through to the root list component being
      rendered.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rootListProps?: IListProps;'
      return:
        type: IListProps
  - name: selection
    uid: '@fluentui/react!IGroupedListProps#selection:member'
    package: '@fluentui/react!'
    fullName: selection
    summary: Optional selection model to track selection state.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'selection?: ISelection;'
      return:
        type: '<xref uid="@fluentui/utilities!ISelection:interface" />'
  - name: selectionMode
    uid: '@fluentui/react!IGroupedListProps#selectionMode:member'
    package: '@fluentui/react!'
    fullName: selectionMode
    summary: Controls how/if the list manages selection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'selectionMode?: SelectionMode;'
      return:
        type: '<xref uid="@fluentui/utilities!SelectionMode:enum" />'
  - name: styles
    uid: '@fluentui/react!IGroupedListProps#styles:member'
    package: '@fluentui/react!'
    fullName: styles
    summary: Style function to be passed in to override the themed or default styles
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        styles?: IStyleFunctionOrObject<IGroupedListStyleProps,
        IGroupedListStyles>;
      return:
        type: >-
          IStyleFunctionOrObject&lt;IGroupedListStyleProps,
          IGroupedListStyles&gt;
  - name: theme
    uid: '@fluentui/react!IGroupedListProps#theme:member'
    package: '@fluentui/react!'
    fullName: theme
    summary: Theme that is passed in from Higher Order Component
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
  - name: usePageCache
    uid: '@fluentui/react!IGroupedListProps#usePageCache:member'
    package: '@fluentui/react!'
    fullName: usePageCache
    summary: >-
      boolean to control if pages containing unchanged items should be cached,
      this is a perf optimization The same property in List.Props
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'usePageCache?: boolean;'
      return:
        type: boolean
  - name: viewport
    uid: '@fluentui/react!IGroupedListProps#viewport:member'
    package: '@fluentui/react!'
    fullName: viewport
    summary: 'Optional Viewport, provided by the parent component.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'viewport?: IViewport;'
      return:
        type: IViewport
extends: 'React.ClassAttributes&lt;GroupedListBase&gt; '
