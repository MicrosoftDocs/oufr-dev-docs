### YamlMime:TSPackage
uid: '@fluentui/dom-utilities!'
name: '@fluentui/dom-utilities'
type: package
summary: ''
interfaces:
  - '@fluentui/dom-utilities!IVirtualElement:interface'
functions:
  - name: 'elementContains(parent, child, allowVirtualParents)'
    uid: '@fluentui/dom-utilities!elementContains:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: >-
      Determines whether or not a parent element contains a given child element.
      If `allowVirtualParents` is true, this method may return `true` if the
      child has the parent in its virtual element hierarchy.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function elementContains(parent: HTMLElement | null,
        child: HTMLElement | null, allowVirtualParents?: boolean): boolean;
      parameters:
        - id: parent
          description: ''
          type: HTMLElement | null
        - id: child
          description: ''
          type: HTMLElement | null
        - id: allowVirtualParents
          description: ''
          type: boolean
      return:
        type: boolean
        description: ''
  - name: 'elementContainsAttribute(element, attribute)'
    uid: '@fluentui/dom-utilities!elementContainsAttribute:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: >-
      Determines if an element, or any of its ancestors, contain the given
      attribute
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function elementContainsAttribute(element: HTMLElement,
        attribute: string): string | null;
      parameters:
        - id: element
          description: element to start searching at
          type: HTMLElement
        - id: attribute
          description: the attribute to search for
          type: string
      return:
        type: string | null
        description: the value of the first instance found
  - name: 'findElementRecursive(element, matchFunction)'
    uid: '@fluentui/dom-utilities!findElementRecursive:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: Finds the first parent element where the matchFunction returns true
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function findElementRecursive(element: HTMLElement |
        null, matchFunction: (element: HTMLElement) => boolean): HTMLElement |
        null;
      parameters:
        - id: element
          description: element to start searching at
          type: HTMLElement | null
        - id: matchFunction
          description: the function that determines if the element is a match
          type: '(element: HTMLElement) =&gt; boolean'
      return:
        type: HTMLElement | null
        description: the matched element or null no match was found
  - name: 'getChildren(parent, allowVirtualChildren)'
    uid: '@fluentui/dom-utilities!getChildren:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: >-
      Gets the elements which are child elements of the given element. If
      `allowVirtualChildren` is `true`<!-- -->, this method enumerates virtual
      child elements after the original children.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getChildren(parent: HTMLElement,
        allowVirtualChildren?: boolean): HTMLElement[];
      parameters:
        - id: parent
          description: The element to get the children of.
          type: HTMLElement
        - id: allowVirtualChildren
          description: true if the method should enumerate virtual child elements.
          type: boolean
      return:
        type: 'HTMLElement[]'
        description: ''
  - name: 'getParent(child, allowVirtualParents)'
    uid: '@fluentui/dom-utilities!getParent:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: >-
      Gets the element which is the parent of a given element. If
      `allowVirtuaParents` is `true`<!-- -->, this method prefers the virtual
      parent over real DOM parent when present.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getParent(child: HTMLElement,
        allowVirtualParents?: boolean): HTMLElement | null;
      parameters:
        - id: child
          description: ''
          type: HTMLElement
        - id: allowVirtualParents
          description: ''
          type: boolean
      return:
        type: HTMLElement | null
        description: ''
  - name: getVirtualParent(child)
    uid: '@fluentui/dom-utilities!getVirtualParent:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: 'Gets the virtual parent given the child element, if it exists.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getVirtualParent(child: HTMLElement):
        HTMLElement | undefined;
      parameters:
        - id: child
          description: ''
          type: HTMLElement
      return:
        type: HTMLElement | undefined
        description: ''
  - name: isVirtualElement(element)
    uid: '@fluentui/dom-utilities!isVirtualElement:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: Determines whether or not an element has the virtual hierarchy extension.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function isVirtualElement(element: HTMLElement |
        IVirtualElement): element is IVirtualElement;
      parameters:
        - id: element
          description: ''
          type: HTMLElement | IVirtualElement
      return:
        type: element is IVirtualElement
        description: ''
  - name: 'portalContainsElement(target, parent)'
    uid: '@fluentui/dom-utilities!portalContainsElement:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: >-
      Determine whether a target is within a portal from perspective of root or
      optional parent. This function only works against portal components that
      use the setPortalAttribute function. If both parent and child are within
      the same portal this function will return false.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function portalContainsElement(target: HTMLElement,
        parent?: HTMLElement): boolean;
      parameters:
        - id: target
          description: Element to query portal containment status of.
          type: HTMLElement
        - id: parent
          description: >-
            Optional parent perspective. Search for containing portal stops at
            parent (or root if parent is undefined or invalid.)
          type: HTMLElement
      return:
        type: boolean
        description: ''
  - name: setPortalAttribute(element)
    uid: '@fluentui/dom-utilities!setPortalAttribute:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: Identify element as a portal by setting an attribute.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function setPortalAttribute(element: HTMLElement): void;'
      parameters:
        - id: element
          description: Element to mark as a portal.
          type: HTMLElement
      return:
        type: void
        description: ''
  - name: 'setVirtualParent(child, parent)'
    uid: '@fluentui/dom-utilities!setVirtualParent:function(1)'
    package: '@fluentui/dom-utilities!'
    summary: >-
      Sets the virtual parent of an element. Pass `undefined` as the `parent` to
      clear the virtual parent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function setVirtualParent(child: HTMLElement, parent:
        HTMLElement | null): void;
      parameters:
        - id: child
          description: ''
          type: HTMLElement
        - id: parent
          description: ''
          type: HTMLElement | null
      return:
        type: void
        description: ''
