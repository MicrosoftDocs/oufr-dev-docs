### YamlMime:TSPackage
uid: '@fluentui/react-theme-provider!'
name: '@fluentui/react-theme-provider'
type: package
summary: ''
interfaces:
  - '@fluentui/react-theme-provider!StyleOptions:interface'
  - '@fluentui/react-theme-provider!StyleProps:interface'
  - '@fluentui/react-theme-provider!StyleRenderer:interface'
  - '@fluentui/react-theme-provider!ThemeProviderProps:interface'
functions:
  - name: makeStyles(styleOrFunction)
    uid: '@fluentui/react-theme-provider!makeStyles:function(1)'
    package: '@fluentui/react-theme-provider!'
    summary: 'Registers a css object, optionally as a function of the theme.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function makeStyles<TStyleSet extends {
            [key: string]: IStyle;
        }>(styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet)):
        (options?: UseStylesOptions) => {
            [key in keyof TStyleSet]: string;
        };
      parameters:
        - id: styleOrFunction
          description: >-
            Either a css javascript object, or a function which takes in
            `ITheme` and returns a css javascript object.
          type: 'TStyleSet | ((theme: Theme) =&gt; TStyleSet)'
      return:
        type: |-
          (options?: UseStylesOptions) =&gt; {
              [key in keyof TStyleSet]: string;
          }
        description: ''
  - name: useThemeProviderClasses(state)
    uid: '@fluentui/react-theme-provider!useThemeProviderClasses:function(1)'
    package: '@fluentui/react-theme-provider!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function useThemeProviderClasses(state:
        ThemeProviderState): void;
      parameters:
        - id: state
          description: ''
          type: ThemeProviderState
      return:
        type: void
        description: ''
