### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-internal!ICalloutProps:interface'
    name: ICalloutProps
    fullName: ICalloutProps
    langs:
      - typeScript
    type: interface
    extends:
      - React.HTMLAttributes<HTMLDivElement>
      - 'React.RefAttributes<HTMLDivElement> '
    package: '@fluentui/react-internal!'
    children:
      - '@fluentui/react-internal!ICalloutProps#alignTargetEdge:member'
      - '@fluentui/react-internal!ICalloutProps#ariaDescribedBy:member'
      - '@fluentui/react-internal!ICalloutProps#ariaLabel:member'
      - '@fluentui/react-internal!ICalloutProps#ariaLabelledBy:member'
      - '@fluentui/react-internal!ICalloutProps#backgroundColor:member'
      - '@fluentui/react-internal!ICalloutProps#beakWidth:member'
      - '@fluentui/react-internal!ICalloutProps#bounds:member'
      - '@fluentui/react-internal!ICalloutProps#calloutMaxHeight:member'
      - '@fluentui/react-internal!ICalloutProps#calloutMaxWidth:member'
      - '@fluentui/react-internal!ICalloutProps#calloutWidth:member'
      - '@fluentui/react-internal!ICalloutProps#className:member'
      - '@fluentui/react-internal!ICalloutProps#coverTarget:member'
      - '@fluentui/react-internal!ICalloutProps#directionalHint:member'
      - '@fluentui/react-internal!ICalloutProps#directionalHintFixed:member'
      - '@fluentui/react-internal!ICalloutProps#directionalHintForRTL:member'
      - '@fluentui/react-internal!ICalloutProps#doNotLayer:member'
      - '@fluentui/react-internal!ICalloutProps#finalHeight:member'
      - '@fluentui/react-internal!ICalloutProps#gapSpace:member'
      - '@fluentui/react-internal!ICalloutProps#hidden:member'
      - '@fluentui/react-internal!ICalloutProps#hideOverflow:member'
      - '@fluentui/react-internal!ICalloutProps#isBeakVisible:member'
      - '@fluentui/react-internal!ICalloutProps#layerProps:member'
      - '@fluentui/react-internal!ICalloutProps#minPagePadding:member'
      - '@fluentui/react-internal!ICalloutProps#onDismiss:member'
      - '@fluentui/react-internal!ICalloutProps#onLayerMounted:member'
      - '@fluentui/react-internal!ICalloutProps#onPositioned:member'
      - '@fluentui/react-internal!ICalloutProps#onRestoreFocus:member'
      - '@fluentui/react-internal!ICalloutProps#onScroll:member'
      - '@fluentui/react-internal!ICalloutProps#preventDismissOnEvent:member'
      - '@fluentui/react-internal!ICalloutProps#preventDismissOnLostFocus:member'
      - '@fluentui/react-internal!ICalloutProps#preventDismissOnResize:member'
      - '@fluentui/react-internal!ICalloutProps#preventDismissOnScroll:member'
      - '@fluentui/react-internal!ICalloutProps#role:member'
      - '@fluentui/react-internal!ICalloutProps#setInitialFocus:member'
      - '@fluentui/react-internal!ICalloutProps#shouldDismissOnWindowFocus:member'
      - '@fluentui/react-internal!ICalloutProps#shouldRestoreFocus:member'
      - '@fluentui/react-internal!ICalloutProps#shouldUpdateWhenHidden:member'
      - '@fluentui/react-internal!ICalloutProps#style:member'
      - '@fluentui/react-internal!ICalloutProps#styles:member'
      - '@fluentui/react-internal!ICalloutProps#target:member'
      - '@fluentui/react-internal!ICalloutProps#theme:member'
  - uid: '@fluentui/react-internal!ICalloutProps#alignTargetEdge:member'
    summary: >-
      If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds,
      thus making sure the element aligns perfectly with target's alignment edge
    name: alignTargetEdge
    fullName: alignTargetEdge
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignTargetEdge?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#ariaDescribedBy:member'
    summary: Defines the element id referencing the element containing the description for the callout.
    name: ariaDescribedBy
    fullName: ariaDescribedBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-internal!ICalloutProps#ariaLabel:member'
    summary: Accessible label text for callout.
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-internal!ICalloutProps#ariaLabelledBy:member'
    summary: Defines the element id referencing the element containing label text for callout.
    name: ariaLabelledBy
    fullName: ariaLabelledBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelledBy?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-internal!ICalloutProps#backgroundColor:member'
    summary: 'The background color of the Callout in hex format ie. \#ffffff.'
    name: backgroundColor
    fullName: backgroundColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'backgroundColor?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-internal!ICalloutProps#beakWidth:member'
    summary: The width of the beak.
    name: beakWidth
    fullName: beakWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'beakWidth?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!ICalloutProps#bounds:member'
    summary: The bounding rectangle (or callback that returns a rectangle) for which the contextual menu can appear in.
    name: bounds
    fullName: bounds
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bounds?: IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined);'
      return:
        type:
          - 'IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined)'
  - uid: '@fluentui/react-internal!ICalloutProps#calloutMaxHeight:member'
    summary: Set max height of callout When not set the callout will expand with contents up to the bottom of the screen
    name: calloutMaxHeight
    fullName: calloutMaxHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calloutMaxHeight?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!ICalloutProps#calloutMaxWidth:member'
    summary: 'Custom width for callout including borders. If value is 0, no width is applied.'
    name: calloutMaxWidth
    fullName: calloutMaxWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calloutMaxWidth?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!ICalloutProps#calloutWidth:member'
    summary: 'Custom width for callout including borders. If value is 0, no width is applied.'
    name: calloutWidth
    fullName: calloutWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calloutWidth?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!ICalloutProps#className:member'
    summary: CSS class to apply to the callout.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-internal!ICalloutProps#coverTarget:member'
    summary: >-
      If true the position returned will have the menu element cover the target. If false then it will position next to
      the target;
    name: coverTarget
    fullName: coverTarget
    langs:
      - typeScript
    type: property
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#directionalHint:member'
    summary: How the element should be positioned
    name: directionalHint
    fullName: directionalHint
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: '@fluentui/react-internal!ICalloutProps#directionalHintFixed:member'
    summary: >-
      If true the position will not change sides in an attempt to fit the callout within bounds. It will still attempt
      to align it to whatever bounds are given.
    name: directionalHintFixed
    fullName: directionalHintFixed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#directionalHintForRTL:member'
    summary: >-
      How the element should be positioned in RTL layouts. If not specified, a mirror of the `directionalHint` alignment
      edge will be used instead. This means that `DirectionalHint.BottomLeft` will change to
      `DirectionalHint.BottomRight` but `DirectionalHint.LeftAuto` will not change.
    name: directionalHintForRTL
    fullName: directionalHintForRTL
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: '@fluentui/react-internal!ICalloutProps#doNotLayer:member'
    summary: If true do not render on a new layer. If false render on a new layer.
    name: doNotLayer
    fullName: doNotLayer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doNotLayer?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#finalHeight:member'
    summary: >-
      Specify the final height of the content. To be used when expanding the content dynamically so that callout can
      adjust its position.
    name: finalHeight
    fullName: finalHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'finalHeight?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!ICalloutProps#gapSpace:member'
    summary: The gap between the Callout and the target
    name: gapSpace
    fullName: gapSpace
    langs:
      - typeScript
    type: property
    syntax:
      content: 'gapSpace?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!ICalloutProps#hidden:member'
    summary: >-
      If specified, renders the Callout in a hidden state. Use this flag, rather than rendering a callout conditionally
      based on visibility, to improve rendering performance when it becomes visible. Note: When callout is hidden its
      content will not be rendered. It will only render once the callout is visible.
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hidden?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#hideOverflow:member'
    summary: >-
      Manually set OverflowYHidden style prop to true on calloutMain element A variety of callout load animations will
      need this to hide the scollbar that can appear
    name: hideOverflow
    fullName: hideOverflow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hideOverflow?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#isBeakVisible:member'
    summary: If true then the beak is visible. If false it will not be shown.
    name: isBeakVisible
    fullName: isBeakVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isBeakVisible?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#layerProps:member'
    summary: Optional props to pass to the Layer component hosting the panel.
    name: layerProps
    fullName: layerProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'layerProps?: ILayerProps;'
      return:
        type:
          - ILayerProps
  - uid: '@fluentui/react-internal!ICalloutProps#minPagePadding:member'
    summary: The minimum distance the callout will be away from the edge of the screen.
    name: minPagePadding
    fullName: minPagePadding
    langs:
      - typeScript
    type: property
    syntax:
      content: 'minPagePadding?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!ICalloutProps#onDismiss:member'
    summary: Callback when the Callout tries to close.
    name: onDismiss
    fullName: onDismiss
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDismiss?: (ev?: Event | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;'
      return:
        type:
          - '(ev?: Event | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void'
  - uid: '@fluentui/react-internal!ICalloutProps#onLayerMounted:member'
    summary: Optional callback when the layer content has mounted.
    name: onLayerMounted
    fullName: onLayerMounted
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onLayerMounted?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-internal!ICalloutProps#onPositioned:member'
    summary: Optional callback that is called once the callout has been correctly positioned.
    name: onPositioned
    fullName: onPositioned
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onPositioned?: (positions?: ICalloutPositionedInfo) => void;'
      return:
        type:
          - '(positions?: ICalloutPositionedInfo) => void'
  - uid: '@fluentui/react-internal!ICalloutProps#onRestoreFocus:member'
    summary: >-
      Called when the component is unmounting, and focus needs to be restored. Argument passed down contains two
      variables, the element that the underlying popup believes focus should go to \* and whether or not the popup
      currently contains focus. If this is provided, focus will not be restored automatically, you'll need to call
      originalElement.focus()
    name: onRestoreFocus
    fullName: onRestoreFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        onRestoreFocus?: (options: {
                originalElement?: HTMLElement | Window;
                containsFocus: boolean;
                documentContainsFocus: boolean;
            }) => void;
      return:
        type:
          - |-
            (options: {
                    originalElement?: HTMLElement | Window;
                    containsFocus: boolean;
                    documentContainsFocus: boolean;
                }) => void
  - uid: '@fluentui/react-internal!ICalloutProps#onScroll:member'
    summary: Callback when the Callout body is scrolled.
    name: onScroll
    fullName: onScroll
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onScroll?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-internal!ICalloutProps#preventDismissOnEvent:member'
    summary: >-
      If defined, then takes priority over preventDismissOnLostFocus, preventDismissOnResize, and
      preventDismissOnScroll. If it returns true, then callout will not dismiss for this event. If not defined or
      returns false, callout can dismiss for this event.
    name: preventDismissOnEvent
    fullName: preventDismissOnEvent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventDismissOnEvent?: (ev: Event | React.FocusEvent | React.KeyboardEvent | React.MouseEvent) => boolean;'
      return:
        type:
          - '(ev: Event | React.FocusEvent | React.KeyboardEvent | React.MouseEvent) => boolean'
  - uid: '@fluentui/react-internal!ICalloutProps#preventDismissOnLostFocus:member'
    summary: If true then the callout will not dismiss when it loses focus
    deprecated:
      content: use preventDismissOnEvent callback instead
    name: preventDismissOnLostFocus
    fullName: preventDismissOnLostFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventDismissOnLostFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#preventDismissOnResize:member'
    summary: If true then the callout will not dismiss on resize
    deprecated:
      content: use preventDismissOnEvent callback instead
    name: preventDismissOnResize
    fullName: preventDismissOnResize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventDismissOnResize?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#preventDismissOnScroll:member'
    summary: If true then the callout will not dismiss on scroll
    deprecated:
      content: use preventDismissOnEvent callback instead
    name: preventDismissOnScroll
    fullName: preventDismissOnScroll
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventDismissOnScroll?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#role:member'
    summary: 'Aria role assigned to the callout (Eg. dialog, alertdialog).'
    name: role
    fullName: role
    langs:
      - typeScript
    type: property
    syntax:
      content: 'role?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-internal!ICalloutProps#setInitialFocus:member'
    summary: >-
      If true then the callout will attempt to focus the first focusable element that it contains. If it doesn't find an
      element, no focus will be set and the method will return false. This means that it's the contents responsibility
      to either set focus or have focusable items.
    name: setInitialFocus
    fullName: setInitialFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'setInitialFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#shouldDismissOnWindowFocus:member'
    summary: If true then the callout will dismiss when the window gets focus
    name: shouldDismissOnWindowFocus
    fullName: shouldDismissOnWindowFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldDismissOnWindowFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#shouldRestoreFocus:member'
    summary: >-
      If true, when this component is unmounted, focus will be restored to the element that had focus when the component
      first mounted.
    deprecated:
      content: use onRestoreFocus callback instead
    name: shouldRestoreFocus
    fullName: shouldRestoreFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldRestoreFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#shouldUpdateWhenHidden:member'
    summary: >-
      If true, the component will be updated even when hidden=true. Note that this would consume resources to update
      even though nothing is being shown to the user. This might be helpful though if your updates are small and you
      want the callout to be revealed fast to the user when hidden is set to false.
    name: shouldUpdateWhenHidden
    fullName: shouldUpdateWhenHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldUpdateWhenHidden?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!ICalloutProps#style:member'
    summary: >-
      CSS style to apply to the callout.


      If you set `overflowY` in this object, it provides a performance optimization by preventing Popup (underlying
      component of Callout) from calculating whether it needs a scroll bar.
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style?: React.CSSProperties;'
      return:
        type:
          - React.CSSProperties
  - uid: '@fluentui/react-internal!ICalloutProps#styles:member'
    summary: Optional styles for the component.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>'
  - uid: '@fluentui/react-internal!ICalloutProps#target:member'
    summary: >-
      The target that the Callout should try to position itself based on. It can be either an Element a querySelector
      string of a valid Element or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.
    name: target
    fullName: target
    langs:
      - typeScript
    type: property
    syntax:
      content: 'target?: Target;'
      return:
        type:
          - Target
  - uid: '@fluentui/react-internal!ICalloutProps#theme:member'
    summary: Optional theme for component
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@fluentui/theme!ITheme:interface'
