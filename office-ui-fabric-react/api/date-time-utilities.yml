### YamlMime:TSPackage
uid: '@fluentui/date-time-utilities!'
name: '@fluentui/date-time-utilities'
type: package
summary: ''
enums:
  - '@fluentui/date-time-utilities!DateRangeType:enum'
  - '@fluentui/date-time-utilities!DayOfWeek:enum'
  - '@fluentui/date-time-utilities!FirstWeekOfYear:enum'
  - '@fluentui/date-time-utilities!MonthOfYear:enum'
interfaces:
  - '@fluentui/date-time-utilities!IAvailableDateOptions:interface'
  - '@fluentui/date-time-utilities!ICalendarStrings:interface'
  - '@fluentui/date-time-utilities!IDateFormatting:interface'
  - '@fluentui/date-time-utilities!IDateGridStrings:interface'
  - '@fluentui/date-time-utilities!IDay:interface'
  - '@fluentui/date-time-utilities!IDayGridOptions:interface'
  - '@fluentui/date-time-utilities!IRestrictedDatesOptions:interface'
functions:
  - name: 'addDays(date, days)'
    uid: '@fluentui/date-time-utilities!addDays:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Returns a date offset from the given date by the specified number of days.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function addDays(date: Date, days: number): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
        - id: days
          description: The number of days to offset. 'days' can be negative.
          type: number
      return:
        type: Date
        description: >-
          A new Date object offset from the origin date by the given number of
          days
  - name: 'addMonths(date, months)'
    uid: '@fluentui/date-time-utilities!addMonths:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: >-
      Returns a date offset from the given date by the specified number of
      months. The method tries to preserve the day-of-month; however, if the new
      month does not have enough days to contain the original day-of-month,
      we'll use the last day of the new month.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function addMonths(date: Date, months: number): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
        - id: months
          description: The number of months to offset. 'months' can be negative.
          type: number
      return:
        type: Date
        description: >-
          A new Date object offset from the origin date by the given number of
          months
  - name: 'addWeeks(date, weeks)'
    uid: '@fluentui/date-time-utilities!addWeeks:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: >-
      Returns a date offset from the given date by the specified number of
      weeks.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function addWeeks(date: Date, weeks: number): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
        - id: weeks
          description: The number of weeks to offset. 'weeks' can be negative.
          type: number
      return:
        type: Date
        description: >-
          A new Date object offset from the origin date by the given number of
          weeks
  - name: 'addYears(date, years)'
    uid: '@fluentui/date-time-utilities!addYears:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: >-
      Returns a date offset from the given date by the specified number of
      years. The method tries to preserve the day-of-month; however, if the new
      month does not have enough days to contain the original day-of-month,
      we'll use the last day of the new month.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function addYears(date: Date, years: number): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
        - id: years
          description: The number of years to offset. 'years' can be negative.
          type: number
      return:
        type: Date
        description: >-
          A new Date object offset from the origin date by the given number of
          years
  - name: 'compareDatePart(date1, date2)'
    uid: '@fluentui/date-time-utilities!compareDatePart:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Compare the date parts of two dates
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function compareDatePart(date1: Date, date2: Date):
        Number;
      parameters:
        - id: date1
          description: The first date to compare
          type: Date
        - id: date2
          description: The second date to compare
          type: Date
      return:
        type: Number
        description: >-
          A negative value if date1 is earlier than date2, 0 if the dates are
          equal, or a positive value if date1 is later than date2.
  - name: 'compareDates(date1, date2)'
    uid: '@fluentui/date-time-utilities!compareDates:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: >-
      Compares two dates, and returns true if the two dates (not accounting for
      time-of-day) are equal.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function compareDates(date1: Date, date2: Date): boolean;'
      parameters:
        - id: date1
          description: ''
          type: Date
        - id: date2
          description: ''
          type: Date
      return:
        type: boolean
        description: >-
          True if the two dates represent the same date (regardless of
          time-of-day), false otherwise.
  - name: getDatePartHashValue(date)
    uid: '@fluentui/date-time-utilities!getDatePartHashValue:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Helper function to assist in date comparisons
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getDatePartHashValue(date: Date): number;'
      parameters:
        - id: date
          description: ''
          type: Date
      return:
        type: number
        description: ''
  - name: >-
      getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays,
      daysToSelectInDayView)
    uid: '@fluentui/date-time-utilities!getDateRangeArray:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: >-
      Gets the date range array including the specified date. The date range
      array is calculated as the list of dates accounting for the specified
      first day of the week and date range type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getDateRangeArray(date: Date, dateRangeType:
        DateRangeType, firstDayOfWeek: DayOfWeek, workWeekDays?: DayOfWeek[],
        daysToSelectInDayView?: number): Date[];
      parameters:
        - id: date
          description: The input date
          type: Date
        - id: dateRangeType
          description: 'The desired date range type, i.e., day, week, month, etc.'
          type: '<xref uid="@fluentui/date-time-utilities!DateRangeType:enum" />'
        - id: firstDayOfWeek
          description: The first day of the week.
          type: '<xref uid="@fluentui/date-time-utilities!DayOfWeek:enum" />'
        - id: workWeekDays
          description: >-
            The allowed days in work week. If not provided, assumes all days are
            allowed.
          type: 'DayOfWeek[]'
        - id: daysToSelectInDayView
          description: >-
            The number of days to include when using dateRangeType ===
            DateRangeType.Day for multiday view. Defaults to 1
          type: number
      return:
        type: 'Date[]'
        description: >-
          An array of dates representing the date range containing the specified
          date.
  - name: 'getEndDateOfWeek(date, firstDayOfWeek)'
    uid: '@fluentui/date-time-utilities!getEndDateOfWeek:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: >-
      Gets the date for the last day of the week based on the given date
      assuming the specified first day of the week.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getEndDateOfWeek(date: Date, firstDayOfWeek:
        DayOfWeek): Date;
      parameters:
        - id: date
          description: The date to find the beginning of the week date for.
          type: Date
        - id: firstDayOfWeek
          description: ''
          type: '<xref uid="@fluentui/date-time-utilities!DayOfWeek:enum" />'
      return:
        type: Date
        description: >-
          A new date object representing the first day of the week containing
          the input date.
  - name: getMonthEnd(date)
    uid: '@fluentui/date-time-utilities!getMonthEnd:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Returns a date that is the last day of the month of the provided date.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getMonthEnd(date: Date): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
      return:
        type: Date
        description: A new Date object with the day set to the last day of the month.
  - name: getMonthStart(date)
    uid: '@fluentui/date-time-utilities!getMonthStart:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Returns a date that is the first day of the month of the provided date.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getMonthStart(date: Date): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
      return:
        type: Date
        description: A new Date object with the day set to the first day of the month.
  - name: 'getStartDateOfWeek(date, firstDayOfWeek)'
    uid: '@fluentui/date-time-utilities!getStartDateOfWeek:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: >-
      Gets the date for the first day of the week based on the given date
      assuming the specified first day of the week.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getStartDateOfWeek(date: Date, firstDayOfWeek:
        DayOfWeek): Date;
      parameters:
        - id: date
          description: The date to find the beginning of the week date for.
          type: Date
        - id: firstDayOfWeek
          description: ''
          type: '<xref uid="@fluentui/date-time-utilities!DayOfWeek:enum" />'
      return:
        type: Date
        description: >-
          A new date object representing the first day of the week containing
          the input date.
  - name: 'getWeekNumber(date, firstDayOfWeek, firstWeekOfYear)'
    uid: '@fluentui/date-time-utilities!getWeekNumber:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Returns the week number for a date. Week numbers are 1 - 52 (53) in a year
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getWeekNumber(date: Date, firstDayOfWeek:
        DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number;
      parameters:
        - id: date
          description: A date to find the week number for.
          type: Date
        - id: firstDayOfWeek
          description: 'The first day of the week (0-6, Sunday = 0)'
          type: '<xref uid="@fluentui/date-time-utilities!DayOfWeek:enum" />'
        - id: firstWeekOfYear
          description: The first week of the year (1-2)
          type: '<xref uid="@fluentui/date-time-utilities!FirstWeekOfYear:enum" />'
      return:
        type: number
        description: The week's number in the year.
  - name: >-
      getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear,
      navigatedDate)
    uid: '@fluentui/date-time-utilities!getWeekNumbersInMonth:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Returns the week number for a date. Week numbers are 1 - 52 (53) in a year
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getWeekNumbersInMonth(weeksInMonth: number,
        firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear,
        navigatedDate: Date): number[];
      parameters:
        - id: weeksInMonth
          description: ''
          type: number
        - id: firstDayOfWeek
          description: 'The first day of the week (0-6, Sunday = 0)'
          type: '<xref uid="@fluentui/date-time-utilities!DayOfWeek:enum" />'
        - id: firstWeekOfYear
          description: The first week of the year (1-2)
          type: '<xref uid="@fluentui/date-time-utilities!FirstWeekOfYear:enum" />'
        - id: navigatedDate
          description: A date to find the week number for.
          type: Date
      return:
        type: 'number[]'
        description: The weeks number array for the current month.
  - name: getYearEnd(date)
    uid: '@fluentui/date-time-utilities!getYearEnd:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Returns a date that is the last day of the year of the provided date.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getYearEnd(date: Date): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
      return:
        type: Date
        description: A new Date object with the day set to the last day of the year.
  - name: getYearStart(date)
    uid: '@fluentui/date-time-utilities!getYearStart:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Returns a date that is the first day of the year of the provided date.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getYearStart(date: Date): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
      return:
        type: Date
        description: A new Date object with the day set to the first day of the year.
  - name: 'isInDateRangeArray(date, dateRange)'
    uid: '@fluentui/date-time-utilities!isInDateRangeArray:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: Checks whether the specified date is in the given date range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function isInDateRangeArray(date: Date, dateRange:
        Date[]): boolean;
      parameters:
        - id: date
          description: The origin date
          type: Date
        - id: dateRange
          description: An array of dates to do the lookup on
          type: 'Date[]'
      return:
        type: boolean
        description: >-
          True if the date matches one of the dates in the specified array,
          false otherwise.
  - name: 'setMonth(date, month)'
    uid: '@fluentui/date-time-utilities!setMonth:function(1)'
    package: '@fluentui/date-time-utilities!'
    summary: >-
      Returns a date that is a copy of the given date, aside from the month
      changing to the given month. The method tries to preserve the
      day-of-month; however, if the new month does not have enough days to
      contain the original day-of-month, we'll use the last day of the new
      month.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function setMonth(date: Date, month: number): Date;'
      parameters:
        - id: date
          description: The origin date
          type: Date
        - id: month
          description: The 0-based index of the month to set on the date.
          type: number
      return:
        type: Date
        description: A new Date object with the given month set.
