### YamlMime:TSType
name: IAutofillProps
uid: '@fluentui/react-internal!IAutofillProps:interface'
package: '@fluentui/react-internal!'
fullName: IAutofillProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: componentRef
    uid: '@fluentui/react-internal!IAutofillProps#componentRef:member'
    package: '@fluentui/react-internal!'
    fullName: componentRef
    summary: Gets the component ref.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IAutofill>;'
      return:
        type: IRefObject&lt;IAutofill&gt;
  - name: defaultVisibleValue
    uid: '@fluentui/react-internal!IAutofillProps#defaultVisibleValue:member'
    package: '@fluentui/react-internal!'
    fullName: defaultVisibleValue
    summary: >-
      The default value to be visible. This is different from placeholder
      because it actually sets the current value of the picker. Note: Updates to
      this prop will not be respected.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultVisibleValue?: string;'
      return:
        type: string
  - name: enableAutofillOnKeyPress
    uid: '@fluentui/react-internal!IAutofillProps#enableAutofillOnKeyPress:member'
    package: '@fluentui/react-internal!'
    fullName: enableAutofillOnKeyPress
    summary: >-
      When the user uses left arrow, right arrow, clicks, or deletes text,
      autofill is disabled since the user has taken control. It is automatically
      re-enabled when the user enters text and the cursor is at the end of the
      text in the input box. This prop can be used to override the default list
      of key presses that will re-enable autofill.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableAutofillOnKeyPress?: KeyCodes[];'
      return:
        type: 'KeyCodes[]'
  - name: onInputChange
    uid: '@fluentui/react-internal!IAutofillProps#onInputChange:member'
    package: '@fluentui/react-internal!'
    fullName: onInputChange
    summary: >-
      A callback used to modify the input string. Do not use this to return a
      string anymore. Instead pass in value like you would any other controlled
      component. Called before the state has been updated.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onInputChange?: (value: string, composing: boolean) => string | void;'
      return:
        type: '(value: string, composing: boolean) =&gt; string | void'
  - name: onInputValueChange
    uid: '@fluentui/react-internal!IAutofillProps#onInputValueChange:member'
    package: '@fluentui/react-internal!'
    fullName: onInputValueChange
    summary: >-
      A callback for when the current input value changes. Called after the
      state has been changed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onInputValueChange?: (newValue?: string, composing?: boolean) => void;'
      return:
        type: '(newValue?: string, composing?: boolean) =&gt; void'
  - name: preventValueSelection
    uid: '@fluentui/react-internal!IAutofillProps#preventValueSelection:member'
    package: '@fluentui/react-internal!'
    fullName: preventValueSelection
    summary: >-
      Should the value of the input be selected? True if we're focused on our
      input, false otherwise. We need to explicitly not select the text in the
      autofill if we are no longer focused. In IE11, selecting an input will
      also focus the input, causing other element's focus to be stolen.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'preventValueSelection?: boolean;'
      return:
        type: boolean
  - name: shouldSelectFullInputValueInComponentDidUpdate
    uid: >-
      @fluentui/react-internal!IAutofillProps#shouldSelectFullInputValueInComponentDidUpdate:member
    package: '@fluentui/react-internal!'
    fullName: shouldSelectFullInputValueInComponentDidUpdate
    summary: >-
      Handler for checking if the full value of the input should be selected in
      `componentDidUpdate`<!-- -->. Returns whether the full value of the input
      should be selected.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldSelectFullInputValueInComponentDidUpdate?: () => boolean;'
      return:
        type: () =&gt; boolean
  - name: suggestedDisplayValue
    uid: '@fluentui/react-internal!IAutofillProps#suggestedDisplayValue:member'
    package: '@fluentui/react-internal!'
    fullName: suggestedDisplayValue
    summary: The suggested autofill value that will display.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'suggestedDisplayValue?: string;'
      return:
        type: string
  - name: updateValueInWillReceiveProps
    uid: >-
      @fluentui/react-internal!IAutofillProps#updateValueInWillReceiveProps:member
    package: '@fluentui/react-internal!'
    fullName: updateValueInWillReceiveProps
    summary: >-
      Handler for checking and updating the value if needed in
      `componentWillReceiveProps`<!-- -->. Returns the updated value to set, if
      needed.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: >-
      use standard input `value` prop instead if the autofill should act like a
      controlled component
    syntax:
      content: 'updateValueInWillReceiveProps?: () => string | null;'
      return:
        type: () =&gt; string | null
extends: 'React.InputHTMLAttributes&lt;HTMLInputElement | Autofill&gt; '
