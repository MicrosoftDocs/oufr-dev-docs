### YamlMime:TSType
name: Selection
uid: '@fluentui/utilities!Selection:class'
package: '@fluentui/utilities!'
fullName: Selection
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: (constructor)(options)
    uid: '@fluentui/utilities!Selection:constructor(1)'
    package: '@fluentui/utilities!'
    fullName: (constructor)(options)
    summary: >-
      Create a new Selection. If `TItem` does not have a `key` property, you
      must provide an options object with a `getKey` implementation. Providing
      options is optional otherwise. (At most one `options` object is accepted.)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        constructor(...options: TItem extends IObjectWithKey ? [] |
        [ISelectionOptions<TItem>] :
        [ISelectionOptionsWithRequiredGetKey<TItem>]);
      parameters:
        - id: options
          description: ''
          type: >-
            TItem extends IObjectWithKey ? [] | [ISelectionOptions&lt;TItem&gt;]
            : [ISelectionOptionsWithRequiredGetKey&lt;TItem&gt;]
properties:
  - name: count
    uid: '@fluentui/utilities!Selection#count:member'
    package: '@fluentui/utilities!'
    fullName: count
    summary: Number of items selected. Do not modify.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'count: number;'
      return:
        type: number
  - name: mode
    uid: '@fluentui/utilities!Selection#mode:member'
    package: '@fluentui/utilities!'
    fullName: mode
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly mode: SelectionMode;'
      return:
        type: '<xref uid="@fluentui/utilities!SelectionMode:enum" />'
methods:
  - name: 'canSelectItem(item, index)'
    uid: '@fluentui/utilities!Selection#canSelectItem:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'canSelectItem(item, index)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'canSelectItem(item: TItem, index?: number): boolean;'
      parameters:
        - id: item
          description: ''
          type: TItem
        - id: index
          description: ''
          type: number
      return:
        type: boolean
        description: ''
  - name: getItems()
    uid: '@fluentui/utilities!Selection#getItems:member(1)'
    package: '@fluentui/utilities!'
    fullName: getItems()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItems(): TItem[];'
      return:
        type: 'TItem[]'
        description: ''
  - name: 'getKey(item, index)'
    uid: '@fluentui/utilities!Selection#getKey:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'getKey(item, index)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getKey(item: TItem, index?: number): string;'
      parameters:
        - id: item
          description: ''
          type: TItem
        - id: index
          description: ''
          type: number
      return:
        type: string
        description: ''
  - name: getSelectedCount()
    uid: '@fluentui/utilities!Selection#getSelectedCount:member(1)'
    package: '@fluentui/utilities!'
    fullName: getSelectedCount()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedCount(): number;'
      return:
        type: number
        description: ''
  - name: getSelectedIndices()
    uid: '@fluentui/utilities!Selection#getSelectedIndices:member(1)'
    package: '@fluentui/utilities!'
    fullName: getSelectedIndices()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedIndices(): number[];'
      return:
        type: 'number[]'
        description: ''
  - name: getSelection()
    uid: '@fluentui/utilities!Selection#getSelection:member(1)'
    package: '@fluentui/utilities!'
    fullName: getSelection()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelection(): TItem[];'
      return:
        type: 'TItem[]'
        description: ''
  - name: isAllSelected()
    uid: '@fluentui/utilities!Selection#isAllSelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: isAllSelected()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isAllSelected(): boolean;'
      return:
        type: boolean
        description: ''
  - name: isIndexSelected(index)
    uid: '@fluentui/utilities!Selection#isIndexSelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: isIndexSelected(index)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isIndexSelected(index: number): boolean;'
      parameters:
        - id: index
          description: ''
          type: number
      return:
        type: boolean
        description: ''
  - name: isKeySelected(key)
    uid: '@fluentui/utilities!Selection#isKeySelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: isKeySelected(key)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isKeySelected(key: string): boolean;'
      parameters:
        - id: key
          description: ''
          type: string
      return:
        type: boolean
        description: ''
  - name: isModal()
    uid: '@fluentui/utilities!Selection#isModal:member(1)'
    package: '@fluentui/utilities!'
    fullName: isModal()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isModal(): boolean;'
      return:
        type: boolean
        description: ''
  - name: 'isRangeSelected(fromIndex, count)'
    uid: '@fluentui/utilities!Selection#isRangeSelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'isRangeSelected(fromIndex, count)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isRangeSelected(fromIndex: number, count: number): boolean;'
      parameters:
        - id: fromIndex
          description: ''
          type: number
        - id: count
          description: ''
          type: number
      return:
        type: boolean
        description: ''
  - name: 'selectToIndex(index, clearSelection)'
    uid: '@fluentui/utilities!Selection#selectToIndex:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'selectToIndex(index, clearSelection)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'selectToIndex(index: number, clearSelection?: boolean): void;'
      parameters:
        - id: index
          description: ''
          type: number
        - id: clearSelection
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: 'selectToKey(key, clearSelection)'
    uid: '@fluentui/utilities!Selection#selectToKey:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'selectToKey(key, clearSelection)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'selectToKey(key: string, clearSelection?: boolean): void;'
      parameters:
        - id: key
          description: ''
          type: string
        - id: clearSelection
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setAllSelected(isAllSelected)
    uid: '@fluentui/utilities!Selection#setAllSelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: setAllSelected(isAllSelected)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setAllSelected(isAllSelected: boolean): void;'
      parameters:
        - id: isAllSelected
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: 'setChangeEvents(isEnabled, suppressChange)'
    uid: '@fluentui/utilities!Selection#setChangeEvents:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'setChangeEvents(isEnabled, suppressChange)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;'
      parameters:
        - id: isEnabled
          description: ''
          type: boolean
        - id: suppressChange
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: 'setIndexSelected(index, isSelected, shouldAnchor)'
    uid: '@fluentui/utilities!Selection#setIndexSelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'setIndexSelected(index, isSelected, shouldAnchor)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        setIndexSelected(index: number, isSelected: boolean, shouldAnchor:
        boolean): void;
      parameters:
        - id: index
          description: ''
          type: number
        - id: isSelected
          description: ''
          type: boolean
        - id: shouldAnchor
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: 'setItems(items, shouldClear)'
    uid: '@fluentui/utilities!Selection#setItems:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'setItems(items, shouldClear)'
    summary: >-
      Selection needs the items, call this method to set them. If the set of
      items is the same, this will re-evaluate selection and index maps.
      Otherwise, shouldClear should be set to true, so that selection is
      cleared.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setItems(items: TItem[], shouldClear?: boolean): void;'
      parameters:
        - id: items
          description: ''
          type: 'TItem[]'
        - id: shouldClear
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: 'setKeySelected(key, isSelected, shouldAnchor)'
    uid: '@fluentui/utilities!Selection#setKeySelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'setKeySelected(key, isSelected, shouldAnchor)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean):
        void;
      parameters:
        - id: key
          description: ''
          type: string
        - id: isSelected
          description: ''
          type: boolean
        - id: shouldAnchor
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setModal(isModal)
    uid: '@fluentui/utilities!Selection#setModal:member(1)'
    package: '@fluentui/utilities!'
    fullName: setModal(isModal)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setModal(isModal: boolean): void;'
      parameters:
        - id: isModal
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: toggleAllSelected()
    uid: '@fluentui/utilities!Selection#toggleAllSelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: toggleAllSelected()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toggleAllSelected(): void;'
      return:
        type: void
        description: ''
  - name: toggleIndexSelected(index)
    uid: '@fluentui/utilities!Selection#toggleIndexSelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: toggleIndexSelected(index)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toggleIndexSelected(index: number): void;'
      parameters:
        - id: index
          description: ''
          type: number
      return:
        type: void
        description: ''
  - name: toggleKeySelected(key)
    uid: '@fluentui/utilities!Selection#toggleKeySelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: toggleKeySelected(key)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toggleKeySelected(key: string): void;'
      parameters:
        - id: key
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: 'toggleRangeSelected(fromIndex, count)'
    uid: '@fluentui/utilities!Selection#toggleRangeSelected:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'toggleRangeSelected(fromIndex, count)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toggleRangeSelected(fromIndex: number, count: number): void;'
      parameters:
        - id: fromIndex
          description: ''
          type: number
        - id: count
          description: ''
          type: number
      return:
        type: void
        description: ''
