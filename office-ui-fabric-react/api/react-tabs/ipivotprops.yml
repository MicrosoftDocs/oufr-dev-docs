### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-tabs!IPivotProps:interface'
    name: IPivotProps
    fullName: IPivotProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'React.HTMLAttributes<HTMLDivElement> '
    package: '@fluentui/react-tabs!'
    children:
      - '@fluentui/react-tabs!IPivotProps#className:member'
      - '@fluentui/react-tabs!IPivotProps#componentRef:member'
      - '@fluentui/react-tabs!IPivotProps#defaultSelectedKey:member'
      - '@fluentui/react-tabs!IPivotProps#getTabId:member'
      - '@fluentui/react-tabs!IPivotProps#headersOnly:member'
      - '@fluentui/react-tabs!IPivotProps#linkFormat:member'
      - '@fluentui/react-tabs!IPivotProps#linkSize:member'
      - '@fluentui/react-tabs!IPivotProps#onLinkClick:member'
      - '@fluentui/react-tabs!IPivotProps#overflowBehavior:member'
      - '@fluentui/react-tabs!IPivotProps#selectedKey:member'
      - '@fluentui/react-tabs!IPivotProps#styles:member'
      - '@fluentui/react-tabs!IPivotProps#theme:member'
  - uid: '@fluentui/react-tabs!IPivotProps#className:member'
    summary: Additional css class to apply to the Pivot
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-tabs!IPivotProps#componentRef:member'
    summary: >-
      Optional callback to access the IPivot interface. Use this instead of ref for accessing the public methods and
      properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: React.RefObject<IPivot>;'
      return:
        type:
          - React.RefObject<IPivot>
  - uid: '@fluentui/react-tabs!IPivotProps#defaultSelectedKey:member'
    summary: >-
      Default selected key for the pivot. Only provide this if the pivot is an uncontrolled component; otherwise, use
      the `selectedKey` property.


      This property is also mutually exclusive with `defaultSelectedIndex`<!-- -->.
    name: defaultSelectedKey
    fullName: defaultSelectedKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'defaultSelectedKey?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-tabs!IPivotProps#getTabId:member'
    summary: >-
      Callback to customize how IDs are generated for each tab header. Useful if you're rendering content outside and
      need to connect aria-labelledby.
    name: getTabId
    fullName: getTabId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getTabId?: (itemKey: string, index: number) => string;'
      return:
        type:
          - '(itemKey: string, index: number) => string'
  - uid: '@fluentui/react-tabs!IPivotProps#headersOnly:member'
    summary: >-
      Whether to skip rendering the tabpanel with the content of the selected tab. Use this prop if you plan to
      separately render the tab content and don't want to leave an empty tabpanel in the page that may confuse Screen
      Readers.
    name: headersOnly
    fullName: headersOnly
    langs:
      - typeScript
    type: property
    syntax:
      content: 'headersOnly?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-tabs!IPivotProps#linkFormat:member'
    summary: 'Link format (links, tabs)'
    name: linkFormat
    fullName: linkFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'linkFormat?: PivotLinkFormatType;'
      return:
        type:
          - PivotLinkFormatType
  - uid: '@fluentui/react-tabs!IPivotProps#linkSize:member'
    summary: 'Link size (normal, large)'
    name: linkSize
    fullName: linkSize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'linkSize?: PivotLinkSizeType;'
      return:
        type:
          - PivotLinkSizeType
  - uid: '@fluentui/react-tabs!IPivotProps#onLinkClick:member'
    summary: Callback for when the selected pivot item is changed.
    name: onLinkClick
    fullName: onLinkClick
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onLinkClick?: (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void;'
      return:
        type:
          - '(item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void'
  - uid: '@fluentui/react-tabs!IPivotProps#overflowBehavior:member'
    summary: >-
      Overflow behavior when there is not enough room to display all of the links/tabs \* none: Pivot links will
      overflow the container and may not be visible \* menu: Display an overflow menu that contains the tabs that don't
      fit

       none
    name: overflowBehavior
    fullName: overflowBehavior
    langs:
      - typeScript
    type: property
    syntax:
      content: 'overflowBehavior?: ''none'' | ''menu'';'
      return:
        type:
          - '''none'' | ''menu'''
  - uid: '@fluentui/react-tabs!IPivotProps#selectedKey:member'
    summary: >-
      Key of the selected pivot item. Updating this will override the Pivot's selected item state. Only provide this if
      the pivot is a controlled component where you are maintaining the current state; otherwise, use
      `defaultSelectedKey`<!-- -->.
    name: selectedKey
    fullName: selectedKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectedKey?: string | null;'
      return:
        type:
          - string | null
  - uid: '@fluentui/react-tabs!IPivotProps#styles:member'
    summary: Call to provide customized styling that will layer on top of the variant rules.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles>'
  - uid: '@fluentui/react-tabs!IPivotProps#theme:member'
    summary: Theme provided by High-Order Component.
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@uifabric/styling!ITheme:interface'
