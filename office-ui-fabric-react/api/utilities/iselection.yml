### YamlMime:UniversalReference
items:
  - uid: '@fluentui/utilities!ISelection:interface'
    name: ISelection
    fullName: ISelection
    langs:
      - typeScript
    type: interface
    syntax:
      typeParameters:
        - id: TItem
    package: '@fluentui/utilities!'
    children:
      - '@fluentui/utilities!ISelection#canSelectItem:member'
      - '@fluentui/utilities!ISelection#count:member'
      - '@fluentui/utilities!ISelection#getItems:member(1)'
      - '@fluentui/utilities!ISelection#getSelectedCount:member(1)'
      - '@fluentui/utilities!ISelection#getSelectedIndices:member(1)'
      - '@fluentui/utilities!ISelection#getSelection:member(1)'
      - '@fluentui/utilities!ISelection#isAllSelected:member(1)'
      - '@fluentui/utilities!ISelection#isIndexSelected:member(1)'
      - '@fluentui/utilities!ISelection#isKeySelected:member(1)'
      - '@fluentui/utilities!ISelection#isModal:member(1)'
      - '@fluentui/utilities!ISelection#isRangeSelected:member(1)'
      - '@fluentui/utilities!ISelection#mode:member'
      - '@fluentui/utilities!ISelection#selectToIndex:member(1)'
      - '@fluentui/utilities!ISelection#selectToKey:member(1)'
      - '@fluentui/utilities!ISelection#setAllSelected:member(1)'
      - '@fluentui/utilities!ISelection#setChangeEvents:member(1)'
      - '@fluentui/utilities!ISelection#setIndexSelected:member(1)'
      - '@fluentui/utilities!ISelection#setItems:member(1)'
      - '@fluentui/utilities!ISelection#setKeySelected:member(1)'
      - '@fluentui/utilities!ISelection#setModal:member(1)'
      - '@fluentui/utilities!ISelection#toggleAllSelected:member(1)'
      - '@fluentui/utilities!ISelection#toggleIndexSelected:member(1)'
      - '@fluentui/utilities!ISelection#toggleKeySelected:member(1)'
      - '@fluentui/utilities!ISelection#toggleRangeSelected:member(1)'
  - uid: '@fluentui/utilities!ISelection#canSelectItem:member'
    name: canSelectItem
    fullName: canSelectItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'canSelectItem: (item: TItem, index?: number) => boolean;'
      return:
        type:
          - '(item: TItem, index?: number) => boolean'
  - uid: '@fluentui/utilities!ISelection#count:member'
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'count: number;'
      return:
        type:
          - number
  - uid: '@fluentui/utilities!ISelection#getItems:member(1)'
    name: getItems()
    fullName: getItems()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItems(): TItem[];'
      return:
        type:
          - 'TItem[]'
        description: ''
  - uid: '@fluentui/utilities!ISelection#getSelectedCount:member(1)'
    name: getSelectedCount()
    fullName: getSelectedCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: '@fluentui/utilities!ISelection#getSelectedIndices:member(1)'
    name: getSelectedIndices()
    fullName: getSelectedIndices()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedIndices(): number[];'
      return:
        type:
          - 'number[]'
        description: ''
  - uid: '@fluentui/utilities!ISelection#getSelection:member(1)'
    name: getSelection()
    fullName: getSelection()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelection(): TItem[];'
      return:
        type:
          - 'TItem[]'
        description: ''
  - uid: '@fluentui/utilities!ISelection#isAllSelected:member(1)'
    name: isAllSelected()
    fullName: isAllSelected()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isAllSelected(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: '@fluentui/utilities!ISelection#isIndexSelected:member(1)'
    name: isIndexSelected(index)
    fullName: isIndexSelected(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isIndexSelected(index: number): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: index
          description: ''
          type:
            - number
  - uid: '@fluentui/utilities!ISelection#isKeySelected:member(1)'
    name: isKeySelected(key)
    fullName: isKeySelected(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isKeySelected(key: string): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - string
  - uid: '@fluentui/utilities!ISelection#isModal:member(1)'
    name: isModal()
    fullName: isModal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isModal?(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: '@fluentui/utilities!ISelection#isRangeSelected:member(1)'
    name: 'isRangeSelected(fromIndex, count)'
    fullName: 'isRangeSelected(fromIndex, count)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isRangeSelected(fromIndex: number, count: number): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: fromIndex
          description: ''
          type:
            - number
        - id: count
          description: ''
          type:
            - number
  - uid: '@fluentui/utilities!ISelection#mode:member'
    name: mode
    fullName: mode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mode: SelectionMode;'
      return:
        type:
          - '@fluentui/utilities!SelectionMode:enum'
  - uid: '@fluentui/utilities!ISelection#selectToIndex:member(1)'
    name: 'selectToIndex(index, clearSelection)'
    fullName: 'selectToIndex(index, clearSelection)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'selectToIndex(index: number, clearSelection?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: index
          description: ''
          type:
            - number
        - id: clearSelection
          description: ''
          type:
            - boolean
  - uid: '@fluentui/utilities!ISelection#selectToKey:member(1)'
    name: 'selectToKey(key, clearSelection)'
    fullName: 'selectToKey(key, clearSelection)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'selectToKey(key: string, clearSelection?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - string
        - id: clearSelection
          description: ''
          type:
            - boolean
  - uid: '@fluentui/utilities!ISelection#setAllSelected:member(1)'
    name: setAllSelected(isAllSelected)
    fullName: setAllSelected(isAllSelected)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAllSelected(isAllSelected: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: isAllSelected
          description: ''
          type:
            - boolean
  - uid: '@fluentui/utilities!ISelection#setChangeEvents:member(1)'
    name: 'setChangeEvents(isEnabled, suppressChange)'
    fullName: 'setChangeEvents(isEnabled, suppressChange)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: isEnabled
          description: ''
          type:
            - boolean
        - id: suppressChange
          description: ''
          type:
            - boolean
  - uid: '@fluentui/utilities!ISelection#setIndexSelected:member(1)'
    name: 'setIndexSelected(index, isSelected, shouldAnchor)'
    fullName: 'setIndexSelected(index, isSelected, shouldAnchor)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: index
          description: ''
          type:
            - number
        - id: isSelected
          description: ''
          type:
            - boolean
        - id: shouldAnchor
          description: ''
          type:
            - boolean
  - uid: '@fluentui/utilities!ISelection#setItems:member(1)'
    name: 'setItems(items, shouldClear)'
    fullName: 'setItems(items, shouldClear)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setItems(items: TItem[], shouldClear: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: items
          description: ''
          type:
            - 'TItem[]'
        - id: shouldClear
          description: ''
          type:
            - boolean
  - uid: '@fluentui/utilities!ISelection#setKeySelected:member(1)'
    name: 'setKeySelected(key, isSelected, shouldAnchor)'
    fullName: 'setKeySelected(key, isSelected, shouldAnchor)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - string
        - id: isSelected
          description: ''
          type:
            - boolean
        - id: shouldAnchor
          description: ''
          type:
            - boolean
  - uid: '@fluentui/utilities!ISelection#setModal:member(1)'
    name: setModal(isModal)
    fullName: setModal(isModal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setModal?(isModal: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: isModal
          description: ''
          type:
            - boolean
  - uid: '@fluentui/utilities!ISelection#toggleAllSelected:member(1)'
    name: toggleAllSelected()
    fullName: toggleAllSelected()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toggleAllSelected(): void;'
      return:
        type:
          - void
        description: ''
  - uid: '@fluentui/utilities!ISelection#toggleIndexSelected:member(1)'
    name: toggleIndexSelected(index)
    fullName: toggleIndexSelected(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toggleIndexSelected(index: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: index
          description: ''
          type:
            - number
  - uid: '@fluentui/utilities!ISelection#toggleKeySelected:member(1)'
    name: toggleKeySelected(key)
    fullName: toggleKeySelected(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toggleKeySelected(key: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - string
  - uid: '@fluentui/utilities!ISelection#toggleRangeSelected:member(1)'
    name: 'toggleRangeSelected(fromIndex, count)'
    fullName: 'toggleRangeSelected(fromIndex, count)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toggleRangeSelected(fromIndex: number, count: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fromIndex
          description: ''
          type:
            - number
        - id: count
          description: ''
          type:
            - number
