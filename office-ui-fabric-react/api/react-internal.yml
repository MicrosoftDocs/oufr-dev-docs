### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-internal!'
    name: '@fluentui/react-internal'
    fullName: '@fluentui/react-internal'
    langs:
      - typeScript
    type: package
    children:
      - '@fluentui/react-internal!ActivityItem:class'
      - '@fluentui/react-internal!AnnouncedBase:class'
      - '@fluentui/react-internal!Autofill:class'
      - '@fluentui/react-internal!BaseExtendedPeoplePicker:class'
      - '@fluentui/react-internal!BaseExtendedPicker:class'
      - '@fluentui/react-internal!BaseFloatingPeoplePicker:class'
      - '@fluentui/react-internal!BaseFloatingPicker:class'
      - '@fluentui/react-internal!BasePeoplePicker:class'
      - '@fluentui/react-internal!BasePeopleSelectedItemsList:class'
      - '@fluentui/react-internal!BasePicker:class'
      - '@fluentui/react-internal!BasePickerListBelow:class'
      - '@fluentui/react-internal!BaseSelectedItemsList:class'
      - '@fluentui/react-internal!BaseSlots:enum'
      - '@fluentui/react-internal!buildKeytipConfigMap:function(1)'
      - '@fluentui/react-internal!canAnyMenuItemsCheck:function(1)'
      - '@fluentui/react-internal!clamp:function(1)'
      - '@fluentui/react-internal!ColorPickerBase:class'
      - '@fluentui/react-internal!CommandBarBase:class'
      - '@fluentui/react-internal!CompactPeoplePickerBase:class'
      - '@fluentui/react-internal!constructKeytip:function(1)'
      - '@fluentui/react-internal!ContextualMenuItemBase:class'
      - '@fluentui/react-internal!ContextualMenuItemType:enum'
      - '@fluentui/react-internal!correctHex:function(1)'
      - '@fluentui/react-internal!correctHSV:function(1)'
      - '@fluentui/react-internal!correctRGB:function(1)'
      - '@fluentui/react-internal!createGenericItem:function(1)'
      - '@fluentui/react-internal!createItem:function(1)'
      - '@fluentui/react-internal!cssColor:function(1)'
      - '@fluentui/react-internal!DialogBase:class'
      - '@fluentui/react-internal!DialogContentBase:class'
      - '@fluentui/react-internal!DialogFooterBase:class'
      - '@fluentui/react-internal!DialogType:enum'
      - '@fluentui/react-internal!DragDropHelper:class'
      - '@fluentui/react-internal!ExpandingCardBase:class'
      - '@fluentui/react-internal!ExpandingCardMode:enum'
      - '@fluentui/react-internal!ExtendedPeoplePicker:class'
      - '@fluentui/react-internal!ExtendedSelectedItem:class'
      - '@fluentui/react-internal!FabricSlots:enum'
      - '@fluentui/react-internal!FacepileBase:class'
      - '@fluentui/react-internal!FloatingPeoplePicker:class'
      - '@fluentui/react-internal!getAllSelectedOptions:function(1)'
      - '@fluentui/react-internal!getAriaDescribedBy:function(1)'
      - '@fluentui/react-internal!getBackgroundShade:function(1)'
      - '@fluentui/react-internal!getBoundsFromTargetWindow:function(1)'
      - '@fluentui/react-internal!getColorFromHSV:function(1)'
      - '@fluentui/react-internal!getColorFromRGBA:function(1)'
      - '@fluentui/react-internal!getColorFromString:function(1)'
      - '@fluentui/react-internal!getContrastRatio:function(1)'
      - '@fluentui/react-internal!getFullColorString:function(1)'
      - '@fluentui/react-internal!getMaxHeight:function(1)'
      - '@fluentui/react-internal!getOppositeEdge:function(1)'
      - '@fluentui/react-internal!getPersonaInitialsColor:function(1)'
      - '@fluentui/react-internal!getShade:function(1)'
      - '@fluentui/react-internal!getSubmenuItems:function(1)'
      - '@fluentui/react-internal!HoverCardBase:class'
      - '@fluentui/react-internal!HoverCardType:enum'
      - '@fluentui/react-internal!hsl2hsv:function(1)'
      - '@fluentui/react-internal!hsl2rgb:function(1)'
      - '@fluentui/react-internal!hsv2hex:function(1)'
      - '@fluentui/react-internal!hsv2hsl:function(1)'
      - '@fluentui/react-internal!hsv2rgb:function(1)'
      - '@fluentui/react-internal!IAccessiblePopupProps:interface'
      - '@fluentui/react-internal!IActivityItemProps:interface'
      - '@fluentui/react-internal!IActivityItemStyles:interface'
      - '@fluentui/react-internal!IAnnouncedProps:interface'
      - '@fluentui/react-internal!IAnnouncedStyles:interface'
      - '@fluentui/react-internal!IAutofill:interface'
      - '@fluentui/react-internal!IAutofillProps:interface'
      - '@fluentui/react-internal!IAutofillState:interface'
      - '@fluentui/react-internal!IBaseExtendedPicker:interface'
      - '@fluentui/react-internal!IBaseExtendedPickerProps:interface'
      - '@fluentui/react-internal!IBaseExtendedPickerState:interface'
      - '@fluentui/react-internal!IBaseFloatingPicker:interface'
      - '@fluentui/react-internal!IBaseFloatingPickerProps:interface'
      - '@fluentui/react-internal!IBaseFloatingPickerState:interface'
      - '@fluentui/react-internal!IBasePicker:interface'
      - '@fluentui/react-internal!IBasePickerProps:interface'
      - '@fluentui/react-internal!IBasePickerState:interface'
      - '@fluentui/react-internal!IBasePickerStyles:interface'
      - '@fluentui/react-internal!IBasePickerSuggestionsProps:interface'
      - '@fluentui/react-internal!IBaseSelectedItemsList:interface'
      - '@fluentui/react-internal!IBaseSelectedItemsListProps:interface'
      - '@fluentui/react-internal!IBaseSelectedItemsListState:interface'
      - '@fluentui/react-internal!IButtonGrid:interface'
      - '@fluentui/react-internal!IButtonGridCellProps:interface'
      - '@fluentui/react-internal!IButtonGridProps:interface'
      - '@fluentui/react-internal!IButtonGridStyleProps:interface'
      - '@fluentui/react-internal!IButtonGridStyles:interface'
      - '@fluentui/react-internal!ICalloutBeakPositionedInfo:interface'
      - '@fluentui/react-internal!ICalloutContentStyleProps:interface'
      - '@fluentui/react-internal!ICalloutContentStyles:interface'
      - '@fluentui/react-internal!ICalloutPositionedInfo:interface'
      - '@fluentui/react-internal!ICalloutPositionProps:interface'
      - '@fluentui/react-internal!ICalloutProps:interface'
      - '@fluentui/react-internal!ICheckProps:interface'
      - '@fluentui/react-internal!ICheckStyles:interface'
      - '@fluentui/react-internal!IChoiceGroup:interface'
      - '@fluentui/react-internal!IChoiceGroupOption:interface'
      - '@fluentui/react-internal!IChoiceGroupOptionProps:interface'
      - '@fluentui/react-internal!IChoiceGroupOptionStyleProps:interface'
      - '@fluentui/react-internal!IChoiceGroupOptionStyles:interface'
      - '@fluentui/react-internal!IChoiceGroupProps:interface'
      - '@fluentui/react-internal!IChoiceGroupStyleProps:interface'
      - '@fluentui/react-internal!IChoiceGroupStyles:interface'
      - '@fluentui/react-internal!ICircle:interface'
      - '@fluentui/react-internal!ICoachmark:interface'
      - '@fluentui/react-internal!ICoachmarkProps:interface'
      - '@fluentui/react-internal!ICoachmarkStyleProps:interface'
      - '@fluentui/react-internal!ICoachmarkStyles:interface'
      - '@fluentui/react-internal!IColor:interface'
      - '@fluentui/react-internal!IColorCellProps:interface'
      - '@fluentui/react-internal!IColorPicker:interface'
      - '@fluentui/react-internal!IColorPickerGridCellProps:interface'
      - '@fluentui/react-internal!IColorPickerGridCellStyleProps:interface'
      - '@fluentui/react-internal!IColorPickerGridCellStyles:interface'
      - '@fluentui/react-internal!IColorPickerProps:interface'
      - '@fluentui/react-internal!IColorPickerState:interface'
      - '@fluentui/react-internal!IColorPickerStrings:interface'
      - '@fluentui/react-internal!IColorPickerStyles:interface'
      - '@fluentui/react-internal!IColorRectangle:interface'
      - '@fluentui/react-internal!IColorRectangleProps:interface'
      - '@fluentui/react-internal!IColorRectangleStyleProps:interface'
      - '@fluentui/react-internal!IColorRectangleStyles:interface'
      - '@fluentui/react-internal!IColorSlider:interface'
      - '@fluentui/react-internal!IColorSliderProps:interface'
      - '@fluentui/react-internal!IColorSliderStyles:interface'
      - '@fluentui/react-internal!ICommandBar:interface'
      - '@fluentui/react-internal!ICommandBarData:interface'
      - '@fluentui/react-internal!ICommandBarItemProps:interface'
      - '@fluentui/react-internal!ICommandBarProps:interface'
      - '@fluentui/react-internal!ICommandBarStyleProps:interface'
      - '@fluentui/react-internal!ICommandBarStyles:interface'
      - '@fluentui/react-internal!IconBase:class'
      - '@fluentui/react-internal!IContextualMenu:interface'
      - '@fluentui/react-internal!IContextualMenuItem:interface'
      - '@fluentui/react-internal!IContextualMenuItemProps:interface'
      - '@fluentui/react-internal!IContextualMenuItemRenderFunctions:interface'
      - '@fluentui/react-internal!IContextualMenuItemRenderProps:interface'
      - '@fluentui/react-internal!IContextualMenuItemStyleProps:interface'
      - '@fluentui/react-internal!IContextualMenuItemStyles:interface'
      - '@fluentui/react-internal!IContextualMenuListProps:interface'
      - '@fluentui/react-internal!IContextualMenuProps:interface'
      - '@fluentui/react-internal!IContextualMenuRenderItem:interface'
      - '@fluentui/react-internal!IContextualMenuSection:interface'
      - '@fluentui/react-internal!IContextualMenuState:interface'
      - '@fluentui/react-internal!IContextualMenuStyleProps:interface'
      - '@fluentui/react-internal!IContextualMenuStyles:interface'
      - '@fluentui/react-internal!IContextualMenuSubComponentStyles:interface'
      - '@fluentui/react-internal!IconType:enum'
      - '@fluentui/react-internal!IDialog:interface'
      - '@fluentui/react-internal!IDialogContent:interface'
      - '@fluentui/react-internal!IDialogContentProps:interface'
      - '@fluentui/react-internal!IDialogContentStyleProps:interface'
      - '@fluentui/react-internal!IDialogContentStyles:interface'
      - '@fluentui/react-internal!IDialogFooter:interface'
      - '@fluentui/react-internal!IDialogFooterProps:interface'
      - '@fluentui/react-internal!IDialogFooterStyleProps:interface'
      - '@fluentui/react-internal!IDialogFooterStyles:interface'
      - '@fluentui/react-internal!IDialogProps:interface'
      - '@fluentui/react-internal!IDialogStyleProps:interface'
      - '@fluentui/react-internal!IDialogStyles:interface'
      - '@fluentui/react-internal!IDragDropContext:interface'
      - '@fluentui/react-internal!IDragDropEvent:interface'
      - '@fluentui/react-internal!IDragDropEvents:interface'
      - '@fluentui/react-internal!IDragDropHelper:interface'
      - '@fluentui/react-internal!IDragDropHelperParams:interface'
      - '@fluentui/react-internal!IDragDropOptions:interface'
      - '@fluentui/react-internal!IDragDropTarget:interface'
      - '@fluentui/react-internal!IDragOptions:interface'
      - '@fluentui/react-internal!IEditingSelectedPeopleItemProps:interface'
      - '@fluentui/react-internal!IEditingSelectedPeopleItemStyles:interface'
      - '@fluentui/react-internal!IEditingSelectedPeopleItemStylesProps:interface'
      - '@fluentui/react-internal!IElementPosition:interface'
      - '@fluentui/react-internal!IElementPositionInfo:interface'
      - '@fluentui/react-internal!IEntityRect:interface'
      - '@fluentui/react-internal!IExpandingCard:interface'
      - '@fluentui/react-internal!IExpandingCardProps:interface'
      - '@fluentui/react-internal!IExpandingCardState:interface'
      - '@fluentui/react-internal!IExpandingCardStyleProps:interface'
      - '@fluentui/react-internal!IExpandingCardStyles:interface'
      - '@fluentui/react-internal!IExtendedPeoplePickerProps:interface'
      - '@fluentui/react-internal!IExtendedPersonaProps:interface'
      - '@fluentui/react-internal!IFabricProps:interface'
      - '@fluentui/react-internal!IFabricStyleProps:interface'
      - '@fluentui/react-internal!IFabricStyles:interface'
      - '@fluentui/react-internal!IFacepile:interface'
      - '@fluentui/react-internal!IFacepilePersona:interface'
      - '@fluentui/react-internal!IFacepileProps:interface'
      - '@fluentui/react-internal!IFacepileStyleProps:interface'
      - '@fluentui/react-internal!IFacepileStyles:interface'
      - '@fluentui/react-internal!IFocusTrapCalloutProps:interface'
      - '@fluentui/react-internal!IFocusTrapZone:interface'
      - '@fluentui/react-internal!IFocusTrapZoneProps:interface'
      - '@fluentui/react-internal!IFontIconProps:interface'
      - '@fluentui/react-internal!IGap:interface'
      - '@fluentui/react-internal!IGenericItem:interface'
      - '@fluentui/react-internal!IHoverCard:interface'
      - '@fluentui/react-internal!IHoverCardProps:interface'
      - '@fluentui/react-internal!IHoverCardState:interface'
      - '@fluentui/react-internal!IHoverCardStyleProps:interface'
      - '@fluentui/react-internal!IHoverCardStyles:interface'
      - '@fluentui/react-internal!IHSL:interface'
      - '@fluentui/react-internal!IHSV:interface'
      - '@fluentui/react-internal!IIconContent:interface'
      - '@fluentui/react-internal!IIconProps:interface'
      - '@fluentui/react-internal!IIconState:interface'
      - '@fluentui/react-internal!IIconStyleProps:interface'
      - '@fluentui/react-internal!IIconStyles:interface'
      - '@fluentui/react-internal!IImage:interface'
      - '@fluentui/react-internal!IImageIconProps:interface'
      - '@fluentui/react-internal!IImageProps:interface'
      - '@fluentui/react-internal!IImageState:interface'
      - '@fluentui/react-internal!IImageStyleProps:interface'
      - '@fluentui/react-internal!IImageStyles:interface'
      - '@fluentui/react-internal!IInputProps:interface'
      - '@fluentui/react-internal!IKeytipConfig:interface'
      - '@fluentui/react-internal!IKeytipConfigItem:interface'
      - '@fluentui/react-internal!IKeytipConfigMap:interface'
      - '@fluentui/react-internal!IKeytipDataProps:interface'
      - '@fluentui/react-internal!IKeytipLayer:interface'
      - '@fluentui/react-internal!IKeytipLayerProps:interface'
      - '@fluentui/react-internal!IKeytipLayerState:interface'
      - '@fluentui/react-internal!IKeytipLayerStyleProps:interface'
      - '@fluentui/react-internal!IKeytipLayerStyles:interface'
      - '@fluentui/react-internal!IKeytipProps:interface'
      - '@fluentui/react-internal!IKeytipStyleProps:interface'
      - '@fluentui/react-internal!IKeytipStyles:interface'
      - '@fluentui/react-internal!IKeytipTransitionKey:interface'
      - '@fluentui/react-internal!ILabel:interface'
      - '@fluentui/react-internal!ILabelProps:interface'
      - '@fluentui/react-internal!ILabelStyleProps:interface'
      - '@fluentui/react-internal!ILabelStyles:interface'
      - '@fluentui/react-internal!ILayer:interface'
      - '@fluentui/react-internal!ILayerHost:interface'
      - '@fluentui/react-internal!ILayerHostProps:interface'
      - '@fluentui/react-internal!ILayerProps:interface'
      - '@fluentui/react-internal!ILayerStyleProps:interface'
      - '@fluentui/react-internal!ILayerStyles:interface'
      - '@fluentui/react-internal!ILine:interface'
      - '@fluentui/react-internal!IList:interface'
      - '@fluentui/react-internal!IListOnRenderRootProps:interface'
      - '@fluentui/react-internal!IListOnRenderSurfaceProps:interface'
      - '@fluentui/react-internal!IListProps:interface'
      - '@fluentui/react-internal!IListState:interface'
      - '@fluentui/react-internal!ImageCoverStyle:enum'
      - '@fluentui/react-internal!ImageFit:enum'
      - '@fluentui/react-internal!ImageLoadState:enum'
      - '@fluentui/react-internal!IMarqueeSelection:interface'
      - '@fluentui/react-internal!IMarqueeSelectionProps:interface'
      - '@fluentui/react-internal!IMarqueeSelectionStyleProps:interface'
      - '@fluentui/react-internal!IMarqueeSelectionStyles:interface'
      - '@fluentui/react-internal!IMaskedTextField:interface'
      - '@fluentui/react-internal!IMaskedTextFieldProps:interface'
      - '@fluentui/react-internal!IMenuItemStyles:interface'
      - '@fluentui/react-internal!IMessageBar:interface'
      - '@fluentui/react-internal!IMessageBarProps:interface'
      - '@fluentui/react-internal!IMessageBarStyleProps:interface'
      - '@fluentui/react-internal!IMessageBarStyles:interface'
      - '@fluentui/react-internal!IModal:interface'
      - '@fluentui/react-internal!IModalProps:interface'
      - '@fluentui/react-internal!IModalStyles:interface'
      - '@fluentui/react-internal!INav:interface'
      - '@fluentui/react-internal!INavButtonProps:interface'
      - '@fluentui/react-internal!INavLink:interface'
      - '@fluentui/react-internal!INavLinkGroup:interface'
      - '@fluentui/react-internal!INavProps:interface'
      - '@fluentui/react-internal!INavState:interface'
      - '@fluentui/react-internal!INavStyleProps:interface'
      - '@fluentui/react-internal!INavStyles:interface'
      - '@fluentui/react-internal!IOverflowSet:interface'
      - '@fluentui/react-internal!IOverflowSetItemProps:interface'
      - '@fluentui/react-internal!IOverflowSetProps:interface'
      - '@fluentui/react-internal!IOverflowSetStyles:interface'
      - '@fluentui/react-internal!IOverlay:interface'
      - '@fluentui/react-internal!IOverlayProps:interface'
      - '@fluentui/react-internal!IOverlayStyleProps:interface'
      - '@fluentui/react-internal!IOverlayStyles:interface'
      - '@fluentui/react-internal!IPage:interface'
      - '@fluentui/react-internal!IPageProps:interface'
      - '@fluentui/react-internal!IPageSpecification:interface'
      - '@fluentui/react-internal!IPanel:interface'
      - '@fluentui/react-internal!IPanelHeaderRenderer:interface'
      - '@fluentui/react-internal!IPanelProps:interface'
      - '@fluentui/react-internal!IPanelStyleProps:interface'
      - '@fluentui/react-internal!IPanelStyles:interface'
      - '@fluentui/react-internal!IPanelSubComponentStyles:interface'
      - '@fluentui/react-internal!IPeopleFloatingPickerProps:interface'
      - '@fluentui/react-internal!IPeoplePickerItemProps:interface'
      - '@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface'
      - '@fluentui/react-internal!IPeoplePickerItemSelectedStyles:interface'
      - '@fluentui/react-internal!IPeoplePickerItemSelectedSubComponentStyles:interface'
      - '@fluentui/react-internal!IPeoplePickerItemSharedProps:interface'
      - '@fluentui/react-internal!IPeoplePickerItemState:interface'
      - '@fluentui/react-internal!IPeoplePickerItemSuggestionProps:interface'
      - '@fluentui/react-internal!IPeoplePickerItemSuggestionStyles:interface'
      - '@fluentui/react-internal!IPeoplePickerItemWithMenuProps:interface'
      - '@fluentui/react-internal!IPeoplePickerProps:interface'
      - '@fluentui/react-internal!IPersona:interface'
      - '@fluentui/react-internal!IPersonaCoinProps:interface'
      - '@fluentui/react-internal!IPersonaCoinStyleProps:interface'
      - '@fluentui/react-internal!IPersonaCoinStyles:interface'
      - '@fluentui/react-internal!IPersonaPresenceProps:interface'
      - '@fluentui/react-internal!IPersonaPresenceStyles:interface'
      - '@fluentui/react-internal!IPersonaProps:interface'
      - '@fluentui/react-internal!IPersonaSharedProps:interface'
      - '@fluentui/react-internal!IPersonaStyleProps:interface'
      - '@fluentui/react-internal!IPersonaStyles:interface'
      - '@fluentui/react-internal!IPersonaWithMenu:interface'
      - '@fluentui/react-internal!IPickerItem:interface'
      - '@fluentui/react-internal!IPickerItemProps:interface'
      - '@fluentui/react-internal!IPlainCard:interface'
      - '@fluentui/react-internal!IPlainCardProps:interface'
      - '@fluentui/react-internal!IPlainCardStyleProps:interface'
      - '@fluentui/react-internal!IPlainCardStyles:interface'
      - '@fluentui/react-internal!IPopupProps:interface'
      - '@fluentui/react-internal!IPosition:interface'
      - '@fluentui/react-internal!IPositionDirectionalHintData:interface'
      - '@fluentui/react-internal!IPositionedData:interface'
      - '@fluentui/react-internal!IPositioningContainer:interface'
      - '@fluentui/react-internal!IPositioningContainerProps:interface'
      - '@fluentui/react-internal!IPositionProps:interface'
      - '@fluentui/react-internal!IProgressIndicatorProps:interface'
      - '@fluentui/react-internal!IProgressIndicatorStyleProps:interface'
      - '@fluentui/react-internal!IProgressIndicatorStyles:interface'
      - '@fluentui/react-internal!IRating:interface'
      - '@fluentui/react-internal!IRatingProps:interface'
      - '@fluentui/react-internal!IRatingStyleProps:interface'
      - '@fluentui/react-internal!IRatingStyles:interface'
      - '@fluentui/react-internal!IRelativePositions:interface'
      - '@fluentui/react-internal!IRenderGroupHeaderProps:interface'
      - '@fluentui/react-internal!IResizeGroup:interface'
      - '@fluentui/react-internal!IResizeGroupProps:interface'
      - '@fluentui/react-internal!IResizeGroupState:interface'
      - '@fluentui/react-internal!IResizeGroupStyleProps:interface'
      - '@fluentui/react-internal!IResizeGroupStyles:interface'
      - '@fluentui/react-internal!IRGB:interface'
      - '@fluentui/react-internal!IScrollablePane:interface'
      - '@fluentui/react-internal!IScrollablePaneContext:interface'
      - '@fluentui/react-internal!IScrollablePaneProps:interface'
      - '@fluentui/react-internal!IScrollablePaneState:interface'
      - '@fluentui/react-internal!IScrollablePaneStyleProps:interface'
      - '@fluentui/react-internal!IScrollablePaneStyles:interface'
      - '@fluentui/react-internal!isDark:function(1)'
      - '@fluentui/react-internal!ISearchBox:interface'
      - '@fluentui/react-internal!ISearchBoxProps:interface'
      - '@fluentui/react-internal!ISearchBoxStyleProps:interface'
      - '@fluentui/react-internal!ISearchBoxStyles:interface'
      - '@fluentui/react-internal!ISelectableDroppableTextProps:interface'
      - '@fluentui/react-internal!ISelectableOption:interface'
      - '@fluentui/react-internal!ISelectedItemProps:interface'
      - '@fluentui/react-internal!ISelectedPeopleItemProps:interface'
      - '@fluentui/react-internal!ISelectedPeopleProps:interface'
      - '@fluentui/react-internal!ISelectionZone:interface'
      - '@fluentui/react-internal!ISelectionZoneProps:interface'
      - '@fluentui/react-internal!ISelectionZoneState:interface'
      - '@fluentui/react-internal!ISeparator:interface'
      - '@fluentui/react-internal!ISeparatorProps:interface'
      - '@fluentui/react-internal!ISeparatorStyles:interface'
      - '@fluentui/react-internal!IShimmerCircle:interface'
      - '@fluentui/react-internal!IShimmerCircleProps:interface'
      - '@fluentui/react-internal!IShimmerCircleStyles:interface'
      - '@fluentui/react-internal!IShimmerColors:interface'
      - '@fluentui/react-internal!IShimmerElement:interface'
      - '@fluentui/react-internal!IShimmerElementsGroup:interface'
      - '@fluentui/react-internal!IShimmerElementsGroupProps:interface'
      - '@fluentui/react-internal!IShimmerElementsGroupStyleProps:interface'
      - '@fluentui/react-internal!IShimmerElementsGroupStyles:interface'
      - '@fluentui/react-internal!IShimmerGap:interface'
      - '@fluentui/react-internal!IShimmerGapProps:interface'
      - '@fluentui/react-internal!IShimmerGapStyles:interface'
      - '@fluentui/react-internal!IShimmerLine:interface'
      - '@fluentui/react-internal!IShimmerLineProps:interface'
      - '@fluentui/react-internal!IShimmerLineStyles:interface'
      - '@fluentui/react-internal!IShimmerProps:interface'
      - '@fluentui/react-internal!IShimmerStyleProps:interface'
      - '@fluentui/react-internal!IShimmerStyles:interface'
      - '@fluentui/react-internal!ISpinButton:interface'
      - '@fluentui/react-internal!ISpinButtonProps:interface'
      - '@fluentui/react-internal!ISpinButtonStyleProps:interface'
      - '@fluentui/react-internal!ISpinButtonStyles:interface'
      - '@fluentui/react-internal!ISpinner:interface'
      - '@fluentui/react-internal!ISpinnerProps:interface'
      - '@fluentui/react-internal!ISpinnerStyleProps:interface'
      - '@fluentui/react-internal!ISpinnerStyles:interface'
      - '@fluentui/react-internal!isRelativeUrl:function(1)'
      - '@fluentui/react-internal!IStackItemProps:interface'
      - '@fluentui/react-internal!IStackItemSlots:interface'
      - '@fluentui/react-internal!IStackItemTokens:interface'
      - '@fluentui/react-internal!IStackProps:interface'
      - '@fluentui/react-internal!IStackSlots:interface'
      - '@fluentui/react-internal!IStackTokens:interface'
      - '@fluentui/react-internal!IStickyProps:interface'
      - '@fluentui/react-internal!IStickyState:interface'
      - '@fluentui/react-internal!ISuggestionItemProps:interface'
      - '@fluentui/react-internal!ISuggestionModel:interface'
      - '@fluentui/react-internal!ISuggestions:interface'
      - '@fluentui/react-internal!ISuggestionsControlProps:interface'
      - '@fluentui/react-internal!ISuggestionsControlState:interface'
      - '@fluentui/react-internal!ISuggestionsCoreProps:interface'
      - '@fluentui/react-internal!ISuggestionsHeaderFooterItemProps:interface'
      - '@fluentui/react-internal!ISuggestionsHeaderFooterProps:interface'
      - '@fluentui/react-internal!ISuggestionsItem:interface'
      - '@fluentui/react-internal!ISuggestionsItemStyles:interface'
      - '@fluentui/react-internal!ISuggestionsProps:interface'
      - '@fluentui/react-internal!ISuggestionsState:interface'
      - '@fluentui/react-internal!ISuggestionsStyles:interface'
      - '@fluentui/react-internal!ISuggestionsSubComponentStyles:interface'
      - '@fluentui/react-internal!isValidShade:function(1)'
      - '@fluentui/react-internal!ISwatchColorPickerProps:interface'
      - '@fluentui/react-internal!ISwatchColorPickerStyleProps:interface'
      - '@fluentui/react-internal!ISwatchColorPickerStyles:interface'
      - '@fluentui/react-internal!ITag:interface'
      - '@fluentui/react-internal!ITagItemProps:interface'
      - '@fluentui/react-internal!ITagItemStyles:interface'
      - '@fluentui/react-internal!ITagItemSuggestionProps:interface'
      - '@fluentui/react-internal!ITagItemSuggestionStyles:interface'
      - '@fluentui/react-internal!ITagPickerProps:interface'
      - '@fluentui/react-internal!ITeachingBubble:interface'
      - '@fluentui/react-internal!ITeachingBubbleProps:interface'
      - '@fluentui/react-internal!ITeachingBubbleStyles:interface'
      - '@fluentui/react-internal!ITeachingBubbleSubComponentStyles:interface'
      - '@fluentui/react-internal!ITextField:interface'
      - '@fluentui/react-internal!ITextFieldProps:interface'
      - '@fluentui/react-internal!ITextFieldStyles:interface'
      - '@fluentui/react-internal!ITextFieldSubComponentStyles:interface'
      - '@fluentui/react-internal!ITextProps:interface'
      - '@fluentui/react-internal!ITextSlots:interface'
      - '@fluentui/react-internal!ITextTokens:interface'
      - '@fluentui/react-internal!IThemeRules:interface'
      - '@fluentui/react-internal!IThemeSlotRule:interface'
      - '@fluentui/react-internal!ITooltip:interface'
      - '@fluentui/react-internal!ITooltipHost:interface'
      - '@fluentui/react-internal!ITooltipHostProps:interface'
      - '@fluentui/react-internal!ITooltipHostState:interface'
      - '@fluentui/react-internal!ITooltipHostStyleProps:interface'
      - '@fluentui/react-internal!ITooltipHostStyles:interface'
      - '@fluentui/react-internal!ITooltipProps:interface'
      - '@fluentui/react-internal!ITooltipStyleProps:interface'
      - '@fluentui/react-internal!ITooltipStyles:interface'
      - '@fluentui/react-internal!IUniqueKeytip:interface'
      - '@fluentui/react-internal!IVerticalDividerClassNames:interface'
      - '@fluentui/react-internal!IVerticalDividerProps:interface'
      - '@fluentui/react-internal!IVerticalDividerStyles:interface'
      - '@fluentui/react-internal!IWindowWithSegments:interface'
      - '@fluentui/react-internal!KeyboardSpinDirection:enum'
      - '@fluentui/react-internal!Keytip:class'
      - '@fluentui/react-internal!KeytipLayerBase:class'
      - '@fluentui/react-internal!KeytipManager:class'
      - '@fluentui/react-internal!ktpTargetFromId:function(1)'
      - '@fluentui/react-internal!ktpTargetFromSequences:function(1)'
      - '@fluentui/react-internal!LabelBase:class'
      - '@fluentui/react-internal!List:class'
      - '@fluentui/react-internal!ListPeoplePickerBase:class'
      - '@fluentui/react-internal!MemberListPeoplePicker:class'
      - '@fluentui/react-internal!mergeOverflows:function(1)'
      - '@fluentui/react-internal!MessageBarType:enum'
      - '@fluentui/react-internal!NavBase:class'
      - '@fluentui/react-internal!NormalPeoplePickerBase:class'
      - '@fluentui/react-internal!OpenCardMode:enum'
      - '@fluentui/react-internal!OverflowButtonType:enum'
      - '@fluentui/react-internal!OverlayBase:class'
      - '@fluentui/react-internal!PanelType:enum'
      - '@fluentui/react-internal!PersonaInitialsColor:enum'
      - '@fluentui/react-internal!PersonaPresence:enum'
      - '@fluentui/react-internal!PersonaSize:enum'
      - '@fluentui/react-internal!PlainCardBase:class'
      - '@fluentui/react-internal!Position:enum'
      - '@fluentui/react-internal!positionCallout:function(1)'
      - '@fluentui/react-internal!positionCard:function(1)'
      - '@fluentui/react-internal!positionElement:function(1)'
      - '@fluentui/react-internal!ProgressIndicatorBase:class'
      - '@fluentui/react-internal!RatingSize:enum'
      - '@fluentui/react-internal!RectangleEdge:enum'
      - '@fluentui/react-internal!ResizeGroupDirection:enum'
      - '@fluentui/react-internal!ResponsiveMode:enum'
      - '@fluentui/react-internal!rgb2hex:function(1)'
      - '@fluentui/react-internal!rgb2hsv:function(1)'
      - '@fluentui/react-internal!ScrollablePaneBase:class'
      - '@fluentui/react-internal!SelectableOptionMenuItemType:enum'
      - '@fluentui/react-internal!SelectedPeopleList:class'
      - '@fluentui/react-internal!SelectionZone:class'
      - '@fluentui/react-internal!SemanticColorSlots:enum'
      - '@fluentui/react-internal!sequencesToID:function(1)'
      - '@fluentui/react-internal!Shade:enum'
      - '@fluentui/react-internal!ShimmerElementsDefaultHeights:enum'
      - '@fluentui/react-internal!ShimmerElementType:enum'
      - '@fluentui/react-internal!SpinnerBase:class'
      - '@fluentui/react-internal!SpinnerSize:enum'
      - '@fluentui/react-internal!SpinnerType:enum'
      - '@fluentui/react-internal!Sticky:class'
      - '@fluentui/react-internal!StickyPositionType:enum'
      - '@fluentui/react-internal!SuggestionActionType:enum'
      - '@fluentui/react-internal!SuggestionItemType:enum'
      - '@fluentui/react-internal!Suggestions:class'
      - '@fluentui/react-internal!SuggestionsControl:class'
      - '@fluentui/react-internal!SuggestionsController:class'
      - '@fluentui/react-internal!SuggestionsCore:class'
      - '@fluentui/react-internal!SuggestionsHeaderFooterItem:class'
      - '@fluentui/react-internal!SuggestionsItem:class'
      - '@fluentui/react-internal!SuggestionsStore:class'
      - '@fluentui/react-internal!TagPickerBase:class'
      - '@fluentui/react-internal!TextFieldBase:class'
      - '@fluentui/react-internal!ThemeGenerator:class'
      - '@fluentui/react-internal!themeRulesStandardCreator:function(1)'
      - '@fluentui/react-internal!TooltipBase:class'
      - '@fluentui/react-internal!TooltipDelay:enum'
      - '@fluentui/react-internal!TooltipHostBase:class'
      - '@fluentui/react-internal!TooltipOverflowMode:enum'
      - '@fluentui/react-internal!transitionKeysAreEqual:function(1)'
      - '@fluentui/react-internal!transitionKeysContain:function(1)'
      - '@fluentui/react-internal!updateA:function(1)'
      - '@fluentui/react-internal!updateH:function(1)'
      - '@fluentui/react-internal!updateRGB:function(1)'
      - '@fluentui/react-internal!updateSV:function(1)'
      - '@fluentui/react-internal!updateT:function(1)'
      - '@fluentui/react-internal!useHeightOffset:function(1)'
      - '@fluentui/react-internal!useKeytipRef:function(1)'
      - '@fluentui/react-internal!ValidationState:enum'
  - uid: '@fluentui/react-internal!buildKeytipConfigMap:function(1)'
    summary: Builds a map of ID to IKeytipProps
    name: buildKeytipConfigMap(config)
    fullName: buildKeytipConfigMap(config)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap;'
      return:
        type:
          - IKeytipConfigMap
        description: Config map
      parameters:
        - id: config
          description: IKeytipConfig object
          type:
            - IKeytipConfig
  - uid: '@fluentui/react-internal!canAnyMenuItemsCheck:function(1)'
    summary: Returns true if a list of menu items can contain a checkbox
    name: canAnyMenuItemsCheck(items)
    fullName: canAnyMenuItemsCheck(items)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function canAnyMenuItemsCheck(items: IContextualMenuItem[]): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: items
          description: ''
          type:
            - 'IContextualMenuItem[]'
  - uid: '@fluentui/react-internal!clamp:function(1)'
    summary: Clamp a value to ensure it falls within a given range.
    name: 'clamp(value, max, min)'
    fullName: 'clamp(value, max, min)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function clamp(value: number, max: number, min?: number): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - number
        - id: max
          description: ''
          type:
            - number
        - id: min
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!constructKeytip:function(1)'
    summary: Constructs a keytip from an IKeytipConfigItem and puts it in the configMap
    name: 'constructKeytip(configMap, parentSequence, keytip)'
    fullName: 'constructKeytip(configMap, parentSequence, keytip)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function constructKeytip(configMap: IKeytipConfigMap, parentSequence: string[], keytip:
        IKeytipConfigItem): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: configMap
          description: IKeytipConfigMap to store the keytip in
          type:
            - IKeytipConfigMap
        - id: parentSequence
          description: string of the parent keytip
          type:
            - 'string[]'
        - id: keytip
          description: IKeytipConfigItem data
          type:
            - IKeytipConfigItem
  - uid: '@fluentui/react-internal!correctHex:function(1)'
    summary: >-
      Corrects a hex color to have length 3 or 6. Defaults to white if too short. Does NOT check anything besides the
      length (such as valid characters) and does NOT handle hex values starting with \# sign.
    name: correctHex(hex)
    fullName: correctHex(hex)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function correctHex(hex: string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: hex
          description: ''
          type:
            - string
  - uid: '@fluentui/react-internal!correctHSV:function(1)'
    summary: Corrects an HSV color to fall within the valid range.
    name: correctHSV(color)
    fullName: correctHSV(color)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function correctHSV(color: IHSV): IHSV;'
      return:
        type:
          - IHSV
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IHSV
  - uid: '@fluentui/react-internal!correctRGB:function(1)'
    summary: Corrects an RGB color to fall within the valid range.
    name: correctRGB(color)
    fullName: correctRGB(color)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function correctRGB(color: IRGB): IRGB;'
      return:
        type:
          - IRGB
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IRGB
  - uid: '@fluentui/react-internal!createGenericItem:function(1)'
    name: 'createGenericItem(name, currentValidationState)'
    fullName: 'createGenericItem(name, currentValidationState)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function createGenericItem(name: string, currentValidationState: ValidationState): IGenericItem &
        {
            key: React.Key;
        };
      return:
        type:
          - |-
            IGenericItem & {
                key: React.Key;
            }
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: currentValidationState
          description: ''
          type:
            - ValidationState
  - uid: '@fluentui/react-internal!createItem:function(1)'
    name: 'createItem(name, isValid)'
    fullName: 'createItem(name, isValid)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function createItem(name: string, isValid: boolean): ISuggestionModel<IPersonaProps>;'
      return:
        type:
          - ISuggestionModel<IPersonaProps>
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: isValid
          description: ''
          type:
            - boolean
  - uid: '@fluentui/react-internal!cssColor:function(1)'
    summary: >-
      Converts a valid CSS color string to an RGB color. Note that hex colors \*must\* be prefixed with \# to be
      considered valid. Alpha in returned color defaults to 100. Four and eight digit hex values (with alpha) are
      supported if the current browser supports them.
    name: cssColor(color)
    fullName: cssColor(color)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function cssColor(color?: string): IRGB | undefined;'
      return:
        type:
          - IRGB | undefined
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - string
  - uid: '@fluentui/react-internal!getAllSelectedOptions:function(1)'
    name: 'getAllSelectedOptions(options, selectedIndices)'
    fullName: 'getAllSelectedOptions(options, selectedIndices)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getAllSelectedOptions(options: ISelectableOption[], selectedIndices: number[]):
        ISelectableOption[];
      return:
        type:
          - 'ISelectableOption[]'
        description: ''
      parameters:
        - id: options
          description: ''
          type:
            - 'ISelectableOption[]'
        - id: selectedIndices
          description: ''
          type:
            - 'number[]'
  - uid: '@fluentui/react-internal!getAriaDescribedBy:function(1)'
    summary: Gets the aria-describedby value to put on the component with this keytip.
    name: getAriaDescribedBy(keySequences)
    fullName: getAriaDescribedBy(keySequences)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getAriaDescribedBy(keySequences: string[]): string;'
      return:
        type:
          - string
        description: The aria-describedby value to set on the component with this keytip.
      parameters:
        - id: keySequences
          description: KeySequences of the keytip.
          type:
            - 'string[]'
  - uid: '@fluentui/react-internal!getBackgroundShade:function(1)'
    name: 'getBackgroundShade(color, shade, isInverted)'
    fullName: 'getBackgroundShade(color, shade, isInverted)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getBackgroundShade(color: IColor, shade: Shade, isInverted?: boolean): IColor | null;'
      return:
        type:
          - IColor | null
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IColor
        - id: shade
          description: ''
          type:
            - Shade
        - id: isInverted
          description: ''
          type:
            - boolean
  - uid: '@fluentui/react-internal!getBoundsFromTargetWindow:function(1)'
    name: 'getBoundsFromTargetWindow(target, targetWindow)'
    fullName: 'getBoundsFromTargetWindow(target, targetWindow)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getBoundsFromTargetWindow(target: Element | MouseEvent | Point | null, targetWindow:
        IWindowWithSegments): IRectangle;
      return:
        type:
          - '@fluentui/utilities!IRectangle:interface'
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - Element | MouseEvent | Point | null
        - id: targetWindow
          description: ''
          type:
            - IWindowWithSegments
  - uid: '@fluentui/react-internal!getColorFromHSV:function(1)'
    summary: >-
      Converts an HSV color (and optional alpha value) to a color object. If `a` is not given, a default of 100 is used.
      Hex in the returned value will \*not\* be prefixed with \#. If `a` is unspecified or 100, the result's `str`
      property will contain a hex value (\*not\* prefixed with \#)
    name: 'getColorFromHSV(hsv, a)'
    fullName: 'getColorFromHSV(hsv, a)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getColorFromHSV(hsv: IHSV, a?: number): IColor;'
      return:
        type:
          - IColor
        description: ''
      parameters:
        - id: hsv
          description: ''
          type:
            - IHSV
        - id: a
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!getColorFromRGBA:function(1)'
    summary: Converts an RGBA color to a color object (alpha defaults to 100).
    name: getColorFromRGBA(rgba)
    fullName: getColorFromRGBA(rgba)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getColorFromRGBA(rgba: IRGB): IColor;'
      return:
        type:
          - IColor
        description: ''
      parameters:
        - id: rgba
          description: ''
          type:
            - IRGB
  - uid: '@fluentui/react-internal!getColorFromString:function(1)'
    summary: >-
      Converts a CSS color string to a color object. Note that hex colors \*must\* be prefixed with \# to be considered
      valid.


      `inputColor` will be used unmodified as the `str` property of the returned object. Alpha defaults to 100 if not
      specified in `inputColor`<!-- -->. Returns undefined if the color string is invalid/not recognized.
    name: getColorFromString(inputColor)
    fullName: getColorFromString(inputColor)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getColorFromString(inputColor: string): IColor | undefined;'
      return:
        type:
          - IColor | undefined
        description: ''
      parameters:
        - id: inputColor
          description: ''
          type:
            - string
  - uid: '@fluentui/react-internal!getContrastRatio:function(1)'
    name: 'getContrastRatio(color1, color2)'
    fullName: 'getContrastRatio(color1, color2)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getContrastRatio(color1: IColor, color2: IColor): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: color1
          description: ''
          type:
            - IColor
        - id: color2
          description: ''
          type:
            - IColor
  - uid: '@fluentui/react-internal!getFullColorString:function(1)'
    summary: >-
      Converts a color hue to an HTML color string (with \# prefix). This implementation ignores all components of
      `color` except hue.
    name: getFullColorString(color)
    fullName: getFullColorString(color)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getFullColorString(color: IColor): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IColor
  - uid: '@fluentui/react-internal!getMaxHeight:function(1)'
    summary: >-
      Gets the maximum height that a rectangle can have in order to fit below or above a target. If the directional hint
      specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder of the target given. If
      no bounds are provided then the window is treated as the bounds.
    name: 'getMaxHeight(target, targetEdge, gapSpace, bounds, coverTarget)'
    fullName: 'getMaxHeight(target, targetEdge, gapSpace, bounds, coverTarget)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getMaxHeight(target: Element | MouseEvent | Point, targetEdge: DirectionalHint,
        gapSpace?: number, bounds?: IRectangle, coverTarget?: boolean): number;
      return:
        type:
          - number
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - Element | MouseEvent | Point
        - id: targetEdge
          description: ''
          type:
            - DirectionalHint
        - id: gapSpace
          description: ''
          type:
            - number
        - id: bounds
          description: ''
          type:
            - '@fluentui/utilities!IRectangle:interface'
        - id: coverTarget
          description: ''
          type:
            - boolean
  - uid: '@fluentui/react-internal!getOppositeEdge:function(1)'
    summary: Returns the opposite edge of the given RectangleEdge.
    name: getOppositeEdge(edge)
    fullName: getOppositeEdge(edge)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getOppositeEdge(edge: RectangleEdge): RectangleEdge;'
      return:
        type:
          - RectangleEdge
        description: ''
      parameters:
        - id: edge
          description: ''
          type:
            - RectangleEdge
  - uid: '@fluentui/react-internal!getPersonaInitialsColor:function(1)'
    summary: >-
      Gets the hex color string (prefixed with \#) for the given persona props. This is the logic used internally by the
      Persona control.
    name: getPersonaInitialsColor(props)
    fullName: getPersonaInitialsColor(props)
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getPersonaInitialsColor(props: Pick<IPersonaProps, 'primaryText' | 'text' |
        'initialsColor'>): string;
      return:
        type:
          - string
        description: 'Hex color string prefixed with \#'
      parameters:
        - id: props
          description: Current persona props
          type:
            - 'Pick<IPersonaProps, ''primaryText'' | ''text'' | ''initialsColor''>'
  - uid: '@fluentui/react-internal!getShade:function(1)'
    summary: >-
      Given a color and a shade specification, generates the requested shade of the color. Logic: if white darken via
      tables defined above if black lighten if light strongen if dark soften else default soften or strongen depending
      on shade\#
    name: 'getShade(color, shade, isInverted)'
    fullName: 'getShade(color, shade, isInverted)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getShade(color: IColor, shade: Shade, isInverted?: boolean): IColor | null;'
      return:
        type:
          - IColor | null
        description: ''
      parameters:
        - id: color
          description: The base color whose shade is to be computed
          type:
            - IColor
        - id: shade
          description: The shade of the base color to compute
          type:
            - Shade
        - id: isInverted
          description: Default false. Whether the given theme is inverted (reverse strongen/soften logic)
          type:
            - boolean
  - uid: '@fluentui/react-internal!getSubmenuItems:function(1)'
    name: getSubmenuItems(item)
    fullName: getSubmenuItems(item)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getSubmenuItems(item: IContextualMenuItem): IContextualMenuItem[] | undefined;'
      return:
        type:
          - 'IContextualMenuItem[] | undefined'
        description: ''
      parameters:
        - id: item
          description: ''
          type:
            - IContextualMenuItem
  - uid: '@fluentui/react-internal!hsl2hsv:function(1)'
    summary: Converts HSL components to an HSV color.
    name: 'hsl2hsv(h, s, l)'
    fullName: 'hsl2hsv(h, s, l)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hsl2hsv(h: number, s: number, l: number): IHSV;'
      return:
        type:
          - IHSV
        description: ''
      parameters:
        - id: h
          description: ''
          type:
            - number
        - id: s
          description: ''
          type:
            - number
        - id: l
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!hsl2rgb:function(1)'
    summary: Converts HSL components to an RGB color. Does not set the alpha value.
    name: 'hsl2rgb(h, s, l)'
    fullName: 'hsl2rgb(h, s, l)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hsl2rgb(h: number, s: number, l: number): IRGB;'
      return:
        type:
          - IRGB
        description: ''
      parameters:
        - id: h
          description: ''
          type:
            - number
        - id: s
          description: ''
          type:
            - number
        - id: l
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!hsv2hex:function(1)'
    summary: 'Converts HSV components to a hex color string (without \# prefix).'
    name: 'hsv2hex(h, s, v)'
    fullName: 'hsv2hex(h, s, v)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hsv2hex(h: number, s: number, v: number): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: h
          description: ''
          type:
            - number
        - id: s
          description: ''
          type:
            - number
        - id: v
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!hsv2hsl:function(1)'
    summary: Converts HSV components to an HSL color.
    name: 'hsv2hsl(h, s, v)'
    fullName: 'hsv2hsl(h, s, v)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hsv2hsl(h: number, s: number, v: number): IHSL;'
      return:
        type:
          - IHSL
        description: ''
      parameters:
        - id: h
          description: ''
          type:
            - number
        - id: s
          description: ''
          type:
            - number
        - id: v
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!hsv2rgb:function(1)'
    summary: Converts HSV components to an RGB color. Does not set the alpha value.
    name: 'hsv2rgb(h, s, v)'
    fullName: 'hsv2rgb(h, s, v)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hsv2rgb(h: number, s: number, v: number): IRGB;'
      return:
        type:
          - IRGB
        description: ''
      parameters:
        - id: h
          description: ''
          type:
            - number
        - id: s
          description: ''
          type:
            - number
        - id: v
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!isDark:function(1)'
    name: isDark(color)
    fullName: isDark(color)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isDark(color: IColor): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IColor
  - uid: '@fluentui/react-internal!isRelativeUrl:function(1)'
    name: isRelativeUrl(url)
    fullName: isRelativeUrl(url)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isRelativeUrl(url: string): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: url
          description: ''
          type:
            - string
  - uid: '@fluentui/react-internal!isValidShade:function(1)'
    summary: Returns true if the argument is a valid Shade value
    name: isValidShade(shade)
    fullName: isValidShade(shade)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isValidShade(shade?: Shade): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: shade
          description: The Shade value to validate.
          type:
            - Shade
  - uid: '@fluentui/react-internal!ktpTargetFromId:function(1)'
    summary: Constructs the data-ktp-execute-target attribute selector from a keytip ID.
    name: ktpTargetFromId(keytipId)
    fullName: ktpTargetFromId(keytipId)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function ktpTargetFromId(keytipId: string): string;'
      return:
        type:
          - string
        description: String selector to use to query for the keytip execute target.
      parameters:
        - id: keytipId
          description: ID of the Keytip.
          type:
            - string
  - uid: '@fluentui/react-internal!ktpTargetFromSequences:function(1)'
    summary: Constructs the data-ktp-target attribute selector from a full key sequence.
    name: ktpTargetFromSequences(keySequences)
    fullName: ktpTargetFromSequences(keySequences)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function ktpTargetFromSequences(keySequences: string[]): string;'
      return:
        type:
          - string
        description: String selector to use to query for the keytip target.
      parameters:
        - id: keySequences
          description: 'Full string\[\] for a Keytip.'
          type:
            - 'string[]'
  - uid: '@fluentui/react-internal!mergeOverflows:function(1)'
    summary: Merges an overflow sequence with a key sequence.
    name: 'mergeOverflows(keySequences, overflowKeySequences)'
    fullName: 'mergeOverflows(keySequences, overflowKeySequences)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[];'
      return:
        type:
          - 'string[]'
        description: Sequence that will be used by the keytip when in the overflow.
      parameters:
        - id: keySequences
          description: Full sequence for one keytip.
          type:
            - 'string[]'
        - id: overflowKeySequences
          description: Full overflow keytip sequence.
          type:
            - 'string[]'
  - uid: '@fluentui/react-internal!positionCallout:function(1)'
    name: 'positionCallout(props, hostElement, elementToPosition, previousPositions)'
    fullName: 'positionCallout(props, hostElement, elementToPosition, previousPositions)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function positionCallout(props: IPositionProps, hostElement: HTMLElement, elementToPosition:
        HTMLElement, previousPositions?: ICalloutPositionedInfo): ICalloutPositionedInfo;
      return:
        type:
          - ICalloutPositionedInfo
        description: ''
      parameters:
        - id: props
          description: ''
          type:
            - IPositionProps
        - id: hostElement
          description: ''
          type:
            - HTMLElement
        - id: elementToPosition
          description: ''
          type:
            - HTMLElement
        - id: previousPositions
          description: ''
          type:
            - ICalloutPositionedInfo
  - uid: '@fluentui/react-internal!positionCard:function(1)'
    name: 'positionCard(props, hostElement, elementToPosition, previousPositions)'
    fullName: 'positionCard(props, hostElement, elementToPosition, previousPositions)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function positionCard(props: IPositionProps, hostElement: HTMLElement, elementToPosition:
        HTMLElement, previousPositions?: ICalloutPositionedInfo): ICalloutPositionedInfo;
      return:
        type:
          - ICalloutPositionedInfo
        description: ''
      parameters:
        - id: props
          description: ''
          type:
            - IPositionProps
        - id: hostElement
          description: ''
          type:
            - HTMLElement
        - id: elementToPosition
          description: ''
          type:
            - HTMLElement
        - id: previousPositions
          description: ''
          type:
            - ICalloutPositionedInfo
  - uid: '@fluentui/react-internal!positionElement:function(1)'
    summary: >-
      Used to position an element relative to the given positioning props. If positioning has been completed before,
      previousPositions can be passed to ensure that the positioning element repositions based on its previous targets
      rather than starting with directionalhint.
    name: 'positionElement(props, hostElement, elementToPosition, previousPositions)'
    fullName: 'positionElement(props, hostElement, elementToPosition, previousPositions)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function positionElement(props: IPositionProps, hostElement: HTMLElement, elementToPosition:
        HTMLElement, previousPositions?: IPositionedData): IPositionedData;
      return:
        type:
          - IPositionedData
        description: ''
      parameters:
        - id: props
          description: ''
          type:
            - IPositionProps
        - id: hostElement
          description: ''
          type:
            - HTMLElement
        - id: elementToPosition
          description: ''
          type:
            - HTMLElement
        - id: previousPositions
          description: ''
          type:
            - IPositionedData
  - uid: '@fluentui/react-internal!rgb2hex:function(1)'
    summary: 'Converts RGB components to a hex color string (without \# prefix).'
    name: 'rgb2hex(r, g, b)'
    fullName: 'rgb2hex(r, g, b)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function rgb2hex(r: number, g: number, b: number): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: r
          description: ''
          type:
            - number
        - id: g
          description: ''
          type:
            - number
        - id: b
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!rgb2hsv:function(1)'
    summary: Converts RGB components to an HSV color.
    name: 'rgb2hsv(r, g, b)'
    fullName: 'rgb2hsv(r, g, b)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function rgb2hsv(r: number, g: number, b: number): IHSV;'
      return:
        type:
          - IHSV
        description: ''
      parameters:
        - id: r
          description: ''
          type:
            - number
        - id: g
          description: ''
          type:
            - number
        - id: b
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!sequencesToID:function(1)'
    summary: >-
      Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence
      specified keySequences should not include the initial keytip 'start' sequence.
    name: sequencesToID(keySequences)
    fullName: sequencesToID(keySequences)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function sequencesToID(keySequences: string[]): string;'
      return:
        type:
          - string
        description: String to use for the keytip ID.
      parameters:
        - id: keySequences
          description: Full path of IKeySequences for one keytip.
          type:
            - 'string[]'
  - uid: '@fluentui/react-internal!themeRulesStandardCreator:function(1)'
    name: themeRulesStandardCreator()
    fullName: themeRulesStandardCreator()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function themeRulesStandardCreator(): IThemeRules;'
      return:
        type:
          - IThemeRules
        description: ''
  - uid: '@fluentui/react-internal!transitionKeysAreEqual:function(1)'
    summary: Tests for equality between two IKeytipTransitionKeys.
    name: 'transitionKeysAreEqual(key1, key2)'
    fullName: 'transitionKeysAreEqual(key1, key2)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean;'
      return:
        type:
          - boolean
        description: T/F if the transition keys are equal.
      parameters:
        - id: key1
          description: First IKeytipTransitionKey.
          type:
            - IKeytipTransitionKey
        - id: key2
          description: Second IKeytipTransitionKey.
          type:
            - IKeytipTransitionKey
  - uid: '@fluentui/react-internal!transitionKeysContain:function(1)'
    summary: Tests if 'key' is present in 'keys'.
    name: 'transitionKeysContain(keys, key)'
    fullName: 'transitionKeysContain(keys, key)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean;'
      return:
        type:
          - boolean
        description: T/F if 'keys' contains 'key'.
      parameters:
        - id: keys
          description: Array of IKeytipTransitionKey.
          type:
            - 'IKeytipTransitionKey[]'
        - id: key
          description: IKeytipTransitionKey to find in 'keys'.
          type:
            - IKeytipTransitionKey
  - uid: '@fluentui/react-internal!updateA:function(1)'
    summary: >-
      Gets a color with the given alpha value and the same other components as `color`<!-- -->. Does not modify the
      original color.
    name: 'updateA(color, a)'
    fullName: 'updateA(color, a)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function updateA(color: IColor, a: number): IColor;'
      return:
        type:
          - IColor
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IColor
        - id: a
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!updateH:function(1)'
    summary: >-
      Gets a color with the same saturation and value as `color` and the other components updated to match the given
      hue.


      Does not modify the original `color` and does not supply a default alpha value.
    name: 'updateH(color, h)'
    fullName: 'updateH(color, h)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function updateH(color: IColor, h: number): IColor;'
      return:
        type:
          - IColor
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IColor
        - id: h
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!updateRGB:function(1)'
    summary: >-
      Gets a color with a single RGBA component updated to a new value. Does not modify the original `color`<!-- -->.
      Alpha defaults to 100 if not set.
    name: 'updateRGB(color, component, value)'
    fullName: 'updateRGB(color, component, value)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function updateRGB(color: IColor, component: keyof IRGB, value: number): IColor;'
      return:
        type:
          - IColor
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IColor
        - id: component
          description: ''
          type:
            - keyof IRGB
        - id: value
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!updateSV:function(1)'
    summary: |-
      Gets a color with the same hue as `color` and other components updated to match the given saturation and value.

      Does not modify the original `color` and does not supply a default alpha value.
    name: 'updateSV(color, s, v)'
    fullName: 'updateSV(color, s, v)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function updateSV(color: IColor, s: number, v: number): IColor;'
      return:
        type:
          - IColor
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IColor
        - id: s
          description: ''
          type:
            - number
        - id: v
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!updateT:function(1)'
    summary: >-
      Gets a color with the given transparency value and the same other components as `color`<!-- -->. Does not modify
      the original color.
    name: 'updateT(color, t)'
    fullName: 'updateT(color, t)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function updateT(color: IColor, t: number): IColor;'
      return:
        type:
          - IColor
        description: ''
      parameters:
        - id: color
          description: ''
          type:
            - IColor
        - id: t
          description: ''
          type:
            - number
  - uid: '@fluentui/react-internal!useHeightOffset:function(1)'
    name: 'useHeightOffset({ finalHeight }, contentHost)'
    fullName: 'useHeightOffset({ finalHeight }, contentHost)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function useHeightOffset({ finalHeight }: IPositioningContainerProps, contentHost:
        React.RefObject<HTMLDivElement | null>): number;
      return:
        type:
          - number
        description: ''
      parameters:
        - id: '{ finalHeight }'
          description: ''
          type:
            - IPositioningContainerProps
        - id: contentHost
          description: ''
          type:
            - React.RefObject<HTMLDivElement | null>
  - uid: '@fluentui/react-internal!useKeytipRef:function(1)'
    summary: >-
      Hook that creates a ref which is used for passing to Keytip target element. The ref will handle setting the
      attributes needed for Keytip to work.
    name: useKeytipRef(options)
    fullName: useKeytipRef(options)
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function useKeytipRef<TElement extends HTMLElement = HTMLElement>(options: KeytipDataOptions):
        React.Ref<TElement>;
      return:
        type:
          - React.Ref<TElement>
        description: ''
      parameters:
        - id: options
          description: ''
          type:
            - KeytipDataOptions
      typeParameters:
        - id: TElement
          type:
            - 'HTMLElement '
references:
  - uid: '@fluentui/react-internal!ActivityItem:class'
    name: ActivityItem
  - uid: '@fluentui/react-internal!AnnouncedBase:class'
    name: AnnouncedBase
  - uid: '@fluentui/react-internal!Autofill:class'
    name: Autofill
  - uid: '@fluentui/react-internal!BaseExtendedPeoplePicker:class'
    name: BaseExtendedPeoplePicker
  - uid: '@fluentui/react-internal!BaseExtendedPicker:class'
    name: BaseExtendedPicker
  - uid: '@fluentui/react-internal!BaseFloatingPeoplePicker:class'
    name: BaseFloatingPeoplePicker
  - uid: '@fluentui/react-internal!BaseFloatingPicker:class'
    name: BaseFloatingPicker
  - uid: '@fluentui/react-internal!BasePeoplePicker:class'
    name: BasePeoplePicker
  - uid: '@fluentui/react-internal!BasePeopleSelectedItemsList:class'
    name: BasePeopleSelectedItemsList
  - uid: '@fluentui/react-internal!BasePicker:class'
    name: BasePicker
  - uid: '@fluentui/react-internal!BasePickerListBelow:class'
    name: BasePickerListBelow
  - uid: '@fluentui/react-internal!BaseSelectedItemsList:class'
    name: BaseSelectedItemsList
  - uid: '@fluentui/react-internal!BaseSlots:enum'
    name: BaseSlots
  - uid: '@fluentui/react-internal!ColorPickerBase:class'
    name: ColorPickerBase
  - uid: '@fluentui/react-internal!CommandBarBase:class'
    name: CommandBarBase
  - uid: '@fluentui/react-internal!CompactPeoplePickerBase:class'
    name: CompactPeoplePickerBase
  - uid: '@fluentui/react-internal!ContextualMenuItemBase:class'
    name: ContextualMenuItemBase
  - uid: '@fluentui/react-internal!ContextualMenuItemType:enum'
    name: ContextualMenuItemType
  - uid: '@fluentui/react-internal!DialogBase:class'
    name: DialogBase
  - uid: '@fluentui/react-internal!DialogContentBase:class'
    name: DialogContentBase
  - uid: '@fluentui/react-internal!DialogFooterBase:class'
    name: DialogFooterBase
  - uid: '@fluentui/react-internal!DialogType:enum'
    name: DialogType
  - uid: '@fluentui/react-internal!DragDropHelper:class'
    name: DragDropHelper
  - uid: '@fluentui/react-internal!ExpandingCardBase:class'
    name: ExpandingCardBase
  - uid: '@fluentui/react-internal!ExpandingCardMode:enum'
    name: ExpandingCardMode
  - uid: '@fluentui/react-internal!ExtendedPeoplePicker:class'
    name: ExtendedPeoplePicker
  - uid: '@fluentui/react-internal!ExtendedSelectedItem:class'
    name: ExtendedSelectedItem
  - uid: '@fluentui/react-internal!FabricSlots:enum'
    name: FabricSlots
  - uid: '@fluentui/react-internal!FacepileBase:class'
    name: FacepileBase
  - uid: '@fluentui/react-internal!FloatingPeoplePicker:class'
    name: FloatingPeoplePicker
  - uid: '@fluentui/react-internal!HoverCardBase:class'
    name: HoverCardBase
  - uid: '@fluentui/react-internal!HoverCardType:enum'
    name: HoverCardType
  - uid: '@fluentui/react-internal!IAccessiblePopupProps:interface'
    name: IAccessiblePopupProps
  - uid: '@fluentui/react-internal!IActivityItemProps:interface'
    name: IActivityItemProps
  - uid: '@fluentui/react-internal!IActivityItemStyles:interface'
    name: IActivityItemStyles
  - uid: '@fluentui/react-internal!IAnnouncedProps:interface'
    name: IAnnouncedProps
  - uid: '@fluentui/react-internal!IAnnouncedStyles:interface'
    name: IAnnouncedStyles
  - uid: '@fluentui/react-internal!IAutofill:interface'
    name: IAutofill
  - uid: '@fluentui/react-internal!IAutofillProps:interface'
    name: IAutofillProps
  - uid: '@fluentui/react-internal!IAutofillState:interface'
    name: IAutofillState
  - uid: '@fluentui/react-internal!IBaseExtendedPicker:interface'
    name: IBaseExtendedPicker
  - uid: '@fluentui/react-internal!IBaseExtendedPickerProps:interface'
    name: IBaseExtendedPickerProps
  - uid: '@fluentui/react-internal!IBaseExtendedPickerState:interface'
    name: IBaseExtendedPickerState
  - uid: '@fluentui/react-internal!IBaseFloatingPicker:interface'
    name: IBaseFloatingPicker
  - uid: '@fluentui/react-internal!IBaseFloatingPickerProps:interface'
    name: IBaseFloatingPickerProps
  - uid: '@fluentui/react-internal!IBaseFloatingPickerState:interface'
    name: IBaseFloatingPickerState
  - uid: '@fluentui/react-internal!IBasePicker:interface'
    name: IBasePicker
  - uid: '@fluentui/react-internal!IBasePickerProps:interface'
    name: IBasePickerProps
  - uid: '@fluentui/react-internal!IBasePickerState:interface'
    name: IBasePickerState
  - uid: '@fluentui/react-internal!IBasePickerStyles:interface'
    name: IBasePickerStyles
  - uid: '@fluentui/react-internal!IBasePickerSuggestionsProps:interface'
    name: IBasePickerSuggestionsProps
  - uid: '@fluentui/react-internal!IBaseSelectedItemsList:interface'
    name: IBaseSelectedItemsList
  - uid: '@fluentui/react-internal!IBaseSelectedItemsListProps:interface'
    name: IBaseSelectedItemsListProps
  - uid: '@fluentui/react-internal!IBaseSelectedItemsListState:interface'
    name: IBaseSelectedItemsListState
  - uid: '@fluentui/react-internal!IButtonGrid:interface'
    name: IButtonGrid
  - uid: '@fluentui/react-internal!IButtonGridCellProps:interface'
    name: IButtonGridCellProps
  - uid: '@fluentui/react-internal!IButtonGridProps:interface'
    name: IButtonGridProps
  - uid: '@fluentui/react-internal!IButtonGridStyleProps:interface'
    name: IButtonGridStyleProps
  - uid: '@fluentui/react-internal!IButtonGridStyles:interface'
    name: IButtonGridStyles
  - uid: '@fluentui/react-internal!ICalloutBeakPositionedInfo:interface'
    name: ICalloutBeakPositionedInfo
  - uid: '@fluentui/react-internal!ICalloutContentStyleProps:interface'
    name: ICalloutContentStyleProps
  - uid: '@fluentui/react-internal!ICalloutContentStyles:interface'
    name: ICalloutContentStyles
  - uid: '@fluentui/react-internal!ICalloutPositionedInfo:interface'
    name: ICalloutPositionedInfo
  - uid: '@fluentui/react-internal!ICalloutPositionProps:interface'
    name: ICalloutPositionProps
  - uid: '@fluentui/react-internal!ICalloutProps:interface'
    name: ICalloutProps
  - uid: '@fluentui/react-internal!ICheckProps:interface'
    name: ICheckProps
  - uid: '@fluentui/react-internal!ICheckStyles:interface'
    name: ICheckStyles
  - uid: '@fluentui/react-internal!IChoiceGroup:interface'
    name: IChoiceGroup
  - uid: '@fluentui/react-internal!IChoiceGroupOption:interface'
    name: IChoiceGroupOption
  - uid: '@fluentui/react-internal!IChoiceGroupOptionProps:interface'
    name: IChoiceGroupOptionProps
  - uid: '@fluentui/react-internal!IChoiceGroupOptionStyleProps:interface'
    name: IChoiceGroupOptionStyleProps
  - uid: '@fluentui/react-internal!IChoiceGroupOptionStyles:interface'
    name: IChoiceGroupOptionStyles
  - uid: '@fluentui/react-internal!IChoiceGroupProps:interface'
    name: IChoiceGroupProps
  - uid: '@fluentui/react-internal!IChoiceGroupStyleProps:interface'
    name: IChoiceGroupStyleProps
  - uid: '@fluentui/react-internal!IChoiceGroupStyles:interface'
    name: IChoiceGroupStyles
  - uid: '@fluentui/react-internal!ICircle:interface'
    name: ICircle
  - uid: '@fluentui/react-internal!ICoachmark:interface'
    name: ICoachmark
  - uid: '@fluentui/react-internal!ICoachmarkProps:interface'
    name: ICoachmarkProps
  - uid: '@fluentui/react-internal!ICoachmarkStyleProps:interface'
    name: ICoachmarkStyleProps
  - uid: '@fluentui/react-internal!ICoachmarkStyles:interface'
    name: ICoachmarkStyles
  - uid: '@fluentui/react-internal!IColor:interface'
    name: IColor
  - uid: '@fluentui/react-internal!IColorCellProps:interface'
    name: IColorCellProps
  - uid: '@fluentui/react-internal!IColorPicker:interface'
    name: IColorPicker
  - uid: '@fluentui/react-internal!IColorPickerGridCellProps:interface'
    name: IColorPickerGridCellProps
  - uid: '@fluentui/react-internal!IColorPickerGridCellStyleProps:interface'
    name: IColorPickerGridCellStyleProps
  - uid: '@fluentui/react-internal!IColorPickerGridCellStyles:interface'
    name: IColorPickerGridCellStyles
  - uid: '@fluentui/react-internal!IColorPickerProps:interface'
    name: IColorPickerProps
  - uid: '@fluentui/react-internal!IColorPickerState:interface'
    name: IColorPickerState
  - uid: '@fluentui/react-internal!IColorPickerStrings:interface'
    name: IColorPickerStrings
  - uid: '@fluentui/react-internal!IColorPickerStyles:interface'
    name: IColorPickerStyles
  - uid: '@fluentui/react-internal!IColorRectangle:interface'
    name: IColorRectangle
  - uid: '@fluentui/react-internal!IColorRectangleProps:interface'
    name: IColorRectangleProps
  - uid: '@fluentui/react-internal!IColorRectangleStyleProps:interface'
    name: IColorRectangleStyleProps
  - uid: '@fluentui/react-internal!IColorRectangleStyles:interface'
    name: IColorRectangleStyles
  - uid: '@fluentui/react-internal!IColorSlider:interface'
    name: IColorSlider
  - uid: '@fluentui/react-internal!IColorSliderProps:interface'
    name: IColorSliderProps
  - uid: '@fluentui/react-internal!IColorSliderStyles:interface'
    name: IColorSliderStyles
  - uid: '@fluentui/react-internal!ICommandBar:interface'
    name: ICommandBar
  - uid: '@fluentui/react-internal!ICommandBarData:interface'
    name: ICommandBarData
  - uid: '@fluentui/react-internal!ICommandBarItemProps:interface'
    name: ICommandBarItemProps
  - uid: '@fluentui/react-internal!ICommandBarProps:interface'
    name: ICommandBarProps
  - uid: '@fluentui/react-internal!ICommandBarStyleProps:interface'
    name: ICommandBarStyleProps
  - uid: '@fluentui/react-internal!ICommandBarStyles:interface'
    name: ICommandBarStyles
  - uid: '@fluentui/react-internal!IconBase:class'
    name: IconBase
  - uid: '@fluentui/react-internal!IContextualMenu:interface'
    name: IContextualMenu
  - uid: '@fluentui/react-internal!IContextualMenuItem:interface'
    name: IContextualMenuItem
  - uid: '@fluentui/react-internal!IContextualMenuItemProps:interface'
    name: IContextualMenuItemProps
  - uid: '@fluentui/react-internal!IContextualMenuItemRenderFunctions:interface'
    name: IContextualMenuItemRenderFunctions
  - uid: '@fluentui/react-internal!IContextualMenuItemRenderProps:interface'
    name: IContextualMenuItemRenderProps
  - uid: '@fluentui/react-internal!IContextualMenuItemStyleProps:interface'
    name: IContextualMenuItemStyleProps
  - uid: '@fluentui/react-internal!IContextualMenuItemStyles:interface'
    name: IContextualMenuItemStyles
  - uid: '@fluentui/react-internal!IContextualMenuListProps:interface'
    name: IContextualMenuListProps
  - uid: '@fluentui/react-internal!IContextualMenuProps:interface'
    name: IContextualMenuProps
  - uid: '@fluentui/react-internal!IContextualMenuRenderItem:interface'
    name: IContextualMenuRenderItem
  - uid: '@fluentui/react-internal!IContextualMenuSection:interface'
    name: IContextualMenuSection
  - uid: '@fluentui/react-internal!IContextualMenuState:interface'
    name: IContextualMenuState
  - uid: '@fluentui/react-internal!IContextualMenuStyleProps:interface'
    name: IContextualMenuStyleProps
  - uid: '@fluentui/react-internal!IContextualMenuStyles:interface'
    name: IContextualMenuStyles
  - uid: '@fluentui/react-internal!IContextualMenuSubComponentStyles:interface'
    name: IContextualMenuSubComponentStyles
  - uid: '@fluentui/react-internal!IconType:enum'
    name: IconType
  - uid: '@fluentui/react-internal!IDialog:interface'
    name: IDialog
  - uid: '@fluentui/react-internal!IDialogContent:interface'
    name: IDialogContent
  - uid: '@fluentui/react-internal!IDialogContentProps:interface'
    name: IDialogContentProps
  - uid: '@fluentui/react-internal!IDialogContentStyleProps:interface'
    name: IDialogContentStyleProps
  - uid: '@fluentui/react-internal!IDialogContentStyles:interface'
    name: IDialogContentStyles
  - uid: '@fluentui/react-internal!IDialogFooter:interface'
    name: IDialogFooter
  - uid: '@fluentui/react-internal!IDialogFooterProps:interface'
    name: IDialogFooterProps
  - uid: '@fluentui/react-internal!IDialogFooterStyleProps:interface'
    name: IDialogFooterStyleProps
  - uid: '@fluentui/react-internal!IDialogFooterStyles:interface'
    name: IDialogFooterStyles
  - uid: '@fluentui/react-internal!IDialogProps:interface'
    name: IDialogProps
  - uid: '@fluentui/react-internal!IDialogStyleProps:interface'
    name: IDialogStyleProps
  - uid: '@fluentui/react-internal!IDialogStyles:interface'
    name: IDialogStyles
  - uid: '@fluentui/react-internal!IDragDropContext:interface'
    name: IDragDropContext
  - uid: '@fluentui/react-internal!IDragDropEvent:interface'
    name: IDragDropEvent
  - uid: '@fluentui/react-internal!IDragDropEvents:interface'
    name: IDragDropEvents
  - uid: '@fluentui/react-internal!IDragDropHelper:interface'
    name: IDragDropHelper
  - uid: '@fluentui/react-internal!IDragDropHelperParams:interface'
    name: IDragDropHelperParams
  - uid: '@fluentui/react-internal!IDragDropOptions:interface'
    name: IDragDropOptions
  - uid: '@fluentui/react-internal!IDragDropTarget:interface'
    name: IDragDropTarget
  - uid: '@fluentui/react-internal!IDragOptions:interface'
    name: IDragOptions
  - uid: '@fluentui/react-internal!IEditingSelectedPeopleItemProps:interface'
    name: IEditingSelectedPeopleItemProps
  - uid: '@fluentui/react-internal!IEditingSelectedPeopleItemStyles:interface'
    name: IEditingSelectedPeopleItemStyles
  - uid: '@fluentui/react-internal!IEditingSelectedPeopleItemStylesProps:interface'
    name: IEditingSelectedPeopleItemStylesProps
  - uid: '@fluentui/react-internal!IElementPosition:interface'
    name: IElementPosition
  - uid: '@fluentui/react-internal!IElementPositionInfo:interface'
    name: IElementPositionInfo
  - uid: '@fluentui/react-internal!IEntityRect:interface'
    name: IEntityRect
  - uid: '@fluentui/react-internal!IExpandingCard:interface'
    name: IExpandingCard
  - uid: '@fluentui/react-internal!IExpandingCardProps:interface'
    name: IExpandingCardProps
  - uid: '@fluentui/react-internal!IExpandingCardState:interface'
    name: IExpandingCardState
  - uid: '@fluentui/react-internal!IExpandingCardStyleProps:interface'
    name: IExpandingCardStyleProps
  - uid: '@fluentui/react-internal!IExpandingCardStyles:interface'
    name: IExpandingCardStyles
  - uid: '@fluentui/react-internal!IExtendedPeoplePickerProps:interface'
    name: IExtendedPeoplePickerProps
  - uid: '@fluentui/react-internal!IExtendedPersonaProps:interface'
    name: IExtendedPersonaProps
  - uid: '@fluentui/react-internal!IFabricProps:interface'
    name: IFabricProps
  - uid: '@fluentui/react-internal!IFabricStyleProps:interface'
    name: IFabricStyleProps
  - uid: '@fluentui/react-internal!IFabricStyles:interface'
    name: IFabricStyles
  - uid: '@fluentui/react-internal!IFacepile:interface'
    name: IFacepile
  - uid: '@fluentui/react-internal!IFacepilePersona:interface'
    name: IFacepilePersona
  - uid: '@fluentui/react-internal!IFacepileProps:interface'
    name: IFacepileProps
  - uid: '@fluentui/react-internal!IFacepileStyleProps:interface'
    name: IFacepileStyleProps
  - uid: '@fluentui/react-internal!IFacepileStyles:interface'
    name: IFacepileStyles
  - uid: '@fluentui/react-internal!IFocusTrapCalloutProps:interface'
    name: IFocusTrapCalloutProps
  - uid: '@fluentui/react-internal!IFocusTrapZone:interface'
    name: IFocusTrapZone
  - uid: '@fluentui/react-internal!IFocusTrapZoneProps:interface'
    name: IFocusTrapZoneProps
  - uid: '@fluentui/react-internal!IFontIconProps:interface'
    name: IFontIconProps
  - uid: '@fluentui/react-internal!IGap:interface'
    name: IGap
  - uid: '@fluentui/react-internal!IGenericItem:interface'
    name: IGenericItem
  - uid: '@fluentui/react-internal!IHoverCard:interface'
    name: IHoverCard
  - uid: '@fluentui/react-internal!IHoverCardProps:interface'
    name: IHoverCardProps
  - uid: '@fluentui/react-internal!IHoverCardState:interface'
    name: IHoverCardState
  - uid: '@fluentui/react-internal!IHoverCardStyleProps:interface'
    name: IHoverCardStyleProps
  - uid: '@fluentui/react-internal!IHoverCardStyles:interface'
    name: IHoverCardStyles
  - uid: '@fluentui/react-internal!IHSL:interface'
    name: IHSL
  - uid: '@fluentui/react-internal!IHSV:interface'
    name: IHSV
  - uid: '@fluentui/react-internal!IIconContent:interface'
    name: IIconContent
  - uid: '@fluentui/react-internal!IIconProps:interface'
    name: IIconProps
  - uid: '@fluentui/react-internal!IIconState:interface'
    name: IIconState
  - uid: '@fluentui/react-internal!IIconStyleProps:interface'
    name: IIconStyleProps
  - uid: '@fluentui/react-internal!IIconStyles:interface'
    name: IIconStyles
  - uid: '@fluentui/react-internal!IImage:interface'
    name: IImage
  - uid: '@fluentui/react-internal!IImageIconProps:interface'
    name: IImageIconProps
  - uid: '@fluentui/react-internal!IImageProps:interface'
    name: IImageProps
  - uid: '@fluentui/react-internal!IImageState:interface'
    name: IImageState
  - uid: '@fluentui/react-internal!IImageStyleProps:interface'
    name: IImageStyleProps
  - uid: '@fluentui/react-internal!IImageStyles:interface'
    name: IImageStyles
  - uid: '@fluentui/react-internal!IInputProps:interface'
    name: IInputProps
  - uid: '@fluentui/react-internal!IKeytipConfig:interface'
    name: IKeytipConfig
  - uid: '@fluentui/react-internal!IKeytipConfigItem:interface'
    name: IKeytipConfigItem
  - uid: '@fluentui/react-internal!IKeytipConfigMap:interface'
    name: IKeytipConfigMap
  - uid: '@fluentui/react-internal!IKeytipDataProps:interface'
    name: IKeytipDataProps
  - uid: '@fluentui/react-internal!IKeytipLayer:interface'
    name: IKeytipLayer
  - uid: '@fluentui/react-internal!IKeytipLayerProps:interface'
    name: IKeytipLayerProps
  - uid: '@fluentui/react-internal!IKeytipLayerState:interface'
    name: IKeytipLayerState
  - uid: '@fluentui/react-internal!IKeytipLayerStyleProps:interface'
    name: IKeytipLayerStyleProps
  - uid: '@fluentui/react-internal!IKeytipLayerStyles:interface'
    name: IKeytipLayerStyles
  - uid: '@fluentui/react-internal!IKeytipProps:interface'
    name: IKeytipProps
  - uid: '@fluentui/react-internal!IKeytipStyleProps:interface'
    name: IKeytipStyleProps
  - uid: '@fluentui/react-internal!IKeytipStyles:interface'
    name: IKeytipStyles
  - uid: '@fluentui/react-internal!IKeytipTransitionKey:interface'
    name: IKeytipTransitionKey
  - uid: '@fluentui/react-internal!ILabel:interface'
    name: ILabel
  - uid: '@fluentui/react-internal!ILabelProps:interface'
    name: ILabelProps
  - uid: '@fluentui/react-internal!ILabelStyleProps:interface'
    name: ILabelStyleProps
  - uid: '@fluentui/react-internal!ILabelStyles:interface'
    name: ILabelStyles
  - uid: '@fluentui/react-internal!ILayer:interface'
    name: ILayer
  - uid: '@fluentui/react-internal!ILayerHost:interface'
    name: ILayerHost
  - uid: '@fluentui/react-internal!ILayerHostProps:interface'
    name: ILayerHostProps
  - uid: '@fluentui/react-internal!ILayerProps:interface'
    name: ILayerProps
  - uid: '@fluentui/react-internal!ILayerStyleProps:interface'
    name: ILayerStyleProps
  - uid: '@fluentui/react-internal!ILayerStyles:interface'
    name: ILayerStyles
  - uid: '@fluentui/react-internal!ILine:interface'
    name: ILine
  - uid: '@fluentui/react-internal!IList:interface'
    name: IList
  - uid: '@fluentui/react-internal!IListOnRenderRootProps:interface'
    name: IListOnRenderRootProps
  - uid: '@fluentui/react-internal!IListOnRenderSurfaceProps:interface'
    name: IListOnRenderSurfaceProps
  - uid: '@fluentui/react-internal!IListProps:interface'
    name: IListProps
  - uid: '@fluentui/react-internal!IListState:interface'
    name: IListState
  - uid: '@fluentui/react-internal!ImageCoverStyle:enum'
    name: ImageCoverStyle
  - uid: '@fluentui/react-internal!ImageFit:enum'
    name: ImageFit
  - uid: '@fluentui/react-internal!ImageLoadState:enum'
    name: ImageLoadState
  - uid: '@fluentui/react-internal!IMarqueeSelection:interface'
    name: IMarqueeSelection
  - uid: '@fluentui/react-internal!IMarqueeSelectionProps:interface'
    name: IMarqueeSelectionProps
  - uid: '@fluentui/react-internal!IMarqueeSelectionStyleProps:interface'
    name: IMarqueeSelectionStyleProps
  - uid: '@fluentui/react-internal!IMarqueeSelectionStyles:interface'
    name: IMarqueeSelectionStyles
  - uid: '@fluentui/react-internal!IMaskedTextField:interface'
    name: IMaskedTextField
  - uid: '@fluentui/react-internal!IMaskedTextFieldProps:interface'
    name: IMaskedTextFieldProps
  - uid: '@fluentui/react-internal!IMenuItemStyles:interface'
    name: IMenuItemStyles
  - uid: '@fluentui/react-internal!IMessageBar:interface'
    name: IMessageBar
  - uid: '@fluentui/react-internal!IMessageBarProps:interface'
    name: IMessageBarProps
  - uid: '@fluentui/react-internal!IMessageBarStyleProps:interface'
    name: IMessageBarStyleProps
  - uid: '@fluentui/react-internal!IMessageBarStyles:interface'
    name: IMessageBarStyles
  - uid: '@fluentui/react-internal!IModal:interface'
    name: IModal
  - uid: '@fluentui/react-internal!IModalProps:interface'
    name: IModalProps
  - uid: '@fluentui/react-internal!IModalStyles:interface'
    name: IModalStyles
  - uid: '@fluentui/react-internal!INav:interface'
    name: INav
  - uid: '@fluentui/react-internal!INavButtonProps:interface'
    name: INavButtonProps
  - uid: '@fluentui/react-internal!INavLink:interface'
    name: INavLink
  - uid: '@fluentui/react-internal!INavLinkGroup:interface'
    name: INavLinkGroup
  - uid: '@fluentui/react-internal!INavProps:interface'
    name: INavProps
  - uid: '@fluentui/react-internal!INavState:interface'
    name: INavState
  - uid: '@fluentui/react-internal!INavStyleProps:interface'
    name: INavStyleProps
  - uid: '@fluentui/react-internal!INavStyles:interface'
    name: INavStyles
  - uid: '@fluentui/react-internal!IOverflowSet:interface'
    name: IOverflowSet
  - uid: '@fluentui/react-internal!IOverflowSetItemProps:interface'
    name: IOverflowSetItemProps
  - uid: '@fluentui/react-internal!IOverflowSetProps:interface'
    name: IOverflowSetProps
  - uid: '@fluentui/react-internal!IOverflowSetStyles:interface'
    name: IOverflowSetStyles
  - uid: '@fluentui/react-internal!IOverlay:interface'
    name: IOverlay
  - uid: '@fluentui/react-internal!IOverlayProps:interface'
    name: IOverlayProps
  - uid: '@fluentui/react-internal!IOverlayStyleProps:interface'
    name: IOverlayStyleProps
  - uid: '@fluentui/react-internal!IOverlayStyles:interface'
    name: IOverlayStyles
  - uid: '@fluentui/react-internal!IPage:interface'
    name: IPage
  - uid: '@fluentui/react-internal!IPageProps:interface'
    name: IPageProps
  - uid: '@fluentui/react-internal!IPageSpecification:interface'
    name: IPageSpecification
  - uid: '@fluentui/react-internal!IPanel:interface'
    name: IPanel
  - uid: '@fluentui/react-internal!IPanelHeaderRenderer:interface'
    name: IPanelHeaderRenderer
  - uid: '@fluentui/react-internal!IPanelProps:interface'
    name: IPanelProps
  - uid: '@fluentui/react-internal!IPanelStyleProps:interface'
    name: IPanelStyleProps
  - uid: '@fluentui/react-internal!IPanelStyles:interface'
    name: IPanelStyles
  - uid: '@fluentui/react-internal!IPanelSubComponentStyles:interface'
    name: IPanelSubComponentStyles
  - uid: '@fluentui/react-internal!IPeopleFloatingPickerProps:interface'
    name: IPeopleFloatingPickerProps
  - uid: '@fluentui/react-internal!IPeoplePickerItemProps:interface'
    name: IPeoplePickerItemProps
  - uid: '@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface'
    name: IPeoplePickerItemSelectedProps
  - uid: '@fluentui/react-internal!IPeoplePickerItemSelectedStyles:interface'
    name: IPeoplePickerItemSelectedStyles
  - uid: '@fluentui/react-internal!IPeoplePickerItemSelectedSubComponentStyles:interface'
    name: IPeoplePickerItemSelectedSubComponentStyles
  - uid: '@fluentui/react-internal!IPeoplePickerItemSharedProps:interface'
    name: IPeoplePickerItemSharedProps
  - uid: '@fluentui/react-internal!IPeoplePickerItemState:interface'
    name: IPeoplePickerItemState
  - uid: '@fluentui/react-internal!IPeoplePickerItemSuggestionProps:interface'
    name: IPeoplePickerItemSuggestionProps
  - uid: '@fluentui/react-internal!IPeoplePickerItemSuggestionStyles:interface'
    name: IPeoplePickerItemSuggestionStyles
  - uid: '@fluentui/react-internal!IPeoplePickerItemWithMenuProps:interface'
    name: IPeoplePickerItemWithMenuProps
  - uid: '@fluentui/react-internal!IPeoplePickerProps:interface'
    name: IPeoplePickerProps
  - uid: '@fluentui/react-internal!IPersona:interface'
    name: IPersona
  - uid: '@fluentui/react-internal!IPersonaCoinProps:interface'
    name: IPersonaCoinProps
  - uid: '@fluentui/react-internal!IPersonaCoinStyleProps:interface'
    name: IPersonaCoinStyleProps
  - uid: '@fluentui/react-internal!IPersonaCoinStyles:interface'
    name: IPersonaCoinStyles
  - uid: '@fluentui/react-internal!IPersonaPresenceProps:interface'
    name: IPersonaPresenceProps
  - uid: '@fluentui/react-internal!IPersonaPresenceStyles:interface'
    name: IPersonaPresenceStyles
  - uid: '@fluentui/react-internal!IPersonaProps:interface'
    name: IPersonaProps
  - uid: '@fluentui/react-internal!IPersonaSharedProps:interface'
    name: IPersonaSharedProps
  - uid: '@fluentui/react-internal!IPersonaStyleProps:interface'
    name: IPersonaStyleProps
  - uid: '@fluentui/react-internal!IPersonaStyles:interface'
    name: IPersonaStyles
  - uid: '@fluentui/react-internal!IPersonaWithMenu:interface'
    name: IPersonaWithMenu
  - uid: '@fluentui/react-internal!IPickerItem:interface'
    name: IPickerItem
  - uid: '@fluentui/react-internal!IPickerItemProps:interface'
    name: IPickerItemProps
  - uid: '@fluentui/react-internal!IPlainCard:interface'
    name: IPlainCard
  - uid: '@fluentui/react-internal!IPlainCardProps:interface'
    name: IPlainCardProps
  - uid: '@fluentui/react-internal!IPlainCardStyleProps:interface'
    name: IPlainCardStyleProps
  - uid: '@fluentui/react-internal!IPlainCardStyles:interface'
    name: IPlainCardStyles
  - uid: '@fluentui/react-internal!IPopupProps:interface'
    name: IPopupProps
  - uid: '@fluentui/react-internal!IPosition:interface'
    name: IPosition
  - uid: '@fluentui/react-internal!IPositionDirectionalHintData:interface'
    name: IPositionDirectionalHintData
  - uid: '@fluentui/react-internal!IPositionedData:interface'
    name: IPositionedData
  - uid: '@fluentui/react-internal!IPositioningContainer:interface'
    name: IPositioningContainer
  - uid: '@fluentui/react-internal!IPositioningContainerProps:interface'
    name: IPositioningContainerProps
  - uid: '@fluentui/react-internal!IPositionProps:interface'
    name: IPositionProps
  - uid: '@fluentui/react-internal!IProgressIndicatorProps:interface'
    name: IProgressIndicatorProps
  - uid: '@fluentui/react-internal!IProgressIndicatorStyleProps:interface'
    name: IProgressIndicatorStyleProps
  - uid: '@fluentui/react-internal!IProgressIndicatorStyles:interface'
    name: IProgressIndicatorStyles
  - uid: '@fluentui/react-internal!IRating:interface'
    name: IRating
  - uid: '@fluentui/react-internal!IRatingProps:interface'
    name: IRatingProps
  - uid: '@fluentui/react-internal!IRatingStyleProps:interface'
    name: IRatingStyleProps
  - uid: '@fluentui/react-internal!IRatingStyles:interface'
    name: IRatingStyles
  - uid: '@fluentui/react-internal!IRelativePositions:interface'
    name: IRelativePositions
  - uid: '@fluentui/react-internal!IRenderGroupHeaderProps:interface'
    name: IRenderGroupHeaderProps
  - uid: '@fluentui/react-internal!IResizeGroup:interface'
    name: IResizeGroup
  - uid: '@fluentui/react-internal!IResizeGroupProps:interface'
    name: IResizeGroupProps
  - uid: '@fluentui/react-internal!IResizeGroupState:interface'
    name: IResizeGroupState
  - uid: '@fluentui/react-internal!IResizeGroupStyleProps:interface'
    name: IResizeGroupStyleProps
  - uid: '@fluentui/react-internal!IResizeGroupStyles:interface'
    name: IResizeGroupStyles
  - uid: '@fluentui/react-internal!IRGB:interface'
    name: IRGB
  - uid: '@fluentui/react-internal!IScrollablePane:interface'
    name: IScrollablePane
  - uid: '@fluentui/react-internal!IScrollablePaneContext:interface'
    name: IScrollablePaneContext
  - uid: '@fluentui/react-internal!IScrollablePaneProps:interface'
    name: IScrollablePaneProps
  - uid: '@fluentui/react-internal!IScrollablePaneState:interface'
    name: IScrollablePaneState
  - uid: '@fluentui/react-internal!IScrollablePaneStyleProps:interface'
    name: IScrollablePaneStyleProps
  - uid: '@fluentui/react-internal!IScrollablePaneStyles:interface'
    name: IScrollablePaneStyles
  - uid: '@fluentui/react-internal!ISearchBox:interface'
    name: ISearchBox
  - uid: '@fluentui/react-internal!ISearchBoxProps:interface'
    name: ISearchBoxProps
  - uid: '@fluentui/react-internal!ISearchBoxStyleProps:interface'
    name: ISearchBoxStyleProps
  - uid: '@fluentui/react-internal!ISearchBoxStyles:interface'
    name: ISearchBoxStyles
  - uid: '@fluentui/react-internal!ISelectableDroppableTextProps:interface'
    name: ISelectableDroppableTextProps
  - uid: '@fluentui/react-internal!ISelectableOption:interface'
    name: ISelectableOption
  - uid: '@fluentui/react-internal!ISelectedItemProps:interface'
    name: ISelectedItemProps
  - uid: '@fluentui/react-internal!ISelectedPeopleItemProps:interface'
    name: ISelectedPeopleItemProps
  - uid: '@fluentui/react-internal!ISelectedPeopleProps:interface'
    name: ISelectedPeopleProps
  - uid: '@fluentui/react-internal!ISelectionZone:interface'
    name: ISelectionZone
  - uid: '@fluentui/react-internal!ISelectionZoneProps:interface'
    name: ISelectionZoneProps
  - uid: '@fluentui/react-internal!ISelectionZoneState:interface'
    name: ISelectionZoneState
  - uid: '@fluentui/react-internal!ISeparator:interface'
    name: ISeparator
  - uid: '@fluentui/react-internal!ISeparatorProps:interface'
    name: ISeparatorProps
  - uid: '@fluentui/react-internal!ISeparatorStyles:interface'
    name: ISeparatorStyles
  - uid: '@fluentui/react-internal!IShimmerCircle:interface'
    name: IShimmerCircle
  - uid: '@fluentui/react-internal!IShimmerCircleProps:interface'
    name: IShimmerCircleProps
  - uid: '@fluentui/react-internal!IShimmerCircleStyles:interface'
    name: IShimmerCircleStyles
  - uid: '@fluentui/react-internal!IShimmerColors:interface'
    name: IShimmerColors
  - uid: '@fluentui/react-internal!IShimmerElement:interface'
    name: IShimmerElement
  - uid: '@fluentui/react-internal!IShimmerElementsGroup:interface'
    name: IShimmerElementsGroup
  - uid: '@fluentui/react-internal!IShimmerElementsGroupProps:interface'
    name: IShimmerElementsGroupProps
  - uid: '@fluentui/react-internal!IShimmerElementsGroupStyleProps:interface'
    name: IShimmerElementsGroupStyleProps
  - uid: '@fluentui/react-internal!IShimmerElementsGroupStyles:interface'
    name: IShimmerElementsGroupStyles
  - uid: '@fluentui/react-internal!IShimmerGap:interface'
    name: IShimmerGap
  - uid: '@fluentui/react-internal!IShimmerGapProps:interface'
    name: IShimmerGapProps
  - uid: '@fluentui/react-internal!IShimmerGapStyles:interface'
    name: IShimmerGapStyles
  - uid: '@fluentui/react-internal!IShimmerLine:interface'
    name: IShimmerLine
  - uid: '@fluentui/react-internal!IShimmerLineProps:interface'
    name: IShimmerLineProps
  - uid: '@fluentui/react-internal!IShimmerLineStyles:interface'
    name: IShimmerLineStyles
  - uid: '@fluentui/react-internal!IShimmerProps:interface'
    name: IShimmerProps
  - uid: '@fluentui/react-internal!IShimmerStyleProps:interface'
    name: IShimmerStyleProps
  - uid: '@fluentui/react-internal!IShimmerStyles:interface'
    name: IShimmerStyles
  - uid: '@fluentui/react-internal!ISpinButton:interface'
    name: ISpinButton
  - uid: '@fluentui/react-internal!ISpinButtonProps:interface'
    name: ISpinButtonProps
  - uid: '@fluentui/react-internal!ISpinButtonStyleProps:interface'
    name: ISpinButtonStyleProps
  - uid: '@fluentui/react-internal!ISpinButtonStyles:interface'
    name: ISpinButtonStyles
  - uid: '@fluentui/react-internal!ISpinner:interface'
    name: ISpinner
  - uid: '@fluentui/react-internal!ISpinnerProps:interface'
    name: ISpinnerProps
  - uid: '@fluentui/react-internal!ISpinnerStyleProps:interface'
    name: ISpinnerStyleProps
  - uid: '@fluentui/react-internal!ISpinnerStyles:interface'
    name: ISpinnerStyles
  - uid: '@fluentui/react-internal!IStackItemProps:interface'
    name: IStackItemProps
  - uid: '@fluentui/react-internal!IStackItemSlots:interface'
    name: IStackItemSlots
  - uid: '@fluentui/react-internal!IStackItemTokens:interface'
    name: IStackItemTokens
  - uid: '@fluentui/react-internal!IStackProps:interface'
    name: IStackProps
  - uid: '@fluentui/react-internal!IStackSlots:interface'
    name: IStackSlots
  - uid: '@fluentui/react-internal!IStackTokens:interface'
    name: IStackTokens
  - uid: '@fluentui/react-internal!IStickyProps:interface'
    name: IStickyProps
  - uid: '@fluentui/react-internal!IStickyState:interface'
    name: IStickyState
  - uid: '@fluentui/react-internal!ISuggestionItemProps:interface'
    name: ISuggestionItemProps
  - uid: '@fluentui/react-internal!ISuggestionModel:interface'
    name: ISuggestionModel
  - uid: '@fluentui/react-internal!ISuggestions:interface'
    name: ISuggestions
  - uid: '@fluentui/react-internal!ISuggestionsControlProps:interface'
    name: ISuggestionsControlProps
  - uid: '@fluentui/react-internal!ISuggestionsControlState:interface'
    name: ISuggestionsControlState
  - uid: '@fluentui/react-internal!ISuggestionsCoreProps:interface'
    name: ISuggestionsCoreProps
  - uid: '@fluentui/react-internal!ISuggestionsHeaderFooterItemProps:interface'
    name: ISuggestionsHeaderFooterItemProps
  - uid: '@fluentui/react-internal!ISuggestionsHeaderFooterProps:interface'
    name: ISuggestionsHeaderFooterProps
  - uid: '@fluentui/react-internal!ISuggestionsItem:interface'
    name: ISuggestionsItem
  - uid: '@fluentui/react-internal!ISuggestionsItemStyles:interface'
    name: ISuggestionsItemStyles
  - uid: '@fluentui/react-internal!ISuggestionsProps:interface'
    name: ISuggestionsProps
  - uid: '@fluentui/react-internal!ISuggestionsState:interface'
    name: ISuggestionsState
  - uid: '@fluentui/react-internal!ISuggestionsStyles:interface'
    name: ISuggestionsStyles
  - uid: '@fluentui/react-internal!ISuggestionsSubComponentStyles:interface'
    name: ISuggestionsSubComponentStyles
  - uid: '@fluentui/react-internal!ISwatchColorPickerProps:interface'
    name: ISwatchColorPickerProps
  - uid: '@fluentui/react-internal!ISwatchColorPickerStyleProps:interface'
    name: ISwatchColorPickerStyleProps
  - uid: '@fluentui/react-internal!ISwatchColorPickerStyles:interface'
    name: ISwatchColorPickerStyles
  - uid: '@fluentui/react-internal!ITag:interface'
    name: ITag
  - uid: '@fluentui/react-internal!ITagItemProps:interface'
    name: ITagItemProps
  - uid: '@fluentui/react-internal!ITagItemStyles:interface'
    name: ITagItemStyles
  - uid: '@fluentui/react-internal!ITagItemSuggestionProps:interface'
    name: ITagItemSuggestionProps
  - uid: '@fluentui/react-internal!ITagItemSuggestionStyles:interface'
    name: ITagItemSuggestionStyles
  - uid: '@fluentui/react-internal!ITagPickerProps:interface'
    name: ITagPickerProps
  - uid: '@fluentui/react-internal!ITeachingBubble:interface'
    name: ITeachingBubble
  - uid: '@fluentui/react-internal!ITeachingBubbleProps:interface'
    name: ITeachingBubbleProps
  - uid: '@fluentui/react-internal!ITeachingBubbleStyles:interface'
    name: ITeachingBubbleStyles
  - uid: '@fluentui/react-internal!ITeachingBubbleSubComponentStyles:interface'
    name: ITeachingBubbleSubComponentStyles
  - uid: '@fluentui/react-internal!ITextField:interface'
    name: ITextField
  - uid: '@fluentui/react-internal!ITextFieldProps:interface'
    name: ITextFieldProps
  - uid: '@fluentui/react-internal!ITextFieldStyles:interface'
    name: ITextFieldStyles
  - uid: '@fluentui/react-internal!ITextFieldSubComponentStyles:interface'
    name: ITextFieldSubComponentStyles
  - uid: '@fluentui/react-internal!ITextProps:interface'
    name: ITextProps
  - uid: '@fluentui/react-internal!ITextSlots:interface'
    name: ITextSlots
  - uid: '@fluentui/react-internal!ITextTokens:interface'
    name: ITextTokens
  - uid: '@fluentui/react-internal!IThemeRules:interface'
    name: IThemeRules
  - uid: '@fluentui/react-internal!IThemeSlotRule:interface'
    name: IThemeSlotRule
  - uid: '@fluentui/react-internal!ITooltip:interface'
    name: ITooltip
  - uid: '@fluentui/react-internal!ITooltipHost:interface'
    name: ITooltipHost
  - uid: '@fluentui/react-internal!ITooltipHostProps:interface'
    name: ITooltipHostProps
  - uid: '@fluentui/react-internal!ITooltipHostState:interface'
    name: ITooltipHostState
  - uid: '@fluentui/react-internal!ITooltipHostStyleProps:interface'
    name: ITooltipHostStyleProps
  - uid: '@fluentui/react-internal!ITooltipHostStyles:interface'
    name: ITooltipHostStyles
  - uid: '@fluentui/react-internal!ITooltipProps:interface'
    name: ITooltipProps
  - uid: '@fluentui/react-internal!ITooltipStyleProps:interface'
    name: ITooltipStyleProps
  - uid: '@fluentui/react-internal!ITooltipStyles:interface'
    name: ITooltipStyles
  - uid: '@fluentui/react-internal!IUniqueKeytip:interface'
    name: IUniqueKeytip
  - uid: '@fluentui/react-internal!IVerticalDividerClassNames:interface'
    name: IVerticalDividerClassNames
  - uid: '@fluentui/react-internal!IVerticalDividerProps:interface'
    name: IVerticalDividerProps
  - uid: '@fluentui/react-internal!IVerticalDividerStyles:interface'
    name: IVerticalDividerStyles
  - uid: '@fluentui/react-internal!IWindowWithSegments:interface'
    name: IWindowWithSegments
  - uid: '@fluentui/react-internal!KeyboardSpinDirection:enum'
    name: KeyboardSpinDirection
  - uid: '@fluentui/react-internal!Keytip:class'
    name: Keytip
  - uid: '@fluentui/react-internal!KeytipLayerBase:class'
    name: KeytipLayerBase
  - uid: '@fluentui/react-internal!KeytipManager:class'
    name: KeytipManager
  - uid: '@fluentui/react-internal!LabelBase:class'
    name: LabelBase
  - uid: '@fluentui/react-internal!List:class'
    name: List
  - uid: '@fluentui/react-internal!ListPeoplePickerBase:class'
    name: ListPeoplePickerBase
  - uid: '@fluentui/react-internal!MemberListPeoplePicker:class'
    name: MemberListPeoplePicker
  - uid: '@fluentui/react-internal!MessageBarType:enum'
    name: MessageBarType
  - uid: '@fluentui/react-internal!NavBase:class'
    name: NavBase
  - uid: '@fluentui/react-internal!NormalPeoplePickerBase:class'
    name: NormalPeoplePickerBase
  - uid: '@fluentui/react-internal!OpenCardMode:enum'
    name: OpenCardMode
  - uid: '@fluentui/react-internal!OverflowButtonType:enum'
    name: OverflowButtonType
  - uid: '@fluentui/react-internal!OverlayBase:class'
    name: OverlayBase
  - uid: '@fluentui/react-internal!PanelType:enum'
    name: PanelType
  - uid: '@fluentui/react-internal!PersonaInitialsColor:enum'
    name: PersonaInitialsColor
  - uid: '@fluentui/react-internal!PersonaPresence:enum'
    name: PersonaPresence
  - uid: '@fluentui/react-internal!PersonaSize:enum'
    name: PersonaSize
  - uid: '@fluentui/react-internal!PlainCardBase:class'
    name: PlainCardBase
  - uid: '@fluentui/react-internal!Position:enum'
    name: Position
  - uid: '@fluentui/react-internal!ProgressIndicatorBase:class'
    name: ProgressIndicatorBase
  - uid: '@fluentui/react-internal!RatingSize:enum'
    name: RatingSize
  - uid: '@fluentui/react-internal!RectangleEdge:enum'
    name: RectangleEdge
  - uid: '@fluentui/react-internal!ResizeGroupDirection:enum'
    name: ResizeGroupDirection
  - uid: '@fluentui/react-internal!ResponsiveMode:enum'
    name: ResponsiveMode
  - uid: '@fluentui/react-internal!ScrollablePaneBase:class'
    name: ScrollablePaneBase
  - uid: '@fluentui/react-internal!SelectableOptionMenuItemType:enum'
    name: SelectableOptionMenuItemType
  - uid: '@fluentui/react-internal!SelectedPeopleList:class'
    name: SelectedPeopleList
  - uid: '@fluentui/react-internal!SelectionZone:class'
    name: SelectionZone
  - uid: '@fluentui/react-internal!SemanticColorSlots:enum'
    name: SemanticColorSlots
  - uid: '@fluentui/react-internal!Shade:enum'
    name: Shade
  - uid: '@fluentui/react-internal!ShimmerElementsDefaultHeights:enum'
    name: ShimmerElementsDefaultHeights
  - uid: '@fluentui/react-internal!ShimmerElementType:enum'
    name: ShimmerElementType
  - uid: '@fluentui/react-internal!SpinnerBase:class'
    name: SpinnerBase
  - uid: '@fluentui/react-internal!SpinnerSize:enum'
    name: SpinnerSize
  - uid: '@fluentui/react-internal!SpinnerType:enum'
    name: SpinnerType
  - uid: '@fluentui/react-internal!Sticky:class'
    name: Sticky
  - uid: '@fluentui/react-internal!StickyPositionType:enum'
    name: StickyPositionType
  - uid: '@fluentui/react-internal!SuggestionActionType:enum'
    name: SuggestionActionType
  - uid: '@fluentui/react-internal!SuggestionItemType:enum'
    name: SuggestionItemType
  - uid: '@fluentui/react-internal!Suggestions:class'
    name: Suggestions
  - uid: '@fluentui/react-internal!SuggestionsControl:class'
    name: SuggestionsControl
  - uid: '@fluentui/react-internal!SuggestionsController:class'
    name: SuggestionsController
  - uid: '@fluentui/react-internal!SuggestionsCore:class'
    name: SuggestionsCore
  - uid: '@fluentui/react-internal!SuggestionsHeaderFooterItem:class'
    name: SuggestionsHeaderFooterItem
  - uid: '@fluentui/react-internal!SuggestionsItem:class'
    name: SuggestionsItem
  - uid: '@fluentui/react-internal!SuggestionsStore:class'
    name: SuggestionsStore
  - uid: '@fluentui/react-internal!TagPickerBase:class'
    name: TagPickerBase
  - uid: '@fluentui/react-internal!TextFieldBase:class'
    name: TextFieldBase
  - uid: '@fluentui/react-internal!ThemeGenerator:class'
    name: ThemeGenerator
  - uid: '@fluentui/react-internal!TooltipBase:class'
    name: TooltipBase
  - uid: '@fluentui/react-internal!TooltipDelay:enum'
    name: TooltipDelay
  - uid: '@fluentui/react-internal!TooltipHostBase:class'
    name: TooltipHostBase
  - uid: '@fluentui/react-internal!TooltipOverflowMode:enum'
    name: TooltipOverflowMode
  - uid: '@fluentui/react-internal!ValidationState:enum'
    name: ValidationState
