### YamlMime:TSType
name: List
uid: 'office-ui-fabric-react!List:class'
package: office-ui-fabric-react!
fullName: List
summary: >-
  The List renders virtualized pages of items. Each page's item count is
  determined by the getItemCountForPage callback if provided by the caller, or
  10 as default. Each page's height is determined by the getPageHeight callback
  if provided by the caller, or by cached measurements if available, or by a
  running average, or a default fallback.


  The algorithm for rendering pages works like this:


  1. Predict visible pages based on "current measure data" (page heights,
  surface position, visible window) 2. If changes are necessary, apply changes
  (add/remove pages) 3. For pages that are added, measure the page heights if we
  need to using getBoundingClientRect 4. If measurements don't match
  predictions, update measure data and goto step 1 asynchronously


  Measuring too frequently can pull performance down significantly. To
  compensate, we cache measured values so that we can avoid re-measuring during
  operations that should not alter heights, like scrolling.


  To optimize glass rendering performance, onShouldVirtualize can be set. When
  onShouldVirtualize return false, List will run in fast mode (not virtualized)
  to render all items without any measurements to improve page load time. And we
  start doing measurements and rendering in virtualized mode when items grows
  larger than this threshold.


  However, certain operations can make measure data stale. For example, resizing
  the list, or passing in new props, or forcing an update change cause pages to
  shrink/grow. When these operations occur, we increment a measureVersion
  number, which we associate with cached measurements and use to determine if a
  remeasure should occur.
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: (constructor)(props)
    uid: 'office-ui-fabric-react!List:constructor(1)'
    package: office-ui-fabric-react!
    fullName: (constructor)(props)
    summary: Constructs a new instance of the `List` class
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'constructor(props: IListProps<T>);'
      parameters:
        - id: props
          description: ''
          type: IListProps&lt;T&gt;
properties:
  - name: defaultProps
    uid: 'office-ui-fabric-react!List.defaultProps:member'
    package: office-ui-fabric-react!
    fullName: defaultProps
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        static defaultProps: {
                startIndex: number;
                onRenderCell: (item: any, index: number, containsFocus: boolean) => JSX.Element;
                renderedWindowsAhead: number;
                renderedWindowsBehind: number;
            };
      return:
        type: |-
          {
                  startIndex: number;
                  onRenderCell: (item: any, index: number, containsFocus: boolean) =&gt; JSX.Element;
                  renderedWindowsAhead: number;
                  renderedWindowsBehind: number;
              }
  - name: pageRefs
    uid: 'office-ui-fabric-react!List#pageRefs:member'
    package: office-ui-fabric-react!
    fullName: pageRefs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pageRefs: Readonly<Record<string, unknown>>;'
      return:
        type: 'Readonly&lt;Record&lt;string, unknown&gt;&gt;'
methods:
  - name: componentDidMount()
    uid: 'office-ui-fabric-react!List#componentDidMount:member(1)'
    package: office-ui-fabric-react!
    fullName: componentDidMount()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentDidMount(): void;'
      return:
        type: void
        description: ''
  - name: componentDidUpdate()
    uid: 'office-ui-fabric-react!List#componentDidUpdate:member(1)'
    package: office-ui-fabric-react!
    fullName: componentDidUpdate()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentDidUpdate(): void;'
      return:
        type: void
        description: ''
  - name: componentWillUnmount()
    uid: 'office-ui-fabric-react!List#componentWillUnmount:member(1)'
    package: office-ui-fabric-react!
    fullName: componentWillUnmount()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentWillUnmount(): void;'
      return:
        type: void
        description: ''
  - name: forceUpdate()
    uid: 'office-ui-fabric-react!List#forceUpdate:member(1)'
    package: office-ui-fabric-react!
    fullName: forceUpdate()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'forceUpdate(): void;'
      return:
        type: void
        description: ''
  - name: 'getDerivedStateFromProps(nextProps, previousState)'
    uid: 'office-ui-fabric-react!List.getDerivedStateFromProps:member(1)'
    package: office-ui-fabric-react!
    fullName: 'getDerivedStateFromProps(nextProps, previousState)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static getDerivedStateFromProps<T = any>(nextProps: IListProps<T>,
        previousState: IListState<T>): IListState<T>;
      parameters:
        - id: nextProps
          description: ''
          type: IListProps&lt;T&gt;
        - id: previousState
          description: ''
          type: IListState&lt;T&gt;
      return:
        type: IListState&lt;T&gt;
        description: ''
  - name: getStartItemIndexInView(measureItem)
    uid: 'office-ui-fabric-react!List#getStartItemIndexInView:member(1)'
    package: office-ui-fabric-react!
    fullName: getStartItemIndexInView(measureItem)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getStartItemIndexInView(measureItem?: (itemIndex: number) => number):
        number;
      parameters:
        - id: measureItem
          description: ''
          type: '(itemIndex: number) =&gt; number'
      return:
        type: number
        description: ''
  - name: getTotalListHeight()
    uid: 'office-ui-fabric-react!List#getTotalListHeight:member(1)'
    package: office-ui-fabric-react!
    fullName: getTotalListHeight()
    summary: Get the current height the list and it's pages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTotalListHeight(): number;'
      return:
        type: number
        description: ''
  - name: render()
    uid: 'office-ui-fabric-react!List#render:member(1)'
    package: office-ui-fabric-react!
    fullName: render()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'render(): JSX.Element | null;'
      return:
        type: JSX.Element | null
        description: ''
  - name: 'scrollToIndex(index, measureItem, scrollToMode)'
    uid: 'office-ui-fabric-react!List#scrollToIndex:member(1)'
    package: office-ui-fabric-react!
    fullName: 'scrollToIndex(index, measureItem, scrollToMode)'
    summary: >-
      Scroll to the given index. By default will bring the page the specified
      item is on into the view. If a callback to measure the height of an
      individual item is specified, will only scroll to bring the specific item
      into view.


      Note: with items of variable height and no passed in `getPageHeight`
      method, the list might jump after scrolling when windows before/ahead are
      being rendered, and the estimated height is replaced using actual
      elements.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        scrollToIndex(index: number, measureItem?: (itemIndex: number) =>
        number, scrollToMode?: ScrollToMode): void;
      parameters:
        - id: index
          description: Index of item to scroll to
          type: number
        - id: measureItem
          description: Optional callback to measure the height of an individual item
          type: '(itemIndex: number) =&gt; number'
        - id: scrollToMode
          description: >-
            Optional defines where in the window the item should be positioned
            to when scrolling
          type: ScrollToMode
      return:
        type: void
        description: ''
  - name: 'shouldComponentUpdate(newProps, newState)'
    uid: 'office-ui-fabric-react!List#shouldComponentUpdate:member(1)'
    package: office-ui-fabric-react!
    fullName: 'shouldComponentUpdate(newProps, newState)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>):
        boolean;
      parameters:
        - id: newProps
          description: ''
          type: IListProps&lt;T&gt;
        - id: newState
          description: ''
          type: IListState&lt;T&gt;
      return:
        type: boolean
        description: ''
extends: 'React.Component&lt;IListProps&lt;T&gt;, IListState&lt;T&gt;&gt; '
