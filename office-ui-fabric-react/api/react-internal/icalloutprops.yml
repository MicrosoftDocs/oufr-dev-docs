### YamlMime:TSType
name: ICalloutProps
uid: '@fluentui/react-internal!ICalloutProps:interface'
package: '@fluentui/react-internal!'
fullName: ICalloutProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: alignTargetEdge
    uid: '@fluentui/react-internal!ICalloutProps#alignTargetEdge:member'
    package: '@fluentui/react-internal!'
    fullName: alignTargetEdge
    summary: >-
      If true the positioning logic will prefer to flip edges rather than to
      nudge the rectangle to fit within bounds, thus making sure the element
      aligns perfectly with target's alignment edge.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'alignTargetEdge?: boolean;'
      return:
        type: boolean
  - name: ariaDescribedBy
    uid: '@fluentui/react-internal!ICalloutProps#ariaDescribedBy:member'
    package: '@fluentui/react-internal!'
    fullName: ariaDescribedBy
    summary: ID of the element which contains the description for the callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type: string
  - name: ariaLabel
    uid: '@fluentui/react-internal!ICalloutProps#ariaLabel:member'
    package: '@fluentui/react-internal!'
    fullName: ariaLabel
    summary: Accessible label text for callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type: string
  - name: ariaLabelledBy
    uid: '@fluentui/react-internal!ICalloutProps#ariaLabelledBy:member'
    package: '@fluentui/react-internal!'
    fullName: ariaLabelledBy
    summary: ID of the element which contains label text for the callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabelledBy?: string;'
      return:
        type: string
  - name: backgroundColor
    uid: '@fluentui/react-internal!ICalloutProps#backgroundColor:member'
    package: '@fluentui/react-internal!'
    fullName: backgroundColor
    summary: The background color of the Callout in hex format ie. \#ffffff.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'backgroundColor?: string;'
      return:
        type: string
  - name: beakWidth
    uid: '@fluentui/react-internal!ICalloutProps#beakWidth:member'
    package: '@fluentui/react-internal!'
    fullName: beakWidth
    summary: The width of the beak.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'beakWidth?: number;'
      return:
        type: number
  - name: bounds
    uid: '@fluentui/react-internal!ICalloutProps#bounds:member'
    package: '@fluentui/react-internal!'
    fullName: bounds
    summary: >-
      The bounding rectangle the callout can appear in (or callback that returns
      a rectangle).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        bounds?: IRectangle | ((target?: Target, targetWindow?: Window) =>
        IRectangle | undefined);
      return:
        type: >-
          IRectangle | ((target?: Target, targetWindow?: Window) =&gt;
          IRectangle | undefined)
  - name: calloutMaxHeight
    uid: '@fluentui/react-internal!ICalloutProps#calloutMaxHeight:member'
    package: '@fluentui/react-internal!'
    fullName: calloutMaxHeight
    summary: >-
      Set max height of callout. When not set, the callout will expand with
      contents up to the bottom of the screen.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calloutMaxHeight?: number;'
      return:
        type: number
  - name: calloutMaxWidth
    uid: '@fluentui/react-internal!ICalloutProps#calloutMaxWidth:member'
    package: '@fluentui/react-internal!'
    fullName: calloutMaxWidth
    summary: >-
      Maximum width for callout including borders. If value is 0, no width is
      applied.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calloutMaxWidth?: number;'
      return:
        type: number
  - name: calloutMinWidth
    uid: '@fluentui/react-internal!ICalloutProps#calloutMinWidth:member'
    package: '@fluentui/react-internal!'
    fullName: calloutMinWidth
    summary: >-
      Minimum width for callout including borders. If value is 0, no width is
      applied.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calloutMinWidth?: number;'
      return:
        type: number
  - name: calloutWidth
    uid: '@fluentui/react-internal!ICalloutProps#calloutWidth:member'
    package: '@fluentui/react-internal!'
    fullName: calloutWidth
    summary: >-
      Custom width for callout including borders. If value is 0, no width is
      applied.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calloutWidth?: number;'
      return:
        type: number
  - name: className
    uid: '@fluentui/react-internal!ICalloutProps#className:member'
    package: '@fluentui/react-internal!'
    fullName: className
    summary: CSS class to apply to the callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: coverTarget
    uid: '@fluentui/react-internal!ICalloutProps#coverTarget:member'
    package: '@fluentui/react-internal!'
    fullName: coverTarget
    summary: >-
      If true, the callout element will be positioned to cover the target. If
      false, it will position next to the target.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type: boolean
  - name: directionalHint
    uid: '@fluentui/react-internal!ICalloutProps#directionalHint:member'
    package: '@fluentui/react-internal!'
    fullName: directionalHint
    summary: How the element should be positioned
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type: DirectionalHint
  - name: directionalHintFixed
    uid: '@fluentui/react-internal!ICalloutProps#directionalHintFixed:member'
    package: '@fluentui/react-internal!'
    fullName: directionalHintFixed
    summary: >-
      If true the position will not change sides in an attempt to fit the
      callout within bounds. It will still attempt to align it to whatever
      bounds are given.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type: boolean
  - name: directionalHintForRTL
    uid: '@fluentui/react-internal!ICalloutProps#directionalHintForRTL:member'
    package: '@fluentui/react-internal!'
    fullName: directionalHintForRTL
    summary: >-
      How the element should be positioned in RTL layouts. If not specified, a
      mirror of the `directionalHint` alignment edge will be used instead. This
      means that `DirectionalHint.BottomLeft` will change to
      `DirectionalHint.BottomRight` but `DirectionalHint.LeftAuto` will not
      change.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type: DirectionalHint
  - name: doNotLayer
    uid: '@fluentui/react-internal!ICalloutProps#doNotLayer:member'
    package: '@fluentui/react-internal!'
    fullName: doNotLayer
    summary: 'If true, do not render on a new layer. If false, render on a new layer.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'doNotLayer?: boolean;'
      return:
        type: boolean
  - name: finalHeight
    uid: '@fluentui/react-internal!ICalloutProps#finalHeight:member'
    package: '@fluentui/react-internal!'
    fullName: finalHeight
    summary: >-
      Specify the final height of the content. To be used when expanding the
      content dynamically so that callout can adjust its position.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'finalHeight?: number;'
      return:
        type: number
  - name: gapSpace
    uid: '@fluentui/react-internal!ICalloutProps#gapSpace:member'
    package: '@fluentui/react-internal!'
    fullName: gapSpace
    summary: The gap between the Callout and the target
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'gapSpace?: number;'
      return:
        type: number
  - name: hidden
    uid: '@fluentui/react-internal!ICalloutProps#hidden:member'
    package: '@fluentui/react-internal!'
    fullName: hidden
    summary: >-
      If specified, renders the Callout in a hidden state. Use this flag, rather
      than rendering a callout conditionally based on visibility, to improve
      rendering performance when it becomes visible. Note: When callout is
      hidden its content will not be rendered. It will only render once the
      callout is visible.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hidden?: boolean;'
      return:
        type: boolean
  - name: hideOverflow
    uid: '@fluentui/react-internal!ICalloutProps#hideOverflow:member'
    package: '@fluentui/react-internal!'
    fullName: hideOverflow
    summary: >-
      Manually set `overflowYHidden` style prop to true on `calloutMain`
      element. A variety of callout load animations will need this to hide the
      scollbar that can appear.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hideOverflow?: boolean;'
      return:
        type: boolean
  - name: isBeakVisible
    uid: '@fluentui/react-internal!ICalloutProps#isBeakVisible:member'
    package: '@fluentui/react-internal!'
    fullName: isBeakVisible
    summary: Whether the beak is visible.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isBeakVisible?: boolean;'
      return:
        type: boolean
  - name: layerProps
    uid: '@fluentui/react-internal!ICalloutProps#layerProps:member'
    package: '@fluentui/react-internal!'
    fullName: layerProps
    summary: Optional props to pass to the Layer component hosting the callout.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'layerProps?: ILayerProps;'
      return:
        type: ILayerProps
  - name: minPagePadding
    uid: '@fluentui/react-internal!ICalloutProps#minPagePadding:member'
    package: '@fluentui/react-internal!'
    fullName: minPagePadding
    summary: The minimum distance the callout will be away from the edge of the screen.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'minPagePadding?: number;'
      return:
        type: number
  - name: onDismiss
    uid: '@fluentui/react-internal!ICalloutProps#onDismiss:member'
    package: '@fluentui/react-internal!'
    fullName: onDismiss
    summary: Callback when the Callout tries to close.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDismiss?: (ev?: Event | React.MouseEvent<HTMLElement> |
        React.KeyboardEvent<HTMLElement>) => void;
      return:
        type: >-
          (ev?: Event | React.MouseEvent&lt;HTMLElement&gt; |
          React.KeyboardEvent&lt;HTMLElement&gt;) =&gt; void
  - name: onLayerMounted
    uid: '@fluentui/react-internal!ICalloutProps#onLayerMounted:member'
    package: '@fluentui/react-internal!'
    fullName: onLayerMounted
    summary: Optional callback when the layer content has mounted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onLayerMounted?: () => void;'
      return:
        type: () =&gt; void
  - name: onPositioned
    uid: '@fluentui/react-internal!ICalloutProps#onPositioned:member'
    package: '@fluentui/react-internal!'
    fullName: onPositioned
    summary: >-
      Optional callback that is called once the callout has been correctly
      positioned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onPositioned?: (positions?: ICalloutPositionedInfo) => void;'
      return:
        type: '(positions?: ICalloutPositionedInfo) =&gt; void'
  - name: onRestoreFocus
    uid: '@fluentui/react-internal!ICalloutProps#onRestoreFocus:member'
    package: '@fluentui/react-internal!'
    fullName: onRestoreFocus
    summary: >-
      Called when the component is unmounting, and focus needs to be restored.
      If this is provided, focus will not be restored automatically, and you'll
      need to call `params.originalElement.focus()`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRestoreFocus?: (params: IPopupRestoreFocusParams) => void;'
      return:
        type: '(params: IPopupRestoreFocusParams) =&gt; void'
  - name: onScroll
    uid: '@fluentui/react-internal!ICalloutProps#onScroll:member'
    package: '@fluentui/react-internal!'
    fullName: onScroll
    summary: Callback when the Callout body is scrolled.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onScroll?: () => void;'
      return:
        type: () =&gt; void
  - name: preventDismissOnEvent
    uid: '@fluentui/react-internal!ICalloutProps#preventDismissOnEvent:member'
    package: '@fluentui/react-internal!'
    fullName: preventDismissOnEvent
    summary: >-
      If defined, then takes priority over `preventDismissOnLostFocus`<!-- -->,
      `preventDismissOnResize`<!-- -->, and `preventDismissOnScroll`<!-- -->. If
      it returns true, the callout will not dismiss for this event. If not
      defined or returns false, the callout can dismiss for this event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        preventDismissOnEvent?: (ev: Event | React.FocusEvent |
        React.KeyboardEvent | React.MouseEvent) => boolean;
      return:
        type: >-
          (ev: Event | React.FocusEvent | React.KeyboardEvent |
          React.MouseEvent) =&gt; boolean
  - name: preventDismissOnLostFocus
    uid: '@fluentui/react-internal!ICalloutProps#preventDismissOnLostFocus:member'
    package: '@fluentui/react-internal!'
    fullName: preventDismissOnLostFocus
    summary: If true then the callout will not dismiss when it loses focus
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use preventDismissOnEvent callback instead
    syntax:
      content: 'preventDismissOnLostFocus?: boolean;'
      return:
        type: boolean
  - name: preventDismissOnResize
    uid: '@fluentui/react-internal!ICalloutProps#preventDismissOnResize:member'
    package: '@fluentui/react-internal!'
    fullName: preventDismissOnResize
    summary: If true then the callout will not dismiss on resize
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use preventDismissOnEvent callback instead
    syntax:
      content: 'preventDismissOnResize?: boolean;'
      return:
        type: boolean
  - name: preventDismissOnScroll
    uid: '@fluentui/react-internal!ICalloutProps#preventDismissOnScroll:member'
    package: '@fluentui/react-internal!'
    fullName: preventDismissOnScroll
    summary: If true then the callout will not dismiss on scroll
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use preventDismissOnEvent callback instead
    syntax:
      content: 'preventDismissOnScroll?: boolean;'
      return:
        type: boolean
  - name: role
    uid: '@fluentui/react-internal!ICalloutProps#role:member'
    package: '@fluentui/react-internal!'
    fullName: role
    summary: >-
      Aria role assigned to the callout (e.g. `dialog`<!-- -->,
      `alertdialog`<!-- -->).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'role?: string;'
      return:
        type: string
  - name: setInitialFocus
    uid: '@fluentui/react-internal!ICalloutProps#setInitialFocus:member'
    package: '@fluentui/react-internal!'
    fullName: setInitialFocus
    summary: >-
      If true, then the callout will attempt to focus the first focusable
      element that it contains. If it doesn't find a focusable element, no focus
      will be set.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setInitialFocus?: boolean;'
      return:
        type: boolean
  - name: shouldDismissOnWindowFocus
    uid: '@fluentui/react-internal!ICalloutProps#shouldDismissOnWindowFocus:member'
    package: '@fluentui/react-internal!'
    fullName: shouldDismissOnWindowFocus
    summary: 'If true, callout will dismiss when the window gets focus.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldDismissOnWindowFocus?: boolean;'
      return:
        type: boolean
  - name: shouldRestoreFocus
    uid: '@fluentui/react-internal!ICalloutProps#shouldRestoreFocus:member'
    package: '@fluentui/react-internal!'
    fullName: shouldRestoreFocus
    summary: >-
      If specified, determines whether the underlying
      [Popup](xref:@fluentui/react-internal!Popup:var) component should try to
      restore focus when it is dismissed. When set to false, the Popup won't try
      to restore focus to the last focused element.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use `onRestoreFocus` instead
    syntax:
      content: 'shouldRestoreFocus?: boolean;'
      return:
        type: boolean
  - name: shouldUpdateWhenHidden
    uid: '@fluentui/react-internal!ICalloutProps#shouldUpdateWhenHidden:member'
    package: '@fluentui/react-internal!'
    fullName: shouldUpdateWhenHidden
    summary: >-
      If true, the component will be updated even when `hidden` is true. Note
      that this would consume resources to update even though nothing is being
      shown to the user. This might be helpful though if your updates are small
      and you want the callout to be revealed quickly to the user when `hidden`
      is set to false.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldUpdateWhenHidden?: boolean;'
      return:
        type: boolean
  - name: style
    uid: '@fluentui/react-internal!ICalloutProps#style:member'
    package: '@fluentui/react-internal!'
    fullName: style
    summary: >-
      CSS style to apply to the callout.


      If you set `overflowY` in this object, it provides a performance
      optimization by preventing Popup (underlying component of Callout) from
      calculating whether it needs a scroll bar.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style?: React.CSSProperties;'
      return:
        type: React.CSSProperties
  - name: styles
    uid: '@fluentui/react-internal!ICalloutProps#styles:member'
    package: '@fluentui/react-internal!'
    fullName: styles
    summary: Optional styles for the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        styles?: IStyleFunctionOrObject<ICalloutContentStyleProps,
        ICalloutContentStyles>;
      return:
        type: >-
          IStyleFunctionOrObject&lt;ICalloutContentStyleProps,
          ICalloutContentStyles&gt;
  - name: target
    uid: '@fluentui/react-internal!ICalloutProps#target:member'
    package: '@fluentui/react-internal!'
    fullName: target
    summary: >-
      The target that the Callout should try to position itself based on. It can
      be an element, a query selector string of a valid element, or a
      `MouseEvent`<!-- -->. If a `MouseEvent` is given, the origin point of the
      event will be used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'target?: Target;'
      return:
        type: Target
  - name: theme
    uid: '@fluentui/react-internal!ICalloutProps#theme:member'
    package: '@fluentui/react-internal!'
    fullName: theme
    summary: Optional theme for component
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
extends: React.HTMLAttributes&lt;HTMLDivElement&gt;
