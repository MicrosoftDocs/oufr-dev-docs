### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-internal!KeytipManager:class'
    summary: 'This class is responsible for handling registering, updating, and unregistering of keytips'
    name: KeytipManager
    fullName: KeytipManager
    langs:
      - typeScript
    type: class
    package: '@fluentui/react-internal!'
    children:
      - '@fluentui/react-internal!KeytipManager#addParentOverflow:member(1)'
      - '@fluentui/react-internal!KeytipManager#delayUpdatingKeytipChange:member'
      - '@fluentui/react-internal!KeytipManager#enterKeytipMode:member(1)'
      - '@fluentui/react-internal!KeytipManager#exitKeytipMode:member(1)'
      - '@fluentui/react-internal!KeytipManager.getInstance:member(1)'
      - '@fluentui/react-internal!KeytipManager#getKeytips:member(1)'
      - '@fluentui/react-internal!KeytipManager#init:member(1)'
      - '@fluentui/react-internal!KeytipManager#inKeytipMode:member'
      - '@fluentui/react-internal!KeytipManager#keytips:member'
      - '@fluentui/react-internal!KeytipManager#menuExecute:member(1)'
      - '@fluentui/react-internal!KeytipManager#persistedKeytips:member'
      - '@fluentui/react-internal!KeytipManager#register:member(1)'
      - '@fluentui/react-internal!KeytipManager#sequenceMapping:member'
      - '@fluentui/react-internal!KeytipManager#shouldEnterKeytipMode:member'
      - '@fluentui/react-internal!KeytipManager#unregister:member(1)'
      - '@fluentui/react-internal!KeytipManager#update:member(1)'
  - uid: '@fluentui/react-internal!KeytipManager#addParentOverflow:member(1)'
    summary: Adds the overflowSetSequence to the keytipProps if its parent keytip also has it
    name: addParentOverflow(keytipProps)
    fullName: addParentOverflow(keytipProps)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addParentOverflow(keytipProps: IKeytipProps): IKeytipProps;'
      return:
        type:
          - IKeytipProps
        description: 'Modified keytip props, if needed to be modified'
      parameters:
        - id: keytipProps
          description: Keytip props to add overflowSetSequence to if necessary
          type:
            - IKeytipProps
  - uid: '@fluentui/react-internal!KeytipManager#delayUpdatingKeytipChange:member'
    name: delayUpdatingKeytipChange
    fullName: delayUpdatingKeytipChange
    langs:
      - typeScript
    type: property
    syntax:
      content: 'delayUpdatingKeytipChange: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!KeytipManager#enterKeytipMode:member(1)'
    summary: Manual call to enter keytip mode
    name: enterKeytipMode()
    fullName: enterKeytipMode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'enterKeytipMode(): void;'
      return:
        type:
          - void
        description: ''
  - uid: '@fluentui/react-internal!KeytipManager#exitKeytipMode:member(1)'
    summary: Manual call to exit keytip mode
    name: exitKeytipMode()
    fullName: exitKeytipMode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'exitKeytipMode(): void;'
      return:
        type:
          - void
        description: ''
  - uid: '@fluentui/react-internal!KeytipManager.getInstance:member(1)'
    summary: Static function to get singleton KeytipManager instance
    name: getInstance()
    fullName: getInstance()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static getInstance(): KeytipManager;'
      return:
        type:
          - KeytipManager
        description: Singleton KeytipManager instance
  - uid: '@fluentui/react-internal!KeytipManager#getKeytips:member(1)'
    summary: Gets all IKeytipProps from this.keytips
    name: getKeytips()
    fullName: getKeytips()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getKeytips(): IKeytipProps[];'
      return:
        type:
          - 'IKeytipProps[]'
        description: All keytips stored in the manager
  - uid: '@fluentui/react-internal!KeytipManager#init:member(1)'
    summary: Initialization code to set set parameters to define how the KeytipManager handles keytip data.
    name: init(delayUpdatingKeytipChange)
    fullName: init(delayUpdatingKeytipChange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'init(delayUpdatingKeytipChange: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: delayUpdatingKeytipChange
          description: T/F if we should delay notifiying keytip subscribers of keytip changes
          type:
            - boolean
  - uid: '@fluentui/react-internal!KeytipManager#inKeytipMode:member'
    name: inKeytipMode
    fullName: inKeytipMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'inKeytipMode: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!KeytipManager#keytips:member'
    name: keytips
    fullName: keytips
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        keytips: {
                [key: string]: IUniqueKeytip;
            };
      return:
        type:
          - |-
            {
                    [key: string]: IUniqueKeytip;
                }
  - uid: '@fluentui/react-internal!KeytipManager#menuExecute:member(1)'
    summary: Public function to bind for overflow items that have a submenu
    name: 'menuExecute(overflowButtonSequences, keytipSequences)'
    fullName: 'menuExecute(overflowButtonSequences, keytipSequences)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'menuExecute(overflowButtonSequences: string[], keytipSequences: string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: overflowButtonSequences
          description: ''
          type:
            - 'string[]'
        - id: keytipSequences
          description: ''
          type:
            - 'string[]'
  - uid: '@fluentui/react-internal!KeytipManager#persistedKeytips:member'
    name: persistedKeytips
    fullName: persistedKeytips
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        persistedKeytips: {
                [key: string]: IUniqueKeytip;
            };
      return:
        type:
          - |-
            {
                    [key: string]: IUniqueKeytip;
                }
  - uid: '@fluentui/react-internal!KeytipManager#register:member(1)'
    summary: Registers a keytip
    name: 'register(keytipProps, persisted)'
    fullName: 'register(keytipProps, persisted)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'register(keytipProps: IKeytipProps, persisted?: boolean): string;'
      return:
        type:
          - string
        description: Unique ID for this keytip
      parameters:
        - id: keytipProps
          description: Keytip to register
          type:
            - IKeytipProps
        - id: persisted
          description: 'T/F if this keytip should be persisted, default is false'
          type:
            - boolean
  - uid: '@fluentui/react-internal!KeytipManager#sequenceMapping:member'
    name: sequenceMapping
    fullName: sequenceMapping
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        sequenceMapping: {
                [key: string]: IKeytipProps;
            };
      return:
        type:
          - |-
            {
                    [key: string]: IKeytipProps;
                }
  - uid: '@fluentui/react-internal!KeytipManager#shouldEnterKeytipMode:member'
    name: shouldEnterKeytipMode
    fullName: shouldEnterKeytipMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldEnterKeytipMode: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!KeytipManager#unregister:member(1)'
    summary: Unregisters a keytip
    name: 'unregister(keytipToRemove, uniqueID, persisted)'
    fullName: 'unregister(keytipToRemove, uniqueID, persisted)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: keytipToRemove
          description: IKeytipProps of the keytip to remove
          type:
            - IKeytipProps
        - id: uniqueID
          description: Unique ID of this keytip
          type:
            - string
        - id: persisted
          description: 'T/F if this keytip should be persisted, default is false'
          type:
            - boolean
  - uid: '@fluentui/react-internal!KeytipManager#update:member(1)'
    summary: Update a keytip
    name: 'update(keytipProps, uniqueID)'
    fullName: 'update(keytipProps, uniqueID)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'update(keytipProps: IKeytipProps, uniqueID: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: keytipProps
          description: Keytip to update
          type:
            - IKeytipProps
        - id: uniqueID
          description: Unique ID of this keytip
          type:
            - string
