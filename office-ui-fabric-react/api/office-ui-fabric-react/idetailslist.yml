### YamlMime:UniversalReference
items:
  - uid: 'office-ui-fabric-react!IDetailsList:interface'
    name: IDetailsList
    fullName: IDetailsList
    langs:
      - typeScript
    type: interface
    extends:
      - 'IList '
    package: office-ui-fabric-react!
    children:
      - 'office-ui-fabric-react!IDetailsList#focusIndex:member'
      - 'office-ui-fabric-react!IDetailsList#forceUpdate:member'
      - 'office-ui-fabric-react!IDetailsList#getStartItemIndexInView:member'
  - uid: 'office-ui-fabric-react!IDetailsList#focusIndex:member'
    summary: Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.
    name: focusIndex
    fullName: focusIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        focusIndex: (index: number, forceIntoFirstElement?: boolean, measureItem?: (itemIndex: number) => number,
        scrollToMode?: ScrollToMode) => void;
      return:
        type:
          - >-
            (index: number, forceIntoFirstElement?: boolean, measureItem?: (itemIndex: number) => number, scrollToMode?:
            ScrollToMode) => void
  - uid: 'office-ui-fabric-react!IDetailsList#forceUpdate:member'
    summary: >-
      Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the
      list still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,
      you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done
      sparingly.
    name: forceUpdate
    fullName: forceUpdate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'forceUpdate: () => void;'
      return:
        type:
          - () => void
  - uid: 'office-ui-fabric-react!IDetailsList#getStartItemIndexInView:member'
    summary: Get the start index of the page that is currently in view
    name: getStartItemIndexInView
    fullName: getStartItemIndexInView
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getStartItemIndexInView: () => number;'
      return:
        type:
          - () => number
