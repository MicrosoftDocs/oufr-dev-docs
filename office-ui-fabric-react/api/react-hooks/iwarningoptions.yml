### YamlMime:TSType
name: IWarningOptions
uid: '@fluentui/react-hooks!IWarningOptions:interface'
package: '@fluentui/react-hooks!'
fullName: IWarningOptions
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: conditionallyRequired
    uid: '@fluentui/react-hooks!IWarningOptions#conditionallyRequired:member'
    package: '@fluentui/react-hooks!'
    fullName: conditionallyRequired
    summary: Warns when props are required if a condition is met
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        conditionallyRequired?: {
                requiredProps: string[];
                conditionalPropName: string;
                condition: boolean;
            }[];
      return:
        type: |-
          {
                  requiredProps: string[];
                  conditionalPropName: string;
                  condition: boolean;
              }[]
  - name: controlledUsage
    uid: '@fluentui/react-hooks!IWarningOptions#controlledUsage:member'
    package: '@fluentui/react-hooks!'
    fullName: controlledUsage
    summary: >-
      Check for and warn on the following error conditions with a form
      component: - A value prop is provided (indicated it's being used as
      controlled) without a change handler, and the component is not read-only -
      Both the value and defaultValue props are provided - The component is
      attempting to switch between controlled and uncontrolled


      The messages mimic the warnings React gives for these error conditions on
      input elements. The warning will only be displayed once per component
      instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        controlledUsage?: Pick<IWarnControlledUsageParams<P>, 'valueProp' |
        'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'>;
      return:
        type: >-
          Pick&lt;IWarnControlledUsageParams&lt;P&gt;, 'valueProp' |
          'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'&gt;
  - name: deprecations
    uid: '@fluentui/react-hooks!IWarningOptions#deprecations:member'
    package: '@fluentui/react-hooks!'
    fullName: deprecations
    summary: >-
      Warns when deprecated props are being used. Each key is a prop name and
      each value is either undefined or a replacement prop name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'deprecations?: ISettingsMap<P>;'
      return:
        type: ISettingsMap&lt;P&gt;
  - name: mutuallyExclusive
    uid: '@fluentui/react-hooks!IWarningOptions#mutuallyExclusive:member'
    package: '@fluentui/react-hooks!'
    fullName: mutuallyExclusive
    summary: >-
      Warns when two props which are mutually exclusive are both being used. The
      key is one prop name and the value is the other.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'mutuallyExclusive?: ISettingsMap<P>;'
      return:
        type: ISettingsMap&lt;P&gt;
  - name: name
    uid: '@fluentui/react-hooks!IWarningOptions#name:member'
    package: '@fluentui/react-hooks!'
    fullName: name
    summary: Name of the component
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: other
    uid: '@fluentui/react-hooks!IWarningOptions#other:member'
    package: '@fluentui/react-hooks!'
    fullName: other
    summary: Generic messages
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'other?: string[];'
      return:
        type: 'string[]'
  - name: props
    uid: '@fluentui/react-hooks!IWarningOptions#props:member'
    package: '@fluentui/react-hooks!'
    fullName: props
    summary: Current component props
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'props: P;'
      return:
        type: P
