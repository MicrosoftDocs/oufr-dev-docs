### YamlMime:UniversalReference
items:
  - uid: '@uifabric/react-hooks!'
    name: '@uifabric/react-hooks'
    fullName: '@uifabric/react-hooks'
    langs:
      - typeScript
    type: package
    children:
      - '@uifabric/react-hooks!IUseBooleanCallbacks:interface'
      - '@uifabric/react-hooks!IWarningOptions:interface'
      - '@uifabric/react-hooks!useAsync:function(1)'
      - '@uifabric/react-hooks!useBoolean:function(1)'
      - '@uifabric/react-hooks!useConst:function(1)'
      - '@uifabric/react-hooks!useConstCallback:function(1)'
      - '@uifabric/react-hooks!useControllableValue:function(1)'
      - '@uifabric/react-hooks!useControllableValue:function(2)'
      - '@uifabric/react-hooks!useForceUpdate:function(1)'
      - '@uifabric/react-hooks!useId:function(1)'
      - '@uifabric/react-hooks!useMergedRefs:function(1)'
      - '@uifabric/react-hooks!useOnEvent:function(1)'
      - '@uifabric/react-hooks!usePrevious:function(1)'
      - '@uifabric/react-hooks!useRefEffect:function(1)'
      - '@uifabric/react-hooks!useWarnings:function(1)'
  - uid: '@uifabric/react-hooks!useAsync:function(1)'
    summary: Hook to provide an Async instance that is automatically cleaned up on dismount.
    name: useAsync()
    fullName: useAsync()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function useAsync(): Async;'
      return:
        type:
          - '@uifabric/utilities!Async:class'
        description: ''
  - uid: '@uifabric/react-hooks!useBoolean:function(1)'
    summary: >-
      Hook to store a value and generate callbacks for setting the value to true or false. The identity of the callbacks
      will always stay the same.
    name: useBoolean(initialState)
    fullName: useBoolean(initialState)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks];'
      return:
        type:
          - '[boolean, IUseBooleanCallbacks]'
        description: Array with the current value and an object containing the updater callbacks.
      parameters:
        - id: initialState
          description: Initial value
          type:
            - boolean
  - uid: '@uifabric/react-hooks!useConst:function(1)'
    summary: >-
      Hook to initialize and return a constant value. Unlike `React.useMemo`<!-- -->, this is guaranteed to always
      return the same value (and if the initializer is a function, only call it once). This is similar to setting a
      private member in a class constructor.


      If the value should ever change based on dependencies, use `React.useMemo` instead.


      If the value itself is a function, consider using `useConstCallback` instead.
    name: useConst(initialValue)
    fullName: useConst(initialValue)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function useConst<T>(initialValue: T | (() => T)): T;'
      return:
        type:
          - T
        description: The value. The identity of this value will always be the same.
      parameters:
        - id: initialValue
          description: >-
            Initial value, or function to get the initial value. Similar to `useState`<!-- -->, only the value/function
            passed in the first time this is called is respected.
          type:
            - T | (() => T)
      typeParameters:
        - id: T
  - uid: '@uifabric/react-hooks!useConstCallback:function(1)'
    summary: >-
      Hook to ensure a callback function always has the same identity. Unlike `React.useCallback`<!-- -->, this is
      guaranteed to always return the same value.


      If the callback should ever change based on dependencies, use `React.useCallback` instead.
    name: useConstCallback(callback)
    fullName: useConstCallback(callback)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function useConstCallback<T extends (...args: any[]) => any>(callback: T): T;'
      return:
        type:
          - T
        description: The callback. The identity of this callback will always be the same.
      parameters:
        - id: callback
          description: The callback. Only the first value passed is respected.
          type:
            - T
      typeParameters:
        - id: T
          type:
            - '(...args: any[]) => any'
  - uid: '@uifabric/react-hooks!useControllableValue:function(1)'
    summary: >-
      Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or text box
      string.
    name: 'useControllableValue(controlledValue, defaultUncontrolledValue)'
    fullName: 'useControllableValue(controlledValue, defaultUncontrolledValue)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function useControllableValue<TValue, TElement extends HTMLElement>(controlledValue: TValue |
        undefined, defaultUncontrolledValue: TValue | undefined): Readonly<[TValue | undefined, (update:
        React.SetStateAction<TValue | undefined>) => void]>;
      return:
        type:
          - 'Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>) => void]>'
        description: >-
          An array of the current value and an updater callback. Like `React.useState`<!-- -->, the updater callback
          always has the same identity, and it can take either a new value, or a function which is passed the previous
          value and returns the new value.  https://reactjs.org/docs/uncontrolled-components.html
      parameters:
        - id: controlledValue
          description: >-
            The controlled value passed in the props. This value will always be used if provided, and the internal state
            will be updated to reflect it.
          type:
            - TValue | undefined
        - id: defaultUncontrolledValue
          description: Initial value for the internal state in the uncontrolled case.
          type:
            - TValue | undefined
      typeParameters:
        - id: TValue
        - id: TElement
          type:
            - HTMLElement
  - uid: '@uifabric/react-hooks!useControllableValue:function(2)'
    name: 'useControllableValue(controlledValue, defaultUncontrolledValue, onChange)'
    fullName: 'useControllableValue(controlledValue, defaultUncontrolledValue, onChange)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function useControllableValue<TValue, TElement extends HTMLElement, TCallback extends
        ChangeCallback<TElement, TValue> | undefined>(controlledValue: TValue | undefined, defaultUncontrolledValue:
        TValue | undefined, onChange: TCallback): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue |
        undefined>, ev?: React.FormEvent<TElement>) => void]>;
      return:
        type:
          - >-
            Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>, ev?:
            React.FormEvent<TElement>) => void]>
        description: ''
      parameters:
        - id: controlledValue
          description: ''
          type:
            - TValue | undefined
        - id: defaultUncontrolledValue
          description: ''
          type:
            - TValue | undefined
        - id: onChange
          description: ''
          type:
            - TCallback
      typeParameters:
        - id: TValue
        - id: TElement
          type:
            - HTMLElement
        - id: TCallback
          type:
            - 'ChangeCallback<TElement, TValue> | undefined'
  - uid: '@uifabric/react-hooks!useForceUpdate:function(1)'
    summary: Hook to force update a function component by updating a dummy state.
    name: useForceUpdate()
    fullName: useForceUpdate()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function useForceUpdate(): () => void;'
      return:
        type:
          - () => void
        description: ''
  - uid: '@uifabric/react-hooks!useId:function(1)'
    summary: Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).
    name: 'useId(prefix, providedId)'
    fullName: 'useId(prefix, providedId)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function useId(prefix?: string, providedId?: string): string;'
      return:
        type:
          - string
        description: The ID
      parameters:
        - id: prefix
          description: Optional prefix for the ID
          type:
            - string
        - id: providedId
          description: >-
            Optional id provided by a parent component. Defaults to the provided value if present, without conditioning
            the hook call
          type:
            - string
  - uid: '@uifabric/react-hooks!useMergedRefs:function(1)'
    summary: >-
      React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback
      that updates all provided refs
    name: useMergedRefs(refs)
    fullName: useMergedRefs(refs)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function useMergedRefs<T>(...refs: (Ref<T> | undefined)[]): (instance: T) => void;'
      return:
        type:
          - '(instance: T) => void'
        description: ''
      parameters:
        - id: refs
          description: Refs to collectively update with one ref value.
          type:
            - '(Ref<T> | undefined)[]'
      typeParameters:
        - id: T
  - uid: '@uifabric/react-hooks!useOnEvent:function(1)'
    summary: Hook to attach an event handler on mount and handle cleanup.
    name: 'useOnEvent(element, eventName, callback, useCapture)'
    fullName: 'useOnEvent(element, eventName, callback, useCapture)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function useOnEvent<TElement extends Element, TEvent extends Event>(element:
        React.RefObject<TElement | undefined | null> | TElement | Window | undefined | null, eventName: string,
        callback: (ev: TEvent) => void, useCapture?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: element
          description: Element (or ref to an element) to attach the event handler to
          type:
            - React.RefObject<TElement | undefined | null> | TElement | Window | undefined | null
        - id: eventName
          description: The event to attach a handler for
          type:
            - string
        - id: callback
          description: The handler for the event
          type:
            - '(ev: TEvent) => void'
        - id: useCapture
          description: Whether or not to attach the handler for the capture phase
          type:
            - boolean
      typeParameters:
        - id: TElement
          type:
            - Element
        - id: TEvent
          type:
            - Event
  - uid: '@uifabric/react-hooks!usePrevious:function(1)'
    summary: |-
      Hook keeping track of a given value from a previous execution of the component the Hook is used in.

      See \[React Hooks FAQ\](https://reactjs.org/docs/hooks-faq.html\#how-to-get-the-previous-props-or-state)
    name: usePrevious(value)
    fullName: usePrevious(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function usePrevious<T>(value: T): T | undefined;'
      return:
        type:
          - T | undefined
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - T
      typeParameters:
        - id: T
  - uid: '@uifabric/react-hooks!useRefEffect:function(1)'
    summary: >-
      Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally
      return a cleanup function that'll be called before the value changes, and when the ref is unmounted.


      This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see
      https://github.com/facebook/react/issues/14387\#issuecomment-503616820).


      Usage example:


      ```ts

      const myRef = useRefEffect<HTMLElement>(element => {
       ...
       return () => { ... cleanup ... };
      });


      ```


      ```jsx

      <div ref={myRef} />


      ```
    name: 'useRefEffect(callback, initial)'
    fullName: 'useRefEffect(callback, initial)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function useRefEffect<T>(callback: (value: T) => (() => void) | void, initial?: T | null):
        RefCallback<T>;
      return:
        type:
          - RefCallback<T>
        description: >-
          A function that should be called to set the ref's value. The object also has a `.current` member that can be
          used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.
      parameters:
        - id: callback
          description: Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.
          type:
            - '(value: T) => (() => void) | void'
        - id: initial
          description: (Optional) The initial value for the ref.
          type:
            - T | null
      typeParameters:
        - id: T
  - uid: '@uifabric/react-hooks!useWarnings:function(1)'
    summary: >-
      Only in development mode, display console warnings when certain conditions are met. Note that all warnings except
      `controlledUsage` will only be shown on first render (new `controlledUsage` warnings may be shown later due to
      prop changes).
    name: useWarnings(options)
    fullName: useWarnings(options)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function useWarnings<P>(options: IWarningOptions<P>): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: ''
          type:
            - IWarningOptions<P>
      typeParameters:
        - id: P
references:
  - uid: '@uifabric/react-hooks!IUseBooleanCallbacks:interface'
    name: IUseBooleanCallbacks
  - uid: '@uifabric/react-hooks!IWarningOptions:interface'
    name: IWarningOptions
