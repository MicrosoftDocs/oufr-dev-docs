### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-date-time!ICalendarDayProps:interface'
    name: ICalendarDayProps
    fullName: ICalendarDayProps
    langs:
      - typeScript
    type: interface
    extends:
      - IBaseProps<ICalendarDay>
      - '@fluentui/react-date-time!ICalendarDayGridProps:interface'
    package: '@fluentui/react-date-time!'
    children:
      - '@fluentui/react-date-time!ICalendarDayProps#allFocusable:member'
      - '@fluentui/react-date-time!ICalendarDayProps#className:member'
      - '@fluentui/react-date-time!ICalendarDayProps#componentRef:member'
      - '@fluentui/react-date-time!ICalendarDayProps#dateTimeFormatter:member'
      - '@fluentui/react-date-time!ICalendarDayProps#maxDate:member'
      - '@fluentui/react-date-time!ICalendarDayProps#minDate:member'
      - '@fluentui/react-date-time!ICalendarDayProps#navigatedDate:member'
      - '@fluentui/react-date-time!ICalendarDayProps#navigationIcons:member'
      - '@fluentui/react-date-time!ICalendarDayProps#onDismiss:member'
      - '@fluentui/react-date-time!ICalendarDayProps#onHeaderSelect:member'
      - '@fluentui/react-date-time!ICalendarDayProps#onNavigateDate:member'
      - '@fluentui/react-date-time!ICalendarDayProps#restrictedDates:member'
      - '@fluentui/react-date-time!ICalendarDayProps#showCloseButton:member'
      - '@fluentui/react-date-time!ICalendarDayProps#showSixWeeksByDefault:member'
      - '@fluentui/react-date-time!ICalendarDayProps#showWeekNumbers:member'
      - '@fluentui/react-date-time!ICalendarDayProps#strings:member'
      - '@fluentui/react-date-time!ICalendarDayProps#styles:member'
      - '@fluentui/react-date-time!ICalendarDayProps#theme:member'
  - uid: '@fluentui/react-date-time!ICalendarDayProps#allFocusable:member'
    summary: 'Allows all dates and buttons to be focused, including disabled ones'
    name: allFocusable
    fullName: allFocusable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'allFocusable?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-date-time!ICalendarDayProps#className:member'
    summary: Additional CSS class(es) to apply to the CalendarDay.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-date-time!ICalendarDayProps#componentRef:member'
    summary: >-
      Optional callback to access the ICalendarDay interface. Use this instead of ref for accessing the public methods
      and properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<ICalendarDay>;'
      return:
        type:
          - IRefObject<ICalendarDay>
  - uid: '@fluentui/react-date-time!ICalendarDayProps#dateTimeFormatter:member'
    summary: 'Apply additional formating to dates, for example localized date formatting.'
    name: dateTimeFormatter
    fullName: dateTimeFormatter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeFormatter: IDateFormatting;'
      return:
        type:
          - '@fluentui/date-time-utilities!IDateFormatting:interface'
  - uid: '@fluentui/react-date-time!ICalendarDayProps#maxDate:member'
    summary: If set the Calendar will not allow navigation to or selection of a date later than this value.
    name: maxDate
    fullName: maxDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'maxDate?: Date;'
      return:
        type:
          - Date
  - uid: '@fluentui/react-date-time!ICalendarDayProps#minDate:member'
    summary: If set the Calendar will not allow navigation to or selection of a date earlier than this value.
    name: minDate
    fullName: minDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'minDate?: Date;'
      return:
        type:
          - Date
  - uid: '@fluentui/react-date-time!ICalendarDayProps#navigatedDate:member'
    summary: The currently navigated date
    name: navigatedDate
    fullName: navigatedDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'navigatedDate: Date;'
      return:
        type:
          - Date
  - uid: '@fluentui/react-date-time!ICalendarDayProps#navigationIcons:member'
    summary: Custom navigation icons.
    name: navigationIcons
    fullName: navigationIcons
    langs:
      - typeScript
    type: property
    syntax:
      content: 'navigationIcons: ICalendarNavigationIcons;'
      return:
        type:
          - '@fluentui/react-date-time!ICalendarNavigationIcons:interface'
  - uid: '@fluentui/react-date-time!ICalendarDayProps#onDismiss:member'
    summary: Callback issued when calendar day is closed
    name: onDismiss
    fullName: onDismiss
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDismiss?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-date-time!ICalendarDayProps#onHeaderSelect:member'
    summary: Callback function when the header is selected
    name: onHeaderSelect
    fullName: onHeaderSelect
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onHeaderSelect?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-date-time!ICalendarDayProps#onNavigateDate:member'
    summary: Callback issued when a date in the calendar is navigated
    name: onNavigateDate
    fullName: onNavigateDate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;'
      return:
        type:
          - '(date: Date, focusOnNavigatedDay: boolean) => void'
  - uid: '@fluentui/react-date-time!ICalendarDayProps#restrictedDates:member'
    summary: If set the Calendar will not allow selection of dates in this array.
    name: restrictedDates
    fullName: restrictedDates
    langs:
      - typeScript
    type: property
    syntax:
      content: 'restrictedDates?: Date[];'
      return:
        type:
          - 'Date[]'
  - uid: '@fluentui/react-date-time!ICalendarDayProps#showCloseButton:member'
    summary: Whether the close button should be shown or not
    name: showCloseButton
    fullName: showCloseButton
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showCloseButton?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-date-time!ICalendarDayProps#showSixWeeksByDefault:member'
    summary: Whether the calendar should show 6 weeks by default.
    name: showSixWeeksByDefault
    fullName: showSixWeeksByDefault
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showSixWeeksByDefault?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-date-time!ICalendarDayProps#showWeekNumbers:member'
    summary: Whether the calendar should show the week number (weeks 1 to 53) before each week row
    name: showWeekNumbers
    fullName: showWeekNumbers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showWeekNumbers?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-date-time!ICalendarDayProps#strings:member'
    summary: Localized strings to use in the Calendar
    name: strings
    fullName: strings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'strings: ICalendarStrings;'
      return:
        type:
          - ICalendarStrings
  - uid: '@fluentui/react-date-time!ICalendarDayProps#styles:member'
    summary: Customized styles for the calendar day component
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<ICalendarDayStyleProps, ICalendarDayStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<ICalendarDayStyleProps, ICalendarDayStyles>'
  - uid: '@fluentui/react-date-time!ICalendarDayProps#theme:member'
    summary: Theme (provided through customization).
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@fluentui/theme!ITheme:interface'
