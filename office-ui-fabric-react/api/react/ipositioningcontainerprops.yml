### YamlMime:TSType
name: IPositioningContainerProps
uid: '@fluentui/react!IPositioningContainerProps:interface'
package: '@fluentui/react!'
fullName: IPositioningContainerProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: ariaDescribedBy
    uid: '@fluentui/react!IPositioningContainerProps#ariaDescribedBy:member'
    package: '@fluentui/react!'
    fullName: ariaDescribedBy
    summary: >-
      Defines the element id referencing the element containing the description
      for the positioningContainer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type: string
  - name: ariaLabel
    uid: '@fluentui/react!IPositioningContainerProps#ariaLabel:member'
    package: '@fluentui/react!'
    fullName: ariaLabel
    summary: Accessible label text for positioningContainer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type: string
  - name: ariaLabelledBy
    uid: '@fluentui/react!IPositioningContainerProps#ariaLabelledBy:member'
    package: '@fluentui/react!'
    fullName: ariaLabelledBy
    summary: >-
      Defines the element id referencing the element containing label text for
      positioningContainer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabelledBy?: string;'
      return:
        type: string
  - name: backgroundColor
    uid: '@fluentui/react!IPositioningContainerProps#backgroundColor:member'
    package: '@fluentui/react!'
    fullName: backgroundColor
    summary: >-
      The background color of the positioningContainer in hex format ie.
      \#ffffff.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'backgroundColor?: string;'
      return:
        type: string
  - name: bounds
    uid: '@fluentui/react!IPositioningContainerProps#bounds:member'
    package: '@fluentui/react!'
    fullName: bounds
    summary: The bounding rectangle for which the contextual menu can appear in.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'bounds?: IRectangle;'
      return:
        type: '<xref uid="@fluentui/utilities!IRectangle:interface" />'
  - name: children
    uid: '@fluentui/react!IPositioningContainerProps#children:member'
    package: '@fluentui/react!'
    fullName: children
    summary: Child nodes to render
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'children?: ReactNode;'
      return:
        type: ReactNode
  - name: className
    uid: '@fluentui/react!IPositioningContainerProps#className:member'
    package: '@fluentui/react!'
    fullName: className
    summary: CSS class to apply to the positioningContainer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: componentRef
    uid: '@fluentui/react!IPositioningContainerProps#componentRef:member'
    package: '@fluentui/react!'
    fullName: componentRef
    summary: All props for your component are to be defined here.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IPositioningContainer>;'
      return:
        type: IRefObject&lt;IPositioningContainer&gt;
  - name: coverTarget
    uid: '@fluentui/react!IPositioningContainerProps#coverTarget:member'
    package: '@fluentui/react!'
    fullName: coverTarget
    summary: >-
      If true the position returned will have the menu element cover the target.
      If false then it will position next to the target;
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type: boolean
  - name: directionalHint
    uid: '@fluentui/react!IPositioningContainerProps#directionalHint:member'
    package: '@fluentui/react!'
    fullName: directionalHint
    summary: How the element should be positioned
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type: DirectionalHint
  - name: directionalHintFixed
    uid: '@fluentui/react!IPositioningContainerProps#directionalHintFixed:member'
    package: '@fluentui/react!'
    fullName: directionalHintFixed
    summary: >-
      If true the position will not change sides in an attempt to fit the
      positioningContainer within bounds. It will still attempt to align it to
      whatever bounds are given.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type: boolean
  - name: directionalHintForRTL
    uid: '@fluentui/react!IPositioningContainerProps#directionalHintForRTL:member'
    package: '@fluentui/react!'
    fullName: directionalHintForRTL
    summary: >-
      How the element should be positioned in RTL layouts. If not specified, a
      mirror of `directionalHint` will be used instead
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type: DirectionalHint
  - name: doNotLayer
    uid: '@fluentui/react!IPositioningContainerProps#doNotLayer:member'
    package: '@fluentui/react!'
    fullName: doNotLayer
    summary: If true do not render on a new layer. If false render on a new layer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'doNotLayer?: boolean;'
      return:
        type: boolean
  - name: finalHeight
    uid: '@fluentui/react!IPositioningContainerProps#finalHeight:member'
    package: '@fluentui/react!'
    fullName: finalHeight
    summary: >-
      Specify the final height of the content. To be used when expanding the
      content dynamically so that positioningContainer can adjust its position.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'finalHeight?: number;'
      return:
        type: number
  - name: minPagePadding
    uid: '@fluentui/react!IPositioningContainerProps#minPagePadding:member'
    package: '@fluentui/react!'
    fullName: minPagePadding
    summary: >-
      The minimum distance the positioningContainer will be away from the edge
      of the screen.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'minPagePadding?: number;'
      return:
        type: number
  - name: offsetFromTarget
    uid: '@fluentui/react!IPositioningContainerProps#offsetFromTarget:member'
    package: '@fluentui/react!'
    fullName: offsetFromTarget
    summary: The gap between the positioningContainer and the target
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'offsetFromTarget?: number;'
      return:
        type: number
  - name: onDismiss
    uid: '@fluentui/react!IPositioningContainerProps#onDismiss:member'
    package: '@fluentui/react!'
    fullName: onDismiss
    summary: Callback when the positioningContainer tries to close.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onDismiss?: (ev?: any) => void;'
      return:
        type: '(ev?: any) =&gt; void'
  - name: onLayerMounted
    uid: '@fluentui/react!IPositioningContainerProps#onLayerMounted:member'
    package: '@fluentui/react!'
    fullName: onLayerMounted
    summary: Optional callback when the layer content has mounted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onLayerMounted?: () => void;'
      return:
        type: () =&gt; void
  - name: onPositioned
    uid: '@fluentui/react!IPositioningContainerProps#onPositioned:member'
    package: '@fluentui/react!'
    fullName: onPositioned
    summary: >-
      Optional callback that is called once the positioningContainer has been
      correctly positioned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onPositioned?: (positions?: IPositionedData) => void;'
      return:
        type: '(positions?: IPositionedData) =&gt; void'
  - name: positioningContainerMaxHeight
    uid: >-
      @fluentui/react!IPositioningContainerProps#positioningContainerMaxHeight:member
    package: '@fluentui/react!'
    fullName: positioningContainerMaxHeight
    summary: >-
      Set max height of positioningContainer When not set the
      positioningContainer will expand with contents up to the bottom of the
      screen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'positioningContainerMaxHeight?: number;'
      return:
        type: number
  - name: positioningContainerWidth
    uid: >-
      @fluentui/react!IPositioningContainerProps#positioningContainerWidth:member
    package: '@fluentui/react!'
    fullName: positioningContainerWidth
    summary: >-
      Custom width for positioningContainer including borders. If value is 0, no
      width is applied.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'positioningContainerWidth?: number;'
      return:
        type: number
  - name: preventDismissOnScroll
    uid: '@fluentui/react!IPositioningContainerProps#preventDismissOnScroll:member'
    package: '@fluentui/react!'
    fullName: preventDismissOnScroll
    summary: If true then the onClose will not not dismiss on scroll
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'preventDismissOnScroll?: boolean;'
      return:
        type: boolean
  - name: role
    uid: '@fluentui/react!IPositioningContainerProps#role:member'
    package: '@fluentui/react!'
    fullName: role
    summary: 'Aria role assigned to the positioningContainer (Eg. dialog, alertdialog).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'role?: string;'
      return:
        type: string
  - name: setInitialFocus
    uid: '@fluentui/react!IPositioningContainerProps#setInitialFocus:member'
    package: '@fluentui/react!'
    fullName: setInitialFocus
    summary: >-
      If true then the positioningContainer will attempt to focus the first
      focusable element that it contains. If it doesn't find an element, no
      focus will be set and the method will return false. This means that it's
      the contents responsibility to either set focus or have focusable items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setInitialFocus?: boolean;'
      return:
        type: boolean
  - name: target
    uid: '@fluentui/react!IPositioningContainerProps#target:member'
    package: '@fluentui/react!'
    fullName: target
    summary: >-
      The target that the positioningContainer should try to position itself
      based on. It can be either an HTMLElement a querySelector string of a
      valid HTMLElement or a MouseEvent. If MouseEvent is given then the origin
      point of the event will be used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'target?: HTMLElement | string | MouseEvent | Point | null;'
      return:
        type: HTMLElement | string | MouseEvent | Point | null
  - name: targetPoint
    uid: '@fluentui/react!IPositioningContainerProps#targetPoint:member'
    package: '@fluentui/react!'
    fullName: targetPoint
    summary: >-
      Point used to position the positioningContainer. Deprecated, use `target`
      instead.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `target` instead.
    syntax:
      content: 'targetPoint?: Point;'
      return:
        type: '<xref uid="@fluentui/utilities!Point:interface" />'
  - name: useTargetPoint
    uid: '@fluentui/react!IPositioningContainerProps#useTargetPoint:member'
    package: '@fluentui/react!'
    fullName: useTargetPoint
    summary: >-
      If true use a point rather than rectangle to position the
      positioningContainer. For example it can be used to position based on a
      click.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Do not use.
    syntax:
      content: 'useTargetPoint?: boolean;'
      return:
        type: boolean
extends: IBaseProps&lt;IPositioningContainer&gt;
