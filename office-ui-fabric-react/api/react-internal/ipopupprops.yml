### YamlMime:TSType
name: IPopupProps
uid: '@fluentui/react-internal!IPopupProps:interface'
package: '@fluentui/react-internal!'
fullName: IPopupProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: ariaDescribedBy
    uid: '@fluentui/react-internal!IPopupProps#ariaDescribedBy:member'
    package: '@fluentui/react-internal!'
    fullName: ariaDescribedBy
    summary: >-
      Defines the element id referencing the element containing the description
      for the popup.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type: string
  - name: ariaLabel
    uid: '@fluentui/react-internal!IPopupProps#ariaLabel:member'
    package: '@fluentui/react-internal!'
    fullName: ariaLabel
    summary: Accessible label text for the popup.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type: string
  - name: ariaLabelledBy
    uid: '@fluentui/react-internal!IPopupProps#ariaLabelledBy:member'
    package: '@fluentui/react-internal!'
    fullName: ariaLabelledBy
    summary: >-
      Defines the element id referencing the element containing label text for
      popup.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabelledBy?: string;'
      return:
        type: string
  - name: className
    uid: '@fluentui/react-internal!IPopupProps#className:member'
    package: '@fluentui/react-internal!'
    fullName: className
    summary: Optional class name for the root popup div.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: onDismiss
    uid: '@fluentui/react-internal!IPopupProps#onDismiss:member'
    package: '@fluentui/react-internal!'
    fullName: onDismiss
    summary: >-
      A callback function for when the popup is dismissed from the close button
      or light dismiss. If provided, will handle escape key press and call this.
      The event will be stopped/canceled.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDismiss?: (ev?: React.MouseEvent<HTMLElement> |
        React.KeyboardEvent<HTMLElement> | KeyboardEvent) => any;
      return:
        type: >-
          (ev?: React.MouseEvent&lt;HTMLElement&gt; |
          React.KeyboardEvent&lt;HTMLElement&gt; | KeyboardEvent) =&gt; any
  - name: onRestoreFocus
    uid: '@fluentui/react-internal!IPopupProps#onRestoreFocus:member'
    package: '@fluentui/react-internal!'
    fullName: onRestoreFocus
    summary: >-
      Called when the component is unmounting, and focus needs to be restored.
      Argument passed down contains two variables, the element that the
      underlying popup believes focus should go to \* and whether or not the
      popup currently contains focus. If this is provided, focus will not be
      restored automatically, you'll need to call originalElement.focus()
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        onRestoreFocus?: (options: {
                originalElement?: HTMLElement | Window;
                containsFocus: boolean;
                documentContainsFocus: boolean;
            }) => void;
      return:
        type: |-
          (options: {
                  originalElement?: HTMLElement | Window;
                  containsFocus: boolean;
                  documentContainsFocus: boolean;
              }) =&gt; void
  - name: role
    uid: '@fluentui/react-internal!IPopupProps#role:member'
    package: '@fluentui/react-internal!'
    fullName: role
    summary: Aria role for popup
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'role?: string;'
      return:
        type: string
  - name: shouldRestoreFocus
    uid: '@fluentui/react-internal!IPopupProps#shouldRestoreFocus:member'
    package: '@fluentui/react-internal!'
    fullName: shouldRestoreFocus
    summary: >-
      If true, when this component is unmounted, focus will be restored to the
      element that had focus when the component first mounted.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: use restoreFocus callback instead
    syntax:
      content: 'shouldRestoreFocus?: boolean;'
      return:
        type: boolean
extends: React.HTMLAttributes&lt;HTMLDivElement&gt;
