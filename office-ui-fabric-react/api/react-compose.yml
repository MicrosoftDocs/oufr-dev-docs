### YamlMime:TSPackage
uid: '@fluentui/react-compose!'
name: '@fluentui/react-compose'
type: package
summary: ''
interfaces:
  - '@fluentui/react-compose!BaseSlots:interface'
  - '@fluentui/react-compose!ComponentProps:interface'
  - '@fluentui/react-compose!ShorthandConfig:interface'
functions:
  - name: 'compose(input, inputOptions)'
    uid: '@fluentui/react-compose!compose:function(1)'
    package: '@fluentui/react-compose!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        declare function compose<TElementType extends keyof
        JSX.IntrinsicElements, TInputProps, TInputStylesProps, TParentProps,
        TParentStylesProps>(input: Input<TElementType, TInputProps>,
        inputOptions?: ComposeOptions<TInputProps, TInputStylesProps,
        TParentProps, TParentStylesProps>): ComponentWithAs<TElementType,
        TInputProps & TParentProps>;
      parameters:
        - id: input
          description: ''
          type: 'Input&lt;TElementType, TInputProps&gt;'
        - id: inputOptions
          description: ''
          type: >-
            ComposeOptions&lt;TInputProps, TInputStylesProps, TParentProps,
            TParentStylesProps&gt;
      return:
        type: 'ComponentWithAs&lt;TElementType, TInputProps & TParentProps&gt;'
        description: ''
  - name: 'mergeProps(state, options)'
    uid: '@fluentui/react-compose!mergeProps:function(1)'
    package: '@fluentui/react-compose!'
    summary: >-
      Merge props takes in state and compose options, and resolves slots and
      slotProps. It's expected that the component will call mergeProps(state,
      options) from within render; after resolving state and before rendering
      slots and slotProps.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function mergeProps<TProps, TState = TProps, TSlots =
        GenericDictionary, TSlotProps = {
            [key in keyof TSlots]: any;
        }>(state: TState, options: ComposePreparedOptions<TProps, TState>):
        MergePropsResult<TState, TSlots, TSlotProps>;
      parameters:
        - id: state
          description: ''
          type: TState
        - id: options
          description: ''
          type: 'ComposePreparedOptions&lt;TProps, TState&gt;'
      return:
        type: 'MergePropsResult&lt;TState, TSlots, TSlotProps&gt;'
        description: ''
  - name: 'mergeSlotProp(slotProp, slotProps, mappedProp)'
    uid: '@fluentui/react-compose!mergeSlotProp:function(1)'
    package: '@fluentui/react-compose!'
    summary: Merge props for a slot to a slot prop.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function mergeSlotProp<TProps>(slotProp:
        SlotProp<TProps>, slotProps: TProps, mappedProp?: string):
        SlotProp<TProps>;
      parameters:
        - id: slotProp
          description: Slot prop.
          type: SlotProp&lt;TProps&gt;
        - id: slotProps
          description: Props for the slot.
          type: TProps
        - id: mappedProp
          description: Optional mapped prop name for the slotProp after merging.
          type: string
      return:
        type: SlotProp&lt;TProps&gt;
        description: ''
