### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps:interface'
    name: IChoiceGroupOptionProps
    fullName: IChoiceGroupOptionProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'Omit<IChoiceGroupOption, ''key''> '
    package: '@fluentui/react-next!'
    children:
      - '@fluentui/react-next!IChoiceGroupOptionProps#componentRef:member'
      - '@fluentui/react-next!IChoiceGroupOptionProps#focused:member'
      - '@fluentui/react-next!IChoiceGroupOptionProps#itemKey:member'
      - '@fluentui/react-next!IChoiceGroupOptionProps#name:member'
      - '@fluentui/react-next!IChoiceGroupOptionProps#onBlur:member'
      - '@fluentui/react-next!IChoiceGroupOptionProps#onChange:member'
      - '@fluentui/react-next!IChoiceGroupOptionProps#onFocus:member'
      - '@fluentui/react-next!IChoiceGroupOptionProps#required:member'
      - '@fluentui/react-next!IChoiceGroupOptionProps#theme:member'
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#componentRef:member'
    summary: >-
      Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing the public methods
      and properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IChoiceGroupOption>;'
      return:
        type:
          - IRefObject<IChoiceGroupOption>
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#focused:member'
    summary: 'Indicates if the ChoiceGroupOption should appear focused, visually'
    name: focused
    fullName: focused
    langs:
      - typeScript
    type: property
    syntax:
      content: 'focused?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#itemKey:member'
    name: itemKey
    fullName: itemKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemKey?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#name:member'
    summary: This value is used to group each ChoiceGroupOption into the same logical ChoiceGroup
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#onBlur:member'
    summary: A callback for receiving a notification when the choice has lost focus.
    name: onBlur
    fullName: onBlur
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onBlur?: (ev: React.FocusEvent<HTMLElement>, props?: IChoiceGroupOption) => void;'
      return:
        type:
          - '(ev: React.FocusEvent<HTMLElement>, props?: IChoiceGroupOption) => void'
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#onChange:member'
    summary: A callback for receiving a notification when the choice has been changed.
    name: onChange
    fullName: onChange
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onChange?: (evt?: React.FormEvent<HTMLElement | HTMLInputElement>, props?: IChoiceGroupOption) => void;'
      return:
        type:
          - '(evt?: React.FormEvent<HTMLElement | HTMLInputElement>, props?: IChoiceGroupOption) => void'
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#onFocus:member'
    summary: A callback for receiving a notification when the choice has received focus.
    name: onFocus
    fullName: onFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        onFocus?: (ev?: React.FocusEvent<HTMLElement | HTMLInputElement>, props?: IChoiceGroupOption) => void |
        undefined;
      return:
        type:
          - '(ev?: React.FocusEvent<HTMLElement | HTMLInputElement>, props?: IChoiceGroupOption) => void | undefined'
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#required:member'
    summary: 'If true, it specifies that an option must be selected in the ChoiceGroup before submitting the form'
    name: required
    fullName: required
    langs:
      - typeScript
    type: property
    syntax:
      content: 'required?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IChoiceGroupOptionProps#theme:member'
    summary: Theme (provided through customization.)
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@fluentui/theme!ITheme:interface'
