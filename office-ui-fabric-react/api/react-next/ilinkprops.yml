### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-next!ILinkProps:interface'
    name: ILinkProps
    fullName: ILinkProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'ILinkHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement> '
    package: '@fluentui/react-next!'
    children:
      - '@fluentui/react-next!ILinkProps#as:member'
      - '@fluentui/react-next!ILinkProps#componentRef:member'
      - '@fluentui/react-next!ILinkProps#disabled:member'
      - '@fluentui/react-next!ILinkProps#keytipProps:member'
      - '@fluentui/react-next!ILinkProps#styles:member'
      - '@fluentui/react-next!ILinkProps#theme:member'
  - uid: '@fluentui/react-next!ILinkProps#as:member'
    summary: A component that should be used as the root element of the link returned from the Link component.
    name: as
    fullName: as
    langs:
      - typeScript
    type: property
    syntax:
      content: 'as?: string | React.ComponentClass | React.FunctionComponent;'
      return:
        type:
          - string | React.ComponentClass | React.FunctionComponent
  - uid: '@fluentui/react-next!ILinkProps#componentRef:member'
    summary: >-
      Optional callback to access the ILink interface. Use this instead of ref for accessing the public methods and
      properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<ILink>;'
      return:
        type:
          - IRefObject<ILink>
  - uid: '@fluentui/react-next!ILinkProps#disabled:member'
    summary: Whether the link is disabled
    name: disabled
    fullName: disabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'disabled?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!ILinkProps#keytipProps:member'
    summary: Optional keytip for this Link
    name: keytipProps
    fullName: keytipProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'keytipProps?: IKeytipProps;'
      return:
        type:
          - 'office-ui-fabric-react!IKeytipProps:interface'
  - uid: '@fluentui/react-next!ILinkProps#styles:member'
    summary: Call to provide customized styling that will layer on top of the variant rules.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>'
  - uid: '@fluentui/react-next!ILinkProps#theme:member'
    summary: Theme (provided through customization.)
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@uifabric/styling!ITheme:interface'
