### YamlMime:UniversalReference
items:
  - uid: 'office-ui-fabric-react!List:class'
    summary: >-
      The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage
      callback if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight
      callback if provided by the caller, or by cached measurements if available, or by a running average, or a default
      fallback.


      The algorithm for rendering pages works like this:


      1. Predict visible pages based on "current measure data" (page heights, surface position, visible window) 2. If
      changes are necessary, apply changes (add/remove pages) 3. For pages that are added, measure the page heights if
      we need to using getBoundingClientRect 4. If measurements don't match predictions, update measure data and goto
      step 1 asynchronously


      Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that
      we can avoid re-measuring during operations that should not alter heights, like scrolling.


      To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false, List
      will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.
      And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.


      However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,
      or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion
      number, which we associate with cached measurements and use to determine if a remeasure should occur.
    name: List
    fullName: List
    langs:
      - typeScript
    type: class
    extends:
      - 'React.Component<IListProps<T>, IListState<T>> '
    implements:
      - 'office-ui-fabric-react!IList:interface'
    package: office-ui-fabric-react!
    children:
      - 'office-ui-fabric-react!List:constructor(1)'
      - 'office-ui-fabric-react!List#componentDidMount:member(1)'
      - 'office-ui-fabric-react!List#componentWillUnmount:member(1)'
      - 'office-ui-fabric-react!List.defaultProps:member'
      - 'office-ui-fabric-react!List#forceUpdate:member(1)'
      - 'office-ui-fabric-react!List#getStartItemIndexInView:member(1)'
      - 'office-ui-fabric-react!List#getTotalListHeight:member(1)'
      - 'office-ui-fabric-react!List#pageRefs:member'
      - 'office-ui-fabric-react!List#render:member(1)'
      - 'office-ui-fabric-react!List#scrollToIndex:member(1)'
      - 'office-ui-fabric-react!List#shouldComponentUpdate:member(1)'
      - 'office-ui-fabric-react!List#UNSAFE_componentWillReceiveProps:member(1)'
  - uid: 'office-ui-fabric-react!List:constructor(1)'
    summary: Constructs a new instance of the `List` class
    name: (constructor)(props)
    fullName: (constructor)(props)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(props: IListProps<T>);'
      parameters:
        - id: props
          description: ''
          type:
            - IListProps<T>
  - uid: 'office-ui-fabric-react!List#componentDidMount:member(1)'
    name: componentDidMount()
    fullName: componentDidMount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentDidMount(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'office-ui-fabric-react!List#componentWillUnmount:member(1)'
    name: componentWillUnmount()
    fullName: componentWillUnmount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentWillUnmount(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'office-ui-fabric-react!List.defaultProps:member'
    name: defaultProps
    fullName: defaultProps
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        static defaultProps: {
                startIndex: number;
                onRenderCell: (item: any, index: number, containsFocus: boolean) => JSX.Element;
                renderedWindowsAhead: number;
                renderedWindowsBehind: number;
            };
      return:
        type:
          - |-
            {
                    startIndex: number;
                    onRenderCell: (item: any, index: number, containsFocus: boolean) => JSX.Element;
                    renderedWindowsAhead: number;
                    renderedWindowsBehind: number;
                }
  - uid: 'office-ui-fabric-react!List#forceUpdate:member(1)'
    name: forceUpdate()
    fullName: forceUpdate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'forceUpdate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'office-ui-fabric-react!List#getStartItemIndexInView:member(1)'
    name: getStartItemIndexInView(measureItem)
    fullName: getStartItemIndexInView(measureItem)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: measureItem
          description: ''
          type:
            - '(itemIndex: number) => number'
  - uid: 'office-ui-fabric-react!List#getTotalListHeight:member(1)'
    summary: Get the current height the list and it's pages.
    name: getTotalListHeight()
    fullName: getTotalListHeight()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTotalListHeight(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'office-ui-fabric-react!List#pageRefs:member'
    name: pageRefs
    fullName: pageRefs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageRefs: Readonly<Record<string, unknown>>;'
      return:
        type:
          - 'Readonly<Record<string, unknown>>'
  - uid: 'office-ui-fabric-react!List#render:member(1)'
    name: render()
    fullName: render()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'render(): JSX.Element | null;'
      return:
        type:
          - JSX.Element | null
        description: ''
  - uid: 'office-ui-fabric-react!List#scrollToIndex:member(1)'
    summary: >-
      Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback to
      measure the height of an individual item is specified, will only scroll to bring the specific item into view.


      Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling
      when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.
    name: 'scrollToIndex(index, measureItem, scrollToMode)'
    fullName: 'scrollToIndex(index, measureItem, scrollToMode)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: index
          description: Index of item to scroll to
          type:
            - number
        - id: measureItem
          description: Optional callback to measure the height of an individual item
          type:
            - '(itemIndex: number) => number'
        - id: scrollToMode
          description: Optional defines where in the window the item should be positioned to when scrolling
          type:
            - ScrollToMode
  - uid: 'office-ui-fabric-react!List#shouldComponentUpdate:member(1)'
    name: 'shouldComponentUpdate(newProps, newState)'
    fullName: 'shouldComponentUpdate(newProps, newState)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: newProps
          description: ''
          type:
            - IListProps<T>
        - id: newState
          description: ''
          type:
            - IListState<T>
  - uid: 'office-ui-fabric-react!List#UNSAFE_componentWillReceiveProps:member(1)'
    name: UNSAFE_componentWillReceiveProps(newProps)
    fullName: UNSAFE_componentWillReceiveProps(newProps)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'UNSAFE_componentWillReceiveProps(newProps: IListProps<T>): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newProps
          description: ''
          type:
            - IListProps<T>
