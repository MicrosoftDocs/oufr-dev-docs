### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-focus!IFocusZoneProps:interface'
    summary: FocusZone component props.
    name: IFocusZoneProps
    fullName: IFocusZoneProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'React.HTMLAttributes<HTMLElement | FocusZone> '
    package: '@fluentui/react-focus!'
    children:
      - '@fluentui/react-focus!IFocusZoneProps#allowFocusRoot:member'
      - '@fluentui/react-focus!IFocusZoneProps#allowTabKey:member'
      - '@fluentui/react-focus!IFocusZoneProps#ariaDescribedBy:member'
      - '@fluentui/react-focus!IFocusZoneProps#ariaLabelledBy:member'
      - '@fluentui/react-focus!IFocusZoneProps#as:member'
      - '@fluentui/react-focus!IFocusZoneProps#checkForNoWrap:member'
      - '@fluentui/react-focus!IFocusZoneProps#className:member'
      - '@fluentui/react-focus!IFocusZoneProps#componentRef:member'
      - '@fluentui/react-focus!IFocusZoneProps#defaultActiveElement:member'
      - '@fluentui/react-focus!IFocusZoneProps#defaultTabbableElement:member'
      - '@fluentui/react-focus!IFocusZoneProps#direction:member'
      - '@fluentui/react-focus!IFocusZoneProps#disabled:member'
      - '@fluentui/react-focus!IFocusZoneProps#doNotAllowFocusEventToPropagate:member'
      - '@fluentui/react-focus!IFocusZoneProps#elementType:member'
      - '@fluentui/react-focus!IFocusZoneProps#handleTabKey:member'
      - '@fluentui/react-focus!IFocusZoneProps#isCircularNavigation:member'
      - '@fluentui/react-focus!IFocusZoneProps#isInnerZoneKeystroke:member'
      - '@fluentui/react-focus!IFocusZoneProps#onActiveElementChanged:member'
      - '@fluentui/react-focus!IFocusZoneProps#onBeforeFocus:member'
      - '@fluentui/react-focus!IFocusZoneProps#onFocus:member'
      - '@fluentui/react-focus!IFocusZoneProps#onFocusNotification:member'
      - '@fluentui/react-focus!IFocusZoneProps#pagingSupportDisabled:member'
      - '@fluentui/react-focus!IFocusZoneProps#preventDefaultWhenHandled:member'
      - '@fluentui/react-focus!IFocusZoneProps#preventFocusRestoration:member'
      - '@fluentui/react-focus!IFocusZoneProps#rootProps:member'
      - '@fluentui/react-focus!IFocusZoneProps#shouldEnterInnerZone:member'
      - '@fluentui/react-focus!IFocusZoneProps#shouldFocusInnerElementWhenReceivedFocus:member'
      - '@fluentui/react-focus!IFocusZoneProps#shouldFocusOnMount:member'
      - '@fluentui/react-focus!IFocusZoneProps#shouldInputLoseFocusOnArrowKey:member'
      - '@fluentui/react-focus!IFocusZoneProps#shouldReceiveFocus:member'
      - '@fluentui/react-focus!IFocusZoneProps#shouldResetActiveElementWhenTabFromZone:member'
      - '@fluentui/react-focus!IFocusZoneProps#stopFocusPropagation:member'
  - uid: '@fluentui/react-focus!IFocusZoneProps#allowFocusRoot:member'
    summary: Allows focus to park on root when focus is in the `FocusZone` at render time.
    name: allowFocusRoot
    fullName: allowFocusRoot
    langs:
      - typeScript
    type: property
    syntax:
      content: 'allowFocusRoot?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#allowTabKey:member'
    summary: >-
      Allows tab key to be handled to tab through a list of items in the focus zone, an unfortunate side effect is that
      users will not be able to tab out of the focus zone and have to hit escape or some other key.
    deprecated:
      content: Use `handleTabKey` instead.
    name: allowTabKey
    fullName: allowTabKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'allowTabKey?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#ariaDescribedBy:member'
    summary: Sets the aria-describedby attribute.
    deprecated:
      content: Directly use the `aria-describedby` attribute instead
    name: ariaDescribedBy
    fullName: ariaDescribedBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-focus!IFocusZoneProps#ariaLabelledBy:member'
    summary: Sets the aria-labelledby attribute.
    deprecated:
      content: Directly use the `aria-labelledby` attribute instead
    name: ariaLabelledBy
    fullName: ariaLabelledBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelledBy?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-focus!IFocusZoneProps#as:member'
    summary: A component that should be used as the root element of the FocusZone component.
    name: as
    fullName: as
    langs:
      - typeScript
    type: property
    syntax:
      content: 'as?: React.ElementType;'
      return:
        type:
          - React.ElementType
  - uid: '@fluentui/react-focus!IFocusZoneProps#checkForNoWrap:member'
    summary: >-
      Determines whether to check for data-no-horizontal-wrap or data-no-vertical-wrap attributes when determining how
      to move focus
    name: checkForNoWrap
    fullName: checkForNoWrap
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkForNoWrap?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#className:member'
    summary: 'Additional class name to provide on the root element, in addition to the ms-FocusZone class.'
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-focus!IFocusZoneProps#componentRef:member'
    summary: >-
      Optional callback to access the IFocusZone interface. Use this instead of ref for accessing the public methods and
      properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IFocusZone>;'
      return:
        type:
          - IRefObject<IFocusZone>
  - uid: '@fluentui/react-focus!IFocusZoneProps#defaultActiveElement:member'
    summary: Optionally provide a selector for identifying the initial active element.
    deprecated:
      content: Use `defaultTabbableElement` instead.
    name: defaultActiveElement
    fullName: defaultActiveElement
    langs:
      - typeScript
    type: property
    syntax:
      content: 'defaultActiveElement?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-focus!IFocusZoneProps#defaultTabbableElement:member'
    summary: >-
      Optionally defines the initial tabbable element inside the FocusZone. If a string is passed then it is treated as
      a selector for identifying the initial tabbable element. If a function is passed then it uses the root element as
      a parameter to return the initial tabbable element.
    name: defaultTabbableElement
    fullName: defaultTabbableElement
    langs:
      - typeScript
    type: property
    syntax:
      content: 'defaultTabbableElement?: string | ((root: HTMLElement) => HTMLElement);'
      return:
        type:
          - 'string | ((root: HTMLElement) => HTMLElement)'
  - uid: '@fluentui/react-focus!IFocusZoneProps#direction:member'
    summary: Defines which arrows to react to.
    name: direction
    fullName: direction
    langs:
      - typeScript
    type: property
    syntax:
      content: 'direction?: FocusZoneDirection;'
      return:
        type:
          - '@fluentui/react-focus!FocusZoneDirection:enum'
  - uid: '@fluentui/react-focus!IFocusZoneProps#disabled:member'
    summary: >-
      If set, the FocusZone will not be tabbable and keyboard navigation will be disabled. This does not affect disabled
      attribute of any child.
    name: disabled
    fullName: disabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'disabled?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#doNotAllowFocusEventToPropagate:member'
    summary: Whether the FocusZone should allow focus events to propagate past the FocusZone.
    deprecated:
      content: Use `stopFocusPropagation` instead.
    name: doNotAllowFocusEventToPropagate
    fullName: doNotAllowFocusEventToPropagate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doNotAllowFocusEventToPropagate?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#elementType:member'
    summary: Element type the root element will use. Default is "div".
    deprecated:
      content: Use 'as' instead.
    name: elementType
    fullName: elementType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'elementType?: any;'
      return:
        type:
          - any
  - uid: '@fluentui/react-focus!IFocusZoneProps#handleTabKey:member'
    summary: >-
      Allows tab key to be handled to tab through a list of items in the focus zone, an unfortunate side effect is that
      users will not be able to tab out of the focus zone and have to hit escape or some other key.
    name: handleTabKey
    fullName: handleTabKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'handleTabKey?: FocusZoneTabbableElements;'
      return:
        type:
          - FocusZoneTabbableElements
  - uid: '@fluentui/react-focus!IFocusZoneProps#isCircularNavigation:member'
    summary: >-
      If set, will cycle to the beginning of the targets once the user navigates to the next target while at the end,
      and to the end when navigate to the previous at the beginning.
    name: isCircularNavigation
    fullName: isCircularNavigation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isCircularNavigation?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#isInnerZoneKeystroke:member'
    summary: >-
      If provided, this callback will be executed on keypresses to determine if the user intends to navigate into the
      inner zone. Returning true will ask the first inner zone to set focus.
    deprecated:
      content: Use `shouldEnterInnerZone` instead.
    name: isInnerZoneKeystroke
    fullName: isInnerZoneKeystroke
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isInnerZoneKeystroke?: (ev: React.KeyboardEvent<HTMLElement>) => boolean;'
      return:
        type:
          - '(ev: React.KeyboardEvent<HTMLElement>) => boolean'
  - uid: '@fluentui/react-focus!IFocusZoneProps#onActiveElementChanged:member'
    summary: >-
      Callback for when one of immediate children elements gets active by getting focused or by having one of its
      respective children elements focused.
    name: onActiveElementChanged
    fullName: onActiveElementChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onActiveElementChanged?: (element?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;'
      return:
        type:
          - '(element?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void'
  - uid: '@fluentui/react-focus!IFocusZoneProps#onBeforeFocus:member'
    summary: Callback method for determining if focus should indeed be set on the given element.
    deprecated:
      content: Use `shouldReceiveFocus` instead.
    name: onBeforeFocus
    fullName: onBeforeFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onBeforeFocus?: (childElement?: HTMLElement) => boolean;'
      return:
        type:
          - '(childElement?: HTMLElement) => boolean'
  - uid: '@fluentui/react-focus!IFocusZoneProps#onFocus:member'
    summary: Callback called when "focus" event triggered in FocusZone.
    name: onFocus
    fullName: onFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onFocus?: (event: React.FocusEvent<HTMLElement | FocusZone>) => void;'
      return:
        type:
          - '(event: React.FocusEvent<HTMLElement | FocusZone>) => void'
  - uid: '@fluentui/react-focus!IFocusZoneProps#onFocusNotification:member'
    summary: Callback to notify creators that focus has been set on the FocusZone
    deprecated:
      content: Use `onFocus` instead.
    name: onFocusNotification
    fullName: onFocusNotification
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onFocusNotification?: () => void;'
      return:
        type:
          - () => void
  - uid: '@fluentui/react-focus!IFocusZoneProps#pagingSupportDisabled:member'
    summary: Determines whether to disable the paging support for Page Up and Page Down keyboard scenarios.
    name: pagingSupportDisabled
    fullName: pagingSupportDisabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'pagingSupportDisabled?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#preventDefaultWhenHandled:member'
    summary: 'If true, FocusZone prevents the default behavior of Keyboard events when changing focus between elements.'
    name: preventDefaultWhenHandled
    fullName: preventDefaultWhenHandled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventDefaultWhenHandled?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#preventFocusRestoration:member'
    summary: >-
      If true, prevents the FocusZone from attempting to restore the focus to the inner element when the focus is on the
      root element after componentDidUpdate.
    name: preventFocusRestoration
    fullName: preventFocusRestoration
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventFocusRestoration?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#rootProps:member'
    summary: Deprecated at v1.12.1. DIV props provided to the FocusZone will be mixed into the root element.
    deprecated:
      content: DIV props provided to the FocusZone will be mixed into the root element.
    name: rootProps
    fullName: rootProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rootProps?: React.HTMLAttributes<HTMLDivElement>;'
      return:
        type:
          - React.HTMLAttributes<HTMLDivElement>
  - uid: '@fluentui/react-focus!IFocusZoneProps#shouldEnterInnerZone:member'
    summary: >-
      Callback function that will be executed on keypresses to determine if the user intends to navigate into the inner
      (nested) zone. Returning true will ask the first inner zone to set focus.
    name: shouldEnterInnerZone
    fullName: shouldEnterInnerZone
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldEnterInnerZone?: (ev: React.KeyboardEvent<HTMLElement>) => boolean;'
      return:
        type:
          - '(ev: React.KeyboardEvent<HTMLElement>) => boolean'
  - uid: '@fluentui/react-focus!IFocusZoneProps#shouldFocusInnerElementWhenReceivedFocus:member'
    summary: >-
      If true and FocusZone's root element (container) receives focus, the focus will land either on the
      defaultTabbableElement (if set) or on the first tabbable element of this FocusZone. Usually a case for nested
      focus zones, when the nested focus zone's container is a focusable element.
    name: shouldFocusInnerElementWhenReceivedFocus
    fullName: shouldFocusInnerElementWhenReceivedFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldFocusInnerElementWhenReceivedFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#shouldFocusOnMount:member'
    summary: Determines if a default tabbable element should be force focused on FocusZone mount.  false
    name: shouldFocusOnMount
    fullName: shouldFocusOnMount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldFocusOnMount?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#shouldInputLoseFocusOnArrowKey:member'
    summary: A callback method to determine if the input element should lose focus on arrow keys
    name: shouldInputLoseFocusOnArrowKey
    fullName: shouldInputLoseFocusOnArrowKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldInputLoseFocusOnArrowKey?: (inputElement: HTMLInputElement) => boolean;'
      return:
        type:
          - '(inputElement: HTMLInputElement) => boolean'
  - uid: '@fluentui/react-focus!IFocusZoneProps#shouldReceiveFocus:member'
    summary: Callback method for determining if focus should indeed be set on the given element.
    name: shouldReceiveFocus
    fullName: shouldReceiveFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldReceiveFocus?: (childElement?: HTMLElement) => boolean;'
      return:
        type:
          - '(childElement?: HTMLElement) => boolean'
  - uid: '@fluentui/react-focus!IFocusZoneProps#shouldResetActiveElementWhenTabFromZone:member'
    summary: >-
      If true and TAB key is not handled by FocusZone, resets current active element to null value. For example, when
      roving index is not desirable and focus should always reset to the default tabbable element.
    name: shouldResetActiveElementWhenTabFromZone
    fullName: shouldResetActiveElementWhenTabFromZone
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldResetActiveElementWhenTabFromZone?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-focus!IFocusZoneProps#stopFocusPropagation:member'
    summary: Whether the FocusZone should allow focus events to propagate past the FocusZone.
    name: stopFocusPropagation
    fullName: stopFocusPropagation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopFocusPropagation?: boolean;'
      return:
        type:
          - boolean
