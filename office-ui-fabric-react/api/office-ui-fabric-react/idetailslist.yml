### YamlMime:TSType
name: IDetailsList
uid: 'office-ui-fabric-react!IDetailsList:interface'
package: office-ui-fabric-react!
fullName: IDetailsList
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: focusIndex
    uid: 'office-ui-fabric-react!IDetailsList#focusIndex:member'
    package: office-ui-fabric-react!
    fullName: focusIndex
    summary: >-
      Scroll to and focus the item at the given index. focusIndex will call
      scrollToIndex on the specified index.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        focusIndex: (index: number, forceIntoFirstElement?: boolean,
        measureItem?: (itemIndex: number) => number, scrollToMode?:
        ScrollToMode) => void;
      return:
        type: >-
          (index: number, forceIntoFirstElement?: boolean, measureItem?:
          (itemIndex: number) =&gt; number, scrollToMode?: ScrollToMode) =&gt;
          void
  - name: forceUpdate
    uid: 'office-ui-fabric-react!IDetailsList#forceUpdate:member'
    package: office-ui-fabric-react!
    fullName: forceUpdate
    summary: >-
      Ensures that the list content is updated. Call this in cases where the
      list prop updates don't change, but the list still needs to be
      re-evaluated. For example, if a sizer bar is adjusted and causes the list
      width to change, you can call this to force a re-evaluation. Be aware that
      this can be an expensive operation and should be done sparingly.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'forceUpdate: () => void;'
      return:
        type: () =&gt; void
  - name: getStartItemIndexInView
    uid: 'office-ui-fabric-react!IDetailsList#getStartItemIndexInView:member'
    package: office-ui-fabric-react!
    fullName: getStartItemIndexInView
    summary: Get the start index of the page that is currently in view
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getStartItemIndexInView: () => number;'
      return:
        type: () =&gt; number
extends: 'IList '
