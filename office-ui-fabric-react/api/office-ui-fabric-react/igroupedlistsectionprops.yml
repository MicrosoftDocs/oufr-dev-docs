### YamlMime:UniversalReference
items:
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps:interface'
    name: IGroupedListSectionProps
    fullName: IGroupedListSectionProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'React.ClassAttributes<GroupedListSection> '
    package: office-ui-fabric-react!
    children:
      - 'office-ui-fabric-react!IGroupedListSectionProps#compact:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#componentRef:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#dragDropEvents:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#dragDropHelper:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#eventsToRegister:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#footerProps:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#getGroupItemLimit:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#group:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#groupedListClassNames:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#groupIndex:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#groupNestingDepth:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#groupProps:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#groups:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#headerProps:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#items:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#listProps:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#onRenderCell:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#onRenderGroupFooter:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#onRenderGroupHeader:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#onRenderGroupShowAll:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#onShouldVirtualize:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#selection:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#selectionMode:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#showAllProps:member'
      - 'office-ui-fabric-react!IGroupedListSectionProps#viewport:member'
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#compact:member'
    summary: Whether to render in compact mode
    name: compact
    fullName: compact
    langs:
      - typeScript
    type: property
    syntax:
      content: 'compact?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#componentRef:member'
    summary: Gets the component ref.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: () => void;'
      return:
        type:
          - () => void
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#dragDropEvents:member'
    summary: Map of callback functions related to drag and drop functionality.
    name: dragDropEvents
    fullName: dragDropEvents
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dragDropEvents?: IDragDropEvents;'
      return:
        type:
          - IDragDropEvents
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#dragDropHelper:member'
    summary: helper to manage drag/drop across item rows and groups
    name: dragDropHelper
    fullName: dragDropHelper
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dragDropHelper?: IDragDropHelper;'
      return:
        type:
          - IDragDropHelper
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#eventsToRegister:member'
    summary: Event names and corresponding callbacks that will be registered to the group and the rendered elements
    name: eventsToRegister
    fullName: eventsToRegister
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        eventsToRegister?: {
                eventName: string;
                callback: (context: IDragDropContext, event?: any) => void;
            }[];
      return:
        type:
          - |-
            {
                    eventName: string;
                    callback: (context: IDragDropContext, event?: any) => void;
                }[]
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#footerProps:member'
    summary: Information to pass in to the group footer.
    name: footerProps
    fullName: footerProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'footerProps?: IGroupFooterProps;'
      return:
        type:
          - IGroupFooterProps
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#getGroupItemLimit:member'
    summary: Grouping item limit.
    name: getGroupItemLimit
    fullName: getGroupItemLimit
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getGroupItemLimit?: (group: IGroup) => number;'
      return:
        type:
          - '(group: IGroup) => number'
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#group:member'
    summary: Optional grouping instructions.
    name: group
    fullName: group
    langs:
      - typeScript
    type: property
    syntax:
      content: 'group?: IGroup;'
      return:
        type:
          - IGroup
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#groupedListClassNames:member'
    summary: GroupedList resolved class names
    name: groupedListClassNames
    fullName: groupedListClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;'
      return:
        type:
          - IProcessedStyleSet<IGroupedListStyles>
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#groupIndex:member'
    summary: Optional grouping instructions.
    name: groupIndex
    fullName: groupIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groupIndex?: number;'
      return:
        type:
          - number
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#groupNestingDepth:member'
    summary: Optional group nesting level.
    name: groupNestingDepth
    fullName: groupNestingDepth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groupNestingDepth?: number;'
      return:
        type:
          - number
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#groupProps:member'
    summary: Optional override properties to render groups.
    name: groupProps
    fullName: groupProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groupProps?: IGroupRenderProps;'
      return:
        type:
          - IGroupRenderProps
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#groups:member'
    summary: Stores parent group's children.
    name: groups
    fullName: groups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groups?: IGroup[];'
      return:
        type:
          - 'IGroup[]'
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#headerProps:member'
    summary: Information to pass in to the group header.
    name: headerProps
    fullName: headerProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'headerProps?: IGroupHeaderProps;'
      return:
        type:
          - IGroupHeaderProps
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#items:member'
    summary: List of items to render.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'items: any[];'
      return:
        type:
          - 'any[]'
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#listProps:member'
    summary: Optional list props to pass to list renderer.
    name: listProps
    fullName: listProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'listProps?: IListProps;'
      return:
        type:
          - IListProps
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#onRenderCell:member'
    summary: Rendering callback to render the group items.
    name: onRenderCell
    fullName: onRenderCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;'
      return:
        type:
          - '(nestingDepth?: number, item?: any, index?: number) => React.ReactNode'
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#onRenderGroupFooter:member'
    summary: Override for rendering the group footer.
    name: onRenderGroupFooter
    fullName: onRenderGroupFooter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;'
      return:
        type:
          - IRenderFunction<IGroupFooterProps>
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#onRenderGroupHeader:member'
    summary: Override for rendering the group header.
    name: onRenderGroupHeader
    fullName: onRenderGroupHeader
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;'
      return:
        type:
          - IRenderFunction<IGroupHeaderProps>
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#onRenderGroupShowAll:member'
    summary: Override for rendering the group Show All link.
    name: onRenderGroupShowAll
    fullName: onRenderGroupShowAll
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;'
      return:
        type:
          - IRenderFunction<IGroupShowAllProps>
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#onShouldVirtualize:member'
    summary: >-
      Optional callback to determine whether the list should be rendered in full, or virtualized. Virtualization will
      add and remove pages of items as the user scrolls them into the visible range. This benefits larger list scenarios
      by reducing the DOM on the screen, but can negatively affect performance for smaller lists. The default
      implementation will virtualize when this callback is not provided.
    name: onShouldVirtualize
    fullName: onShouldVirtualize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onShouldVirtualize?: (props: IListProps) => boolean;'
      return:
        type:
          - '(props: IListProps) => boolean'
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#selection:member'
    summary: Optional selection model to track selection state.
    name: selection
    fullName: selection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selection?: ISelection;'
      return:
        type:
          - '@fluentui/utilities!ISelection:interface'
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#selectionMode:member'
    summary: Controls how/if the details list manages selection.
    name: selectionMode
    fullName: selectionMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectionMode?: SelectionMode;'
      return:
        type:
          - '@fluentui/utilities!SelectionMode:enum'
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#showAllProps:member'
    summary: Information to pass in to the group Show All footer.
    name: showAllProps
    fullName: showAllProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showAllProps?: IGroupShowAllProps;'
      return:
        type:
          - IGroupShowAllProps
  - uid: 'office-ui-fabric-react!IGroupedListSectionProps#viewport:member'
    summary: 'Optional Viewport, provided by the parent component.'
    name: viewport
    fullName: viewport
    langs:
      - typeScript
    type: property
    syntax:
      content: 'viewport?: IViewport;'
      return:
        type:
          - 'office-ui-fabric-react!IViewport:interface'
