### YamlMime:TSType
name: Customizations
uid: '@fluentui/utilities!Customizations:class'
package: '@fluentui/utilities!'
fullName: Customizations
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: class
methods:
  - name: 'applyBatchedUpdates(code, suppressUpdate)'
    uid: '@fluentui/utilities!Customizations.applyBatchedUpdates:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'applyBatchedUpdates(code, suppressUpdate)'
    summary: >-
      Used to run some code that sets Customizations without triggering an
      update until the end. Useful for applying Customizations that don't affect
      anything currently rendered, or for applying many customizations at once.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean):
        void;
      parameters:
        - id: code
          description: ''
          type: () =&gt; void
        - id: suppressUpdate
          description: 'Do not raise the change event at the end, preventing all updates'
          type: boolean
      return:
        type: void
        description: ''
  - name: 'applyScopedSettings(scopeName, settings)'
    uid: '@fluentui/utilities!Customizations.applyScopedSettings:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'applyScopedSettings(scopeName, settings)'
    summary: 'Apply Customizations to a particular named scope, like a component.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static applyScopedSettings(scopeName: string, settings: ISettings):
        void;
      parameters:
        - id: scopeName
          description: ''
          type: string
        - id: settings
          description: ''
          type: ISettings
      return:
        type: void
        description: ''
  - name: applySettings(settings)
    uid: '@fluentui/utilities!Customizations.applySettings:member(1)'
    package: '@fluentui/utilities!'
    fullName: applySettings(settings)
    summary: Apply global Customization settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static applySettings(settings: ISettings): void;'
      parameters:
        - id: settings
          description: ''
          type: ISettings
      return:
        type: void
        description: ''
  - name: 'getSettings(properties, scopeName, localSettings)'
    uid: '@fluentui/utilities!Customizations.getSettings:member(1)'
    package: '@fluentui/utilities!'
    fullName: 'getSettings(properties, scopeName, localSettings)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static getSettings(properties: string[], scopeName?: string,
        localSettings?: ICustomizations): any;
      parameters:
        - id: properties
          description: ''
          type: 'string[]'
        - id: scopeName
          description: ''
          type: string
        - id: localSettings
          description: ''
          type: '<xref uid="@fluentui/utilities!ICustomizations:interface" />'
      return:
        type: any
        description: ''
  - name: observe(onChange)
    uid: '@fluentui/utilities!Customizations.observe:member(1)'
    package: '@fluentui/utilities!'
    fullName: observe(onChange)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static observe(onChange: () => void): void;'
      parameters:
        - id: onChange
          description: ''
          type: () =&gt; void
      return:
        type: void
        description: ''
  - name: reset()
    uid: '@fluentui/utilities!Customizations.reset:member(1)'
    package: '@fluentui/utilities!'
    fullName: reset()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static reset(): void;'
      return:
        type: void
        description: ''
  - name: unobserve(onChange)
    uid: '@fluentui/utilities!Customizations.unobserve:member(1)'
    package: '@fluentui/utilities!'
    fullName: unobserve(onChange)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static unobserve(onChange: () => void): void;'
      parameters:
        - id: onChange
          description: ''
          type: () =&gt; void
      return:
        type: void
        description: ''
