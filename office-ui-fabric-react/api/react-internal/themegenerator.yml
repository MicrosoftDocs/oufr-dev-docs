### YamlMime:TSType
name: ThemeGenerator
uid: '@fluentui/react-internal!ThemeGenerator:class'
package: '@fluentui/react-internal!'
fullName: ThemeGenerator
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: class
methods:
  - name: getThemeAsCode(slotRules)
    uid: '@fluentui/react-internal!ThemeGenerator.getThemeAsCode:member(1)'
    package: '@fluentui/react-internal!'
    fullName: getThemeAsCode(slotRules)
    summary: >-
      Gets code-formatted load theme blob that can be copy and pasted. Only used
      for the old theme designer, where loadTheme usage is acceptable, unlike in
      the new theme designer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static getThemeAsCode(slotRules: IThemeRules): any;'
      parameters:
        - id: slotRules
          description: ''
          type: IThemeRules
      return:
        type: any
        description: ''
  - name: getThemeAsCodeWithCreateTheme(slotRules)
    uid: >-
      @fluentui/react-internal!ThemeGenerator.getThemeAsCodeWithCreateTheme:member(1)
    package: '@fluentui/react-internal!'
    fullName: getThemeAsCodeWithCreateTheme(slotRules)
    summary: >-
      Gets code-formatted load theme blob, specifically for the new theme
      designer, aka.ms/themedesigner. Shouldn't use loadTheme like the old theme
      designer since it's deprecated. We want to use the theme object from
      createTheme and use the Customizations.applySettings API instead.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static getThemeAsCodeWithCreateTheme(slotRules: IThemeRules): any;'
      parameters:
        - id: slotRules
          description: ''
          type: IThemeRules
      return:
        type: any
        description: ''
  - name: getThemeAsJson(slotRules)
    uid: '@fluentui/react-internal!ThemeGenerator.getThemeAsJson:member(1)'
    package: '@fluentui/react-internal!'
    fullName: getThemeAsJson(slotRules)
    summary: >-
      Gets the JSON-formatted blob that describes the theme, usable with the
      REST request endpoints:


      ```

      { [theme slot name as string] : [color as string],
       "tokenName": "#f00f00",
       "tokenName2": "#ba2ba2",
        ... }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static getThemeAsJson(slotRules: IThemeRules): any;'
      parameters:
        - id: slotRules
          description: ''
          type: IThemeRules
      return:
        type: any
        description: ''
  - name: getThemeAsSass(slotRules)
    uid: '@fluentui/react-internal!ThemeGenerator.getThemeAsSass:member(1)'
    package: '@fluentui/react-internal!'
    fullName: getThemeAsSass(slotRules)
    summary: |-
      Gets the theme as a list of SASS variables that can be used in code

      ```
      $tokenName: "[theme:tokenName, default:#f00f00]";
      $tokenName2: "[theme:tokenName2, default:#ba2ba2]";
      ...

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static getThemeAsSass(slotRules: IThemeRules): any;'
      parameters:
        - id: slotRules
          description: ''
          type: IThemeRules
      return:
        type: any
        description: ''
  - name: getThemeForPowerShell(slotRules)
    uid: '@fluentui/react-internal!ThemeGenerator.getThemeForPowerShell:member(1)'
    package: '@fluentui/react-internal!'
    fullName: getThemeForPowerShell(slotRules)
    summary: |-
      Gets the theme formatted for PowerShell scripts

      ```
      @{
      "tokenName" = "#f00f00";
      "tokenName2" = "#ba2ba2";
      ...
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static getThemeForPowerShell(slotRules: IThemeRules): any;'
      parameters:
        - id: slotRules
          description: ''
          type: IThemeRules
      return:
        type: any
        description: ''
  - name: 'insureSlots(slotRules, isInverted)'
    uid: '@fluentui/react-internal!ThemeGenerator.insureSlots:member(1)'
    package: '@fluentui/react-internal!'
    fullName: 'insureSlots(slotRules, isInverted)'
    summary: >-
      Sets the color of each slot based on its rule. Slots that don't inherit
      must have a color already. If this completes without error, then the theme
      is ready to use. (All slots will have a color.) setSlot() can be called
      before this, but this must be called before getThemeAs\*(). Does not
      override colors of rules where isCustomized is true (i.e. doesn't override
      existing customizations).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static insureSlots(slotRules: IThemeRules, isInverted: boolean): void;'
      parameters:
        - id: slotRules
          description: ''
          type: IThemeRules
        - id: isInverted
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: 'setSlot(rule, color, isInverted, isCustomization, overwriteCustomColor)'
    uid: '@fluentui/react-internal!ThemeGenerator.setSlot:member(1)'
    package: '@fluentui/react-internal!'
    fullName: 'setSlot(rule, color, isInverted, isCustomization, overwriteCustomColor)'
    summary: >-
      Sets an IThemeSlotRule to the given color and cascades it to the rest of
      the theme, updating other IThemeSlotRules in the theme that inherit from
      that color.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static setSlot(rule: IThemeSlotRule, color: string | IColor,
        isInverted?: boolean, isCustomization?: boolean, overwriteCustomColor?:
        boolean): void;
      parameters:
        - id: rule
          description: ''
          type: IThemeSlotRule
        - id: color
          description: ''
          type: string | IColor
        - id: isInverted
          description: >-
            whether it's a dark theme or not, which affects the algorithm used
            to generate shades
          type: boolean
        - id: isCustomization
          description: >-
            should be true only if it's a user action, and indicates overwriting
            the slot's inheritance (if any)
          type: boolean
        - id: overwriteCustomColor
          description: >-
            A slot could have a generated color based on its inheritance rules
            (isCustomized is false), or a custom color based on user input
            (isCustomized is true). This bool tells us whether to override
            existing customized colors.
          type: boolean
      return:
        type: void
        description: ''
