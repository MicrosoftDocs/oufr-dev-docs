### YamlMime:TSType
name: FocusZone
uid: '@fluentui/react-focus!FocusZone:class'
package: '@fluentui/react-focus!'
fullName: FocusZone
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: (constructor)(props)
    uid: '@fluentui/react-focus!FocusZone:constructor(1)'
    package: '@fluentui/react-focus!'
    fullName: (constructor)(props)
    summary: Constructs a new instance of the `FocusZone` class
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'constructor(props: IFocusZoneProps);'
      parameters:
        - id: props
          description: ''
          type: '<xref uid="@fluentui/react-focus!IFocusZoneProps:interface" />'
properties:
  - name: defaultProps
    uid: '@fluentui/react-focus!FocusZone.defaultProps:member'
    package: '@fluentui/react-focus!'
    fullName: defaultProps
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static defaultProps: IFocusZoneProps;'
      return:
        type: '<xref uid="@fluentui/react-focus!IFocusZoneProps:interface" />'
methods:
  - name: componentDidMount()
    uid: '@fluentui/react-focus!FocusZone#componentDidMount:member(1)'
    package: '@fluentui/react-focus!'
    fullName: componentDidMount()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentDidMount(): void;'
      return:
        type: void
        description: ''
  - name: componentDidUpdate()
    uid: '@fluentui/react-focus!FocusZone#componentDidUpdate:member(1)'
    package: '@fluentui/react-focus!'
    fullName: componentDidUpdate()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentDidUpdate(): void;'
      return:
        type: void
        description: ''
  - name: componentWillUnmount()
    uid: '@fluentui/react-focus!FocusZone#componentWillUnmount:member(1)'
    package: '@fluentui/react-focus!'
    fullName: componentWillUnmount()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentWillUnmount(): void;'
      return:
        type: void
        description: ''
  - name: focus(forceIntoFirstElement)
    uid: '@fluentui/react-focus!FocusZone#focus:member(1)'
    package: '@fluentui/react-focus!'
    fullName: focus(forceIntoFirstElement)
    summary: Sets focus to the first tabbable item in the zone.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'focus(forceIntoFirstElement?: boolean): boolean;'
      parameters:
        - id: forceIntoFirstElement
          description: >-
            If true, focus will be forced into the first element, even if focus
            is already in the focus zone.
          type: boolean
      return:
        type: boolean
        description: >-
          True if focus could be set to an active element, false if no operation
          was taken.
  - name: 'focusElement(element, forceAlignment)'
    uid: '@fluentui/react-focus!FocusZone#focusElement:member(1)'
    package: '@fluentui/react-focus!'
    fullName: 'focusElement(element, forceAlignment)'
    summary: >-
      Sets focus to a specific child element within the zone. This can be used
      in conjunction with shouldReceiveFocus to create delayed focus scenarios
      (like animate the scroll position to the correct location and then focus.)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'focusElement(element: HTMLElement, forceAlignment?: boolean): boolean;'
      parameters:
        - id: element
          description: The child element within the zone to focus.
          type: HTMLElement
        - id: forceAlignment
          description: >-
            If true, focus alignment will be set according to the element
            provided.
          type: boolean
      return:
        type: boolean
        description: >-
          True if focus could be set to an active element, false if no operation
          was taken.
  - name: focusLast()
    uid: '@fluentui/react-focus!FocusZone#focusLast:member(1)'
    package: '@fluentui/react-focus!'
    fullName: focusLast()
    summary: Sets focus to the last tabbable item in the zone.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'focusLast(): boolean;'
      return:
        type: boolean
        description: >-
          True if focus could be set to an active element, false if no operation
          was taken.
  - name: getOuterZones()
    uid: '@fluentui/react-focus!FocusZone.getOuterZones:member(1)'
    package: '@fluentui/react-focus!'
    fullName: getOuterZones()
    summary: Used for testing purposes only.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static getOuterZones(): number;'
      return:
        type: number
        description: ''
  - name: render()
    uid: '@fluentui/react-focus!FocusZone#render:member(1)'
    package: '@fluentui/react-focus!'
    fullName: render()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'render(): React.ReactNode;'
      return:
        type: React.ReactNode
        description: ''
  - name: setFocusAlignment(point)
    uid: '@fluentui/react-focus!FocusZone#setFocusAlignment:member(1)'
    package: '@fluentui/react-focus!'
    fullName: setFocusAlignment(point)
    summary: >-
      Forces horizontal alignment in the context of vertical arrowing to use
      specific point as the reference, rather than a center based on the last
      horizontal motion.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFocusAlignment(point: Point): void;'
      parameters:
        - id: point
          description: the new reference point.
          type: '<xref uid="@fluentui/utilities!Point:interface" />'
      return:
        type: void
        description: ''
extends: 'React.Component&lt;IFocusZoneProps&gt; '
