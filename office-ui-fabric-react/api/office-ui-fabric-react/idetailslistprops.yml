### YamlMime:UniversalReference
items:
  - uid: 'office-ui-fabric-react!IDetailsListProps:interface'
    name: IDetailsListProps
    fullName: IDetailsListProps
    langs:
      - typeScript
    type: interface
    extends:
      - IBaseProps<IDetailsList>
      - 'office-ui-fabric-react!IWithViewportProps:interface'
    package: office-ui-fabric-react!
    children:
      - 'office-ui-fabric-react!IDetailsListProps#ariaLabel:member'
      - 'office-ui-fabric-react!IDetailsListProps#ariaLabelForGrid:member'
      - 'office-ui-fabric-react!IDetailsListProps#ariaLabelForListHeader:member'
      - 'office-ui-fabric-react!IDetailsListProps#ariaLabelForSelectAllCheckbox:member'
      - 'office-ui-fabric-react!IDetailsListProps#ariaLabelForSelectionColumn:member'
      - 'office-ui-fabric-react!IDetailsListProps#cellStyleProps:member'
      - 'office-ui-fabric-react!IDetailsListProps#checkboxCellClassName:member'
      - 'office-ui-fabric-react!IDetailsListProps#checkboxVisibility:member'
      - 'office-ui-fabric-react!IDetailsListProps#checkButtonAriaLabel:member'
      - 'office-ui-fabric-react!IDetailsListProps#className:member'
      - 'office-ui-fabric-react!IDetailsListProps#columnReorderOptions:member'
      - 'office-ui-fabric-react!IDetailsListProps#columns:member'
      - 'office-ui-fabric-react!IDetailsListProps#compact:member'
      - 'office-ui-fabric-react!IDetailsListProps#componentRef:member'
      - 'office-ui-fabric-react!IDetailsListProps#constrainMode:member'
      - 'office-ui-fabric-react!IDetailsListProps#disableSelectionZone:member'
      - 'office-ui-fabric-react!IDetailsListProps#dragDropEvents:member'
      - 'office-ui-fabric-react!IDetailsListProps#enableUpdateAnimations:member'
      - 'office-ui-fabric-react!IDetailsListProps#enterModalSelectionOnTouch:member'
      - 'office-ui-fabric-react!IDetailsListProps#getCellValueKey:member'
      - 'office-ui-fabric-react!IDetailsListProps#getGroupHeight:member'
      - 'office-ui-fabric-react!IDetailsListProps#getKey:member'
      - 'office-ui-fabric-react!IDetailsListProps#getRowAriaDescribedBy:member'
      - 'office-ui-fabric-react!IDetailsListProps#getRowAriaLabel:member'
      - 'office-ui-fabric-react!IDetailsListProps#groupProps:member'
      - 'office-ui-fabric-react!IDetailsListProps#groups:member'
      - 'office-ui-fabric-react!IDetailsListProps#indentWidth:member'
      - 'office-ui-fabric-react!IDetailsListProps#initialFocusedIndex:member'
      - 'office-ui-fabric-react!IDetailsListProps#isHeaderVisible:member'
      - 'office-ui-fabric-react!IDetailsListProps#isPlaceholderData:member'
      - 'office-ui-fabric-react!IDetailsListProps#items:member'
      - 'office-ui-fabric-react!IDetailsListProps#layoutMode:member'
      - 'office-ui-fabric-react!IDetailsListProps#listProps:member'
      - 'office-ui-fabric-react!IDetailsListProps#minimumPixelsForDrag:member'
      - 'office-ui-fabric-react!IDetailsListProps#onActiveItemChanged:member'
      - 'office-ui-fabric-react!IDetailsListProps#onColumnHeaderClick:member'
      - 'office-ui-fabric-react!IDetailsListProps#onColumnHeaderContextMenu:member'
      - 'office-ui-fabric-react!IDetailsListProps#onColumnResize:member'
      - 'office-ui-fabric-react!IDetailsListProps#onDidUpdate:member'
      - 'office-ui-fabric-react!IDetailsListProps#onItemContextMenu:member'
      - 'office-ui-fabric-react!IDetailsListProps#onItemInvoked:member'
      - 'office-ui-fabric-react!IDetailsListProps#onRenderCheckbox:member'
      - 'office-ui-fabric-react!IDetailsListProps#onRenderDetailsFooter:member'
      - 'office-ui-fabric-react!IDetailsListProps#onRenderDetailsHeader:member'
      - 'office-ui-fabric-react!IDetailsListProps#onRenderItemColumn:member'
      - 'office-ui-fabric-react!IDetailsListProps#onRenderMissingItem:member'
      - 'office-ui-fabric-react!IDetailsListProps#onRenderRow:member'
      - 'office-ui-fabric-react!IDetailsListProps#onRowDidMount:member'
      - 'office-ui-fabric-react!IDetailsListProps#onRowWillUnmount:member'
      - 'office-ui-fabric-react!IDetailsListProps#onShouldVirtualize:member'
      - 'office-ui-fabric-react!IDetailsListProps#rowElementEventMap:member'
      - 'office-ui-fabric-react!IDetailsListProps#selection:member'
      - 'office-ui-fabric-react!IDetailsListProps#selectionMode:member'
      - 'office-ui-fabric-react!IDetailsListProps#selectionPreservedOnEmptyClick:member'
      - 'office-ui-fabric-react!IDetailsListProps#selectionZoneProps:member'
      - 'office-ui-fabric-react!IDetailsListProps#setKey:member'
      - 'office-ui-fabric-react!IDetailsListProps#shouldApplyApplicationRole:member'
      - 'office-ui-fabric-react!IDetailsListProps#styles:member'
      - 'office-ui-fabric-react!IDetailsListProps#theme:member'
      - 'office-ui-fabric-react!IDetailsListProps#useFastIcons:member'
      - 'office-ui-fabric-react!IDetailsListProps#usePageCache:member'
      - 'office-ui-fabric-react!IDetailsListProps#useReducedRowRenderer:member'
      - 'office-ui-fabric-react!IDetailsListProps#viewport:member'
  - uid: 'office-ui-fabric-react!IDetailsListProps#ariaLabel:member'
    summary: Accessible label describing or summarizing the list.
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#ariaLabelForGrid:member'
    summary: Accessible label for the grid within the list.
    name: ariaLabelForGrid
    fullName: ariaLabelForGrid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForGrid?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#ariaLabelForListHeader:member'
    summary: Accessible label for the list header.
    name: ariaLabelForListHeader
    fullName: ariaLabelForListHeader
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForListHeader?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#ariaLabelForSelectAllCheckbox:member'
    summary: Accessible label for the select all checkbox.
    name: ariaLabelForSelectAllCheckbox
    fullName: ariaLabelForSelectAllCheckbox
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForSelectAllCheckbox?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#ariaLabelForSelectionColumn:member'
    summary: Accessible label for the name of the selection column.
    name: ariaLabelForSelectionColumn
    fullName: ariaLabelForSelectionColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForSelectionColumn?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#cellStyleProps:member'
    summary: >-
      Props impacting the render style of cells. Since these have an impact on calculated column widths, they are
      handled separately from normal theme styling, but they are passed to the styling system.
    name: cellStyleProps
    fullName: cellStyleProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cellStyleProps?: ICellStyleProps;'
      return:
        type:
          - 'office-ui-fabric-react!ICellStyleProps:interface'
  - uid: 'office-ui-fabric-react!IDetailsListProps#checkboxCellClassName:member'
    summary: Class name to add to the cell of a checkbox.
    name: checkboxCellClassName
    fullName: checkboxCellClassName
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkboxCellClassName?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#checkboxVisibility:member'
    summary: Controls the visibility of selection check box.
    name: checkboxVisibility
    fullName: checkboxVisibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkboxVisibility?: CheckboxVisibility;'
      return:
        type:
          - 'office-ui-fabric-react!CheckboxVisibility:enum'
  - uid: 'office-ui-fabric-react!IDetailsListProps#checkButtonAriaLabel:member'
    summary: Accessible label for the check button.
    name: checkButtonAriaLabel
    fullName: checkButtonAriaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkButtonAriaLabel?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#className:member'
    summary: Class name to add to the root element.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#columnReorderOptions:member'
    summary: Options for column reordering using drag and drop.
    name: columnReorderOptions
    fullName: columnReorderOptions
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnReorderOptions?: IColumnReorderOptions;'
      return:
        type:
          - 'office-ui-fabric-react!IColumnReorderOptions:interface'
  - uid: 'office-ui-fabric-react!IDetailsListProps#columns:member'
    summary: 'column defitions. If none are provided, default columns will be created based on the items'' properties.'
    name: columns
    fullName: columns
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columns?: IColumn[];'
      return:
        type:
          - 'IColumn[]'
  - uid: 'office-ui-fabric-react!IDetailsListProps#compact:member'
    summary: Whether to render in compact mode.
    name: compact
    fullName: compact
    langs:
      - typeScript
    type: property
    syntax:
      content: 'compact?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#componentRef:member'
    summary: >-
      Callback to access the IDetailsList interface. Use this instead of ref for accessing the public methods and
      properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IDetailsList>;'
      return:
        type:
          - IRefObject<IDetailsList>
  - uid: 'office-ui-fabric-react!IDetailsListProps#constrainMode:member'
    summary: Controls how the list contrains overflow.
    name: constrainMode
    fullName: constrainMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'constrainMode?: ConstrainMode;'
      return:
        type:
          - 'office-ui-fabric-react!ConstrainMode:enum'
  - uid: 'office-ui-fabric-react!IDetailsListProps#disableSelectionZone:member'
    summary: 'Whether to disable the built-in SelectionZone, so the host component can provide its own.'
    name: disableSelectionZone
    fullName: disableSelectionZone
    langs:
      - typeScript
    type: property
    syntax:
      content: 'disableSelectionZone?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#dragDropEvents:member'
    summary: Map of callback functions related to row drag and drop functionality.
    name: dragDropEvents
    fullName: dragDropEvents
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dragDropEvents?: IDragDropEvents;'
      return:
        type:
          - 'office-ui-fabric-react!IDragDropEvents:interface'
  - uid: 'office-ui-fabric-react!IDetailsListProps#enableUpdateAnimations:member'
    summary: Whether to animate updates
    name: enableUpdateAnimations
    fullName: enableUpdateAnimations
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableUpdateAnimations?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#enterModalSelectionOnTouch:member'
    summary: Whether the selection zone should enter modal state on touch.
    name: enterModalSelectionOnTouch
    fullName: enterModalSelectionOnTouch
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enterModalSelectionOnTouch?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#getCellValueKey:member'
    summary: >-
      If provided, will be the "default" item column cell value return. A column's `getValueKey` can override
      `getCellValueKey`<!-- -->.
    name: getCellValueKey
    fullName: getCellValueKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;'
      return:
        type:
          - '(item?: any, index?: number, column?: IColumn) => string'
  - uid: 'office-ui-fabric-react!IDetailsListProps#getGroupHeight:member'
    summary: Callback to override default group height calculation used by list virtualization.
    name: getGroupHeight
    fullName: getGroupHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getGroupHeight?: IGroupedListProps[''getGroupHeight''];'
      return:
        type:
          - 'IGroupedListProps[''getGroupHeight'']'
  - uid: 'office-ui-fabric-react!IDetailsListProps#getKey:member'
    summary: >-
      Callback to get the item key, to be used in the selection and on render. Must be provided if sorting or filtering
      is enabled.
    name: getKey
    fullName: getKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getKey?: (item: any, index?: number) => string;'
      return:
        type:
          - '(item: any, index?: number) => string'
  - uid: 'office-ui-fabric-react!IDetailsListProps#getRowAriaDescribedBy:member'
    summary: Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item.
    name: getRowAriaDescribedBy
    fullName: getRowAriaDescribedBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getRowAriaDescribedBy?: (item: any) => string;'
      return:
        type:
          - '(item: any) => string'
  - uid: 'office-ui-fabric-react!IDetailsListProps#getRowAriaLabel:member'
    summary: Callback to get the aria-label string for a given item.
    name: getRowAriaLabel
    fullName: getRowAriaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getRowAriaLabel?: (item: any) => string;'
      return:
        type:
          - '(item: any) => string'
  - uid: 'office-ui-fabric-react!IDetailsListProps#groupProps:member'
    summary: Override properties to render groups.
    name: groupProps
    fullName: groupProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groupProps?: IDetailsGroupRenderProps;'
      return:
        type:
          - 'office-ui-fabric-react!IDetailsGroupRenderProps:interface'
  - uid: 'office-ui-fabric-react!IDetailsListProps#groups:member'
    summary: Grouping instructions.
    name: groups
    fullName: groups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groups?: IGroup[];'
      return:
        type:
          - 'IGroup[]'
  - uid: 'office-ui-fabric-react!IDetailsListProps#indentWidth:member'
    summary: Override for the indent width used for group nesting.
    name: indentWidth
    fullName: indentWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'indentWidth?: number;'
      return:
        type:
          - number
  - uid: 'office-ui-fabric-react!IDetailsListProps#initialFocusedIndex:member'
    summary: Default index to set focus to once the items have rendered and the index exists.
    name: initialFocusedIndex
    fullName: initialFocusedIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'initialFocusedIndex?: number;'
      return:
        type:
          - number
  - uid: 'office-ui-fabric-react!IDetailsListProps#isHeaderVisible:member'
    summary: Controls the visibility of the header.
    name: isHeaderVisible
    fullName: isHeaderVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isHeaderVisible?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#isPlaceholderData:member'
    summary: Set this to true to indicate that the items being displayed are placeholder data.
    name: isPlaceholderData
    fullName: isPlaceholderData
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isPlaceholderData?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#items:member'
    summary: The items to render.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'items: any[];'
      return:
        type:
          - 'any[]'
  - uid: 'office-ui-fabric-react!IDetailsListProps#layoutMode:member'
    summary: Controls how the columns are adjusted.
    name: layoutMode
    fullName: layoutMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'layoutMode?: DetailsListLayoutMode;'
      return:
        type:
          - 'office-ui-fabric-react!DetailsListLayoutMode:enum'
  - uid: 'office-ui-fabric-react!IDetailsListProps#listProps:member'
    summary: Properties to pass through to the List components being rendered.
    name: listProps
    fullName: listProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'listProps?: IListProps;'
      return:
        type:
          - 'office-ui-fabric-react!IListProps:interface'
  - uid: 'office-ui-fabric-react!IDetailsListProps#minimumPixelsForDrag:member'
    summary: The minimum mouse move distance to interpret the action as drag event.
    name: minimumPixelsForDrag
    fullName: minimumPixelsForDrag
    langs:
      - typeScript
    type: property
    syntax:
      content: 'minimumPixelsForDrag?: number;'
      return:
        type:
          - number
  - uid: 'office-ui-fabric-react!IDetailsListProps#onActiveItemChanged:member'
    summary: >-
      Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it with
      the keyboard.
    name: onActiveItemChanged
    fullName: onActiveItemChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;'
      return:
        type:
          - '(item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onColumnHeaderClick:member'
    summary: Callback for when the user clicks on the column header.
    name: onColumnHeaderClick
    fullName: onColumnHeaderClick
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;'
      return:
        type:
          - '(ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onColumnHeaderContextMenu:member'
    summary: Callback for when the user asks for a contextual menu (usually via right click) from a column header.
    name: onColumnHeaderContextMenu
    fullName: onColumnHeaderContextMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;'
      return:
        type:
          - '(column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onColumnResize:member'
    summary: Callback fired on column resize
    name: onColumnResize
    fullName: onColumnResize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;'
      return:
        type:
          - '(column?: IColumn, newWidth?: number, columnIndex?: number) => void'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onDidUpdate:member'
    summary: Callback for when the list has been updated. Useful for telemetry tracking externally.
    name: onDidUpdate
    fullName: onDidUpdate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDidUpdate?: (detailsList?: DetailsListBase) => void;'
      return:
        type:
          - '(detailsList?: DetailsListBase) => void'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onItemContextMenu:member'
    summary: >-
      Callback for when the context menu of an item has been accessed. If undefined or false is returned,
      `ev.preventDefault()` will be called.
    name: onItemContextMenu
    fullName: onItemContextMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;'
      return:
        type:
          - '(item?: any, index?: number, ev?: Event) => void | boolean'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onItemInvoked:member'
    summary: Callback for when a given row has been invoked (by pressing enter while it is selected.)
    name: onItemInvoked
    fullName: onItemInvoked
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;'
      return:
        type:
          - '(item?: any, index?: number, ev?: Event) => void'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onRenderCheckbox:member'
    summary: 'If provided, can be used to render a custom checkbox.'
    name: onRenderCheckbox
    fullName: onRenderCheckbox
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;'
      return:
        type:
          - IRenderFunction<IDetailsListCheckboxProps>
  - uid: 'office-ui-fabric-react!IDetailsListProps#onRenderDetailsFooter:member'
    summary: An override to render the details footer.
    name: onRenderDetailsFooter
    fullName: onRenderDetailsFooter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;'
      return:
        type:
          - IRenderFunction<IDetailsFooterProps>
  - uid: 'office-ui-fabric-react!IDetailsListProps#onRenderDetailsHeader:member'
    summary: An override to render the details header.
    name: onRenderDetailsHeader
    fullName: onRenderDetailsHeader
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;'
      return:
        type:
          - IRenderFunction<IDetailsHeaderProps>
  - uid: 'office-ui-fabric-react!IDetailsListProps#onRenderItemColumn:member'
    summary: >-
      If provided, will be the "default" item column renderer method. This affects cells within the rows, not the rows
      themselves. If a column definition provides its own `onRender` method, that will be used instead of this.
    name: onRenderItemColumn
    fullName: onRenderItemColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;'
      return:
        type:
          - '(item?: any, index?: number, column?: IColumn) => React.ReactNode'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onRenderMissingItem:member'
    summary: Callback for what to render when the item is missing.
    name: onRenderMissingItem
    fullName: onRenderMissingItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;'
      return:
        type:
          - '(index?: number, rowProps?: IDetailsRowProps) => React.ReactNode'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onRenderRow:member'
    summary: Callback to override the default row rendering.
    name: onRenderRow
    fullName: onRenderRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderRow?: IRenderFunction<IDetailsRowProps>;'
      return:
        type:
          - IRenderFunction<IDetailsRowProps>
  - uid: 'office-ui-fabric-react!IDetailsListProps#onRowDidMount:member'
    summary: Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.
    name: onRowDidMount
    fullName: onRowDidMount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRowDidMount?: (item?: any, index?: number) => void;'
      return:
        type:
          - '(item?: any, index?: number) => void'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onRowWillUnmount:member'
    summary: >-
      Callback for when a given row has been unmounted. Useful for identifying when a row has been removed from the
      page.
    name: onRowWillUnmount
    fullName: onRowWillUnmount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRowWillUnmount?: (item?: any, index?: number) => void;'
      return:
        type:
          - '(item?: any, index?: number) => void'
  - uid: 'office-ui-fabric-react!IDetailsListProps#onShouldVirtualize:member'
    summary: >-
      Callback to determine whether the list should be rendered in full, or virtualized.


      Virtualization will add and remove pages of items as the user scrolls them into the visible range. This benefits
      larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists.


      The default implementation will virtualize when this callback is not provided.
    name: onShouldVirtualize
    fullName: onShouldVirtualize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onShouldVirtualize?: (props: IListProps) => boolean;'
      return:
        type:
          - '(props: IListProps) => boolean'
  - uid: 'office-ui-fabric-react!IDetailsListProps#rowElementEventMap:member'
    summary: Event names and corresponding callbacks that will be registered to rendered row elements.
    name: rowElementEventMap
    fullName: rowElementEventMap
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        rowElementEventMap?: {
                eventName: string;
                callback: (context: IDragDropContext, event?: any) => void;
            }[];
      return:
        type:
          - |-
            {
                    eventName: string;
                    callback: (context: IDragDropContext, event?: any) => void;
                }[]
  - uid: 'office-ui-fabric-react!IDetailsListProps#selection:member'
    summary: Selection model to track selection state.
    name: selection
    fullName: selection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selection?: ISelection;'
      return:
        type:
          - '@uifabric/utilities!ISelection:interface'
  - uid: 'office-ui-fabric-react!IDetailsListProps#selectionMode:member'
    summary: 'Controls how/if the details list manages selection. Options include none, single, multiple'
    name: selectionMode
    fullName: selectionMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectionMode?: SelectionMode;'
      return:
        type:
          - '@uifabric/utilities!SelectionMode:enum'
  - uid: 'office-ui-fabric-react!IDetailsListProps#selectionPreservedOnEmptyClick:member'
    summary: >-
      By default, selection is cleared when clicking on an empty (non-focusable) section of the screen. Setting this
      value to true overrides that behavior and maintains selection.
    name: selectionPreservedOnEmptyClick
    fullName: selectionPreservedOnEmptyClick
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectionPreservedOnEmptyClick?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#selectionZoneProps:member'
    summary: Additional props to pass through to the SelectionZone created by default.
    name: selectionZoneProps
    fullName: selectionZoneProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectionZoneProps?: ISelectionZoneProps;'
      return:
        type:
          - 'office-ui-fabric-react!ISelectionZoneProps:interface'
  - uid: 'office-ui-fabric-react!IDetailsListProps#setKey:member'
    summary: 'A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes.'
    name: setKey
    fullName: setKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'setKey?: string;'
      return:
        type:
          - string
  - uid: 'office-ui-fabric-react!IDetailsListProps#shouldApplyApplicationRole:member'
    summary: Whether the role `application` should be applied to the list.
    name: shouldApplyApplicationRole
    fullName: shouldApplyApplicationRole
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldApplyApplicationRole?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#styles:member'
    summary: Custom overrides to the themed or default styles.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>'
  - uid: 'office-ui-fabric-react!IDetailsListProps#theme:member'
    summary: Theme provided by a higher-order component.
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - '@fluentui/theme!ITheme:interface'
  - uid: 'office-ui-fabric-react!IDetailsListProps#useFastIcons:member'
    summary: >-
      Whether to use fast icon and check components. The icons can't be targeted by customization but are still
      customizable via class names.
    name: useFastIcons
    fullName: useFastIcons
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useFastIcons?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#usePageCache:member'
    summary: Whether to enable render page caching. This is an experimental performance optimization that is off by default.
    name: usePageCache
    fullName: usePageCache
    langs:
      - typeScript
    type: property
    syntax:
      content: 'usePageCache?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#useReducedRowRenderer:member'
    summary: Whether to re-render a row only when props changed. Might cause regression when depending on external updates.
    name: useReducedRowRenderer
    fullName: useReducedRowRenderer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useReducedRowRenderer?: boolean;'
      return:
        type:
          - boolean
  - uid: 'office-ui-fabric-react!IDetailsListProps#viewport:member'
    summary: 'Viewport info, provided by the `withViewport` decorator.'
    name: viewport
    fullName: viewport
    langs:
      - typeScript
    type: property
    syntax:
      content: 'viewport?: IViewport;'
      return:
        type:
          - 'office-ui-fabric-react!IViewport:interface'
