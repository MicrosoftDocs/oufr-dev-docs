### YamlMime:TSType
name: IComboBoxProps
uid: '@fluentui/react!IComboBoxProps:interface'
package: '@fluentui/react!'
fullName: IComboBoxProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: allowFreeform
    uid: '@fluentui/react!IComboBoxProps#allowFreeform:member'
    package: '@fluentui/react!'
    fullName: allowFreeform
    summary: >-
      Whether the ComboBox is free form, meaning that the user input is not
      bound to provided options.  false
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'allowFreeform?: boolean;'
      return:
        type: boolean
  - name: ariaDescribedBy
    uid: '@fluentui/react!IComboBoxProps#ariaDescribedBy:member'
    package: '@fluentui/react!'
    fullName: ariaDescribedBy
    summary: >-
      ID of an element containing a description of the ComboBox for screen
      reader users.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type: string
  - name: autoComplete
    uid: '@fluentui/react!IComboBoxProps#autoComplete:member'
    package: '@fluentui/react!'
    fullName: autoComplete
    summary: >-
      Whether the ComboBox auto completes. As the user is entering text, it will
      be suggested potential matches from the list of options. If the ComboBox
      is expanded, this will also scroll to the suggested option, and give it a
      selected style.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoComplete?: ''on'' | ''off'';'
      return:
        type: '''on'' | ''off'''
  - name: autofill
    uid: '@fluentui/react!IComboBoxProps#autofill:member'
    package: '@fluentui/react!'
    fullName: autofill
    summary: Props for the Autofill component (text input) inside the ComboBox.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autofill?: IAutofillProps;'
      return:
        type: IAutofillProps
  - name: buttonIconProps
    uid: '@fluentui/react!IComboBoxProps#buttonIconProps:member'
    package: '@fluentui/react!'
    fullName: buttonIconProps
    summary: The IconProps to use for the button aspect of the ComboBox.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'buttonIconProps?: IIconProps;'
      return:
        type: IIconProps
  - name: caretDownButtonStyles
    uid: '@fluentui/react!IComboBoxProps#caretDownButtonStyles:member'
    package: '@fluentui/react!'
    fullName: caretDownButtonStyles
    summary: Styles for the caret down (expand) button.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'caretDownButtonStyles?: Partial<IButtonStyles>;'
      return:
        type: Partial&lt;IButtonStyles&gt;
  - name: comboBoxOptionStyles
    uid: '@fluentui/react!IComboBoxProps#comboBoxOptionStyles:member'
    package: '@fluentui/react!'
    fullName: comboBoxOptionStyles
    summary: Default styles that should be applied to ComboBox options.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'comboBoxOptionStyles?: Partial<IComboBoxOptionStyles>;'
      return:
        type: Partial&lt;IComboBoxOptionStyles&gt;
  - name: componentRef
    uid: '@fluentui/react!IComboBoxProps#componentRef:member'
    package: '@fluentui/react!'
    fullName: componentRef
    summary: >-
      Optional ref to access the `IComboBox` interface. Use this instead of
      `ref` for accessing the public methods and properties of the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IComboBox>;'
      return:
        type: IRefObject&lt;IComboBox&gt;
  - name: dropdownMaxWidth
    uid: '@fluentui/react!IComboBoxProps#dropdownMaxWidth:member'
    package: '@fluentui/react!'
    fullName: dropdownMaxWidth
    summary: Custom max width for dropdown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dropdownMaxWidth?: number;'
      return:
        type: number
  - name: dropdownWidth
    uid: '@fluentui/react!IComboBoxProps#dropdownWidth:member'
    package: '@fluentui/react!'
    fullName: dropdownWidth
    summary: >-
      Custom width for ComboBox menu. Mutually exclusive with
      `useComboBoxAsMenuWidth`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dropdownWidth?: number;'
      return:
        type: number
  - name: getClassNames
    uid: '@fluentui/react!IComboBoxProps#getClassNames:member'
    package: '@fluentui/react!'
    fullName: getClassNames
    summary: >-
      Custom function for providing the classNames for the ComboBox. Can be used
      to provide all styles for the component instead of applying them on top of
      the default styles.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getClassNames?: (theme: ITheme, isOpen: boolean, disabled: boolean,
        required: boolean, focused: boolean, allowFreeForm: boolean,
        hasErrorMessage: boolean, className?: string) => IComboBoxClassNames;
      return:
        type: >-
          (theme: ITheme, isOpen: boolean, disabled: boolean, required: boolean,
          focused: boolean, allowFreeForm: boolean, hasErrorMessage: boolean,
          className?: string) =&gt; IComboBoxClassNames
  - name: iconButtonProps
    uid: '@fluentui/react!IComboBoxProps#iconButtonProps:member'
    package: '@fluentui/react!'
    fullName: iconButtonProps
    summary: Optional props for the caret down (expand) button.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'iconButtonProps?: IButtonProps;'
      return:
        type: IButtonProps
  - name: isButtonAriaHidden
    uid: '@fluentui/react!IComboBoxProps#isButtonAriaHidden:member'
    package: '@fluentui/react!'
    fullName: isButtonAriaHidden
    summary: >-
      Whether to hide the ComboBox's button element from screen readers. This is
      true by default because all functionality is handled by the input element,
      and the arrow button is only meant to be decorative.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isButtonAriaHidden?: boolean;'
      return:
        type: boolean
  - name: multiSelectDelimiter
    uid: '@fluentui/react!IComboBoxProps#multiSelectDelimiter:member'
    package: '@fluentui/react!'
    fullName: multiSelectDelimiter
    summary: >-
      When multiple items are selected, this will be used to separate values in
      the ComboBox input.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'multiSelectDelimiter?: string;'
      return:
        type: string
  - name: onChange
    uid: '@fluentui/react!IComboBoxProps#onChange:member'
    package: '@fluentui/react!'
    fullName: onChange
    summary: >-
      Called when either: 1) the selected option changes 2) a manually edited
      value is submitted. In this case, if `allowFreeform` is true, it's
      possible that only `value` will be provided (`option` will be unset).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onChange?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption,
        index?: number, value?: string) => void;
      return:
        type: >-
          (event: React.FormEvent&lt;IComboBox&gt;, option?: IComboBoxOption,
          index?: number, value?: string) =&gt; void
  - name: onItemClick
    uid: '@fluentui/react!IComboBoxProps#onItemClick:member'
    package: '@fluentui/react!'
    fullName: onItemClick
    summary: Called when a ComboBox item is clicked.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onItemClick?: (event: React.FormEvent<IComboBox>, option?:
        IComboBoxOption, index?: number) => void;
      return:
        type: >-
          (event: React.FormEvent&lt;IComboBox&gt;, option?: IComboBoxOption,
          index?: number) =&gt; void
  - name: onMenuDismiss
    uid: '@fluentui/react!IComboBoxProps#onMenuDismiss:member'
    package: '@fluentui/react!'
    fullName: onMenuDismiss
    summary: Function that gets invoked before the menu gets dismissed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onMenuDismiss?: () => void;'
      return:
        type: () =&gt; void
  - name: onMenuDismissed
    uid: '@fluentui/react!IComboBoxProps#onMenuDismissed:member'
    package: '@fluentui/react!'
    fullName: onMenuDismissed
    summary: Function that gets invoked when the ComboBox menu is dismissed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onMenuDismissed?: () => void;'
      return:
        type: () =&gt; void
  - name: onMenuOpen
    uid: '@fluentui/react!IComboBoxProps#onMenuOpen:member'
    package: '@fluentui/react!'
    fullName: onMenuOpen
    summary: Function that gets invoked when the ComboBox menu is launched.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onMenuOpen?: () => void;'
      return:
        type: () =&gt; void
  - name: onPendingValueChanged
    uid: '@fluentui/react!IComboBoxProps#onPendingValueChanged:member'
    package: '@fluentui/react!'
    fullName: onPendingValueChanged
    summary: >-
      Callback issued when the user changes the pending value in ComboBox. This
      will be called any time the component is updated and there is a current
      pending value. Option, index, and value will all be undefined if no change
      has taken place and the previously entered pending value is still valid.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPendingValueChanged?: (option?: IComboBoxOption, index?: number,
        value?: string) => void;
      return:
        type: '(option?: IComboBoxOption, index?: number, value?: string) =&gt; void'
  - name: onRenderLabel
    uid: '@fluentui/react!IComboBoxProps#onRenderLabel:member'
    package: '@fluentui/react!'
    fullName: onRenderLabel
    summary: Custom render function for the label text.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderLabel?: IRenderFunction<IOnRenderComboBoxLabelProps>;'
      return:
        type: IRenderFunction&lt;IOnRenderComboBoxLabelProps&gt;
  - name: onRenderLowerContent
    uid: '@fluentui/react!IComboBoxProps#onRenderLowerContent:member'
    package: '@fluentui/react!'
    fullName: onRenderLowerContent
    summary: Add additional content below the callout list.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderLowerContent?: IRenderFunction<IComboBoxProps>;'
      return:
        type: IRenderFunction&lt;IComboBoxProps&gt;
  - name: onRenderUpperContent
    uid: '@fluentui/react!IComboBoxProps#onRenderUpperContent:member'
    package: '@fluentui/react!'
    fullName: onRenderUpperContent
    summary: Add additional content above the callout list.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderUpperContent?: IRenderFunction<IComboBoxProps>;'
      return:
        type: IRenderFunction&lt;IComboBoxProps&gt;
  - name: onResolveOptions
    uid: '@fluentui/react!IComboBoxProps#onResolveOptions:member'
    package: '@fluentui/react!'
    fullName: onResolveOptions
    summary: >-
      Callback issued when the options should be resolved, if they have been
      updated or if they need to be passed in the first time.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onResolveOptions?: (options: IComboBoxOption[]) => IComboBoxOption[] |
        PromiseLike<IComboBoxOption[]>;
      return:
        type: >-
          (options: IComboBoxOption[]) =&gt; IComboBoxOption[] |
          PromiseLike&lt;IComboBoxOption[]&gt;
  - name: onScrollToItem
    uid: '@fluentui/react!IComboBoxProps#onScrollToItem:member'
    package: '@fluentui/react!'
    fullName: onScrollToItem
    summary: >-
      Callback issued when the ComboBox requests the list to scroll to a
      specific element.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onScrollToItem?: (itemIndex: number) => void;'
      return:
        type: '(itemIndex: number) =&gt; void'
  - name: options
    uid: '@fluentui/react!IComboBoxProps#options:member'
    package: '@fluentui/react!'
    fullName: options
    summary: Collection of options for this ComboBox.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'options: IComboBoxOption[];'
      return:
        type: 'IComboBoxOption[]'
  - name: persistMenu
    uid: '@fluentui/react!IComboBoxProps#persistMenu:member'
    package: '@fluentui/react!'
    fullName: persistMenu
    summary: >-
      If true, the menu will be created the first time the ComboBox is rendered,
      and shown or hidden as appropriate (rather than being created on open and
      destroyed on close). This will improve perf of the menu opening but could
      potentially impact overall perf by having more elements in the DOM. Should
      only be used when perf is important.


      Note: This may increase the amount of time it takes for the ComboBox
      itself to mount.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'persistMenu?: boolean;'
      return:
        type: boolean
  - name: scrollSelectedToTop
    uid: '@fluentui/react!IComboBoxProps#scrollSelectedToTop:member'
    package: '@fluentui/react!'
    fullName: scrollSelectedToTop
    summary: >-
      If true, when options are scrollable, the selected option is positioned at
      the top of the callout when it is opened (unless it has reached the end of
      the scrollbar).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'scrollSelectedToTop?: boolean;'
      return:
        type: boolean
  - name: shouldRestoreFocus
    uid: '@fluentui/react!IComboBoxProps#shouldRestoreFocus:member'
    package: '@fluentui/react!'
    fullName: shouldRestoreFocus
    summary: >-
      When specified, determines whether the callout (the menu which drops down)
      should restore the focus after being dismissed or not. If false, then the
      menu will not try to set focus to whichever element had focus before the
      menu was opened.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldRestoreFocus?: boolean;'
      return:
        type: boolean
  - name: styles
    uid: '@fluentui/react!IComboBoxProps#styles:member'
    package: '@fluentui/react!'
    fullName: styles
    summary: Custom styles for this component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'styles?: Partial<IComboBoxStyles>;'
      return:
        type: Partial&lt;IComboBoxStyles&gt;
  - name: text
    uid: '@fluentui/react!IComboBoxProps#text:member'
    package: '@fluentui/react!'
    fullName: text
    summary: Value to show in the input. Does not have to map to an option.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text?: string;'
      return:
        type: string
  - name: theme
    uid: '@fluentui/react!IComboBoxProps#theme:member'
    package: '@fluentui/react!'
    fullName: theme
    summary: Theme provided by HOC.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
  - name: useComboBoxAsMenuWidth
    uid: '@fluentui/react!IComboBoxProps#useComboBoxAsMenuWidth:member'
    package: '@fluentui/react!'
    fullName: useComboBoxAsMenuWidth
    summary: >-
      Whether to use the ComboBox's width as the menu's width. Mutually
      exclusive with `dropdownWidth`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useComboBoxAsMenuWidth?: boolean;'
      return:
        type: boolean
extends: 'ISelectableDroppableTextProps&lt;IComboBox, IComboBox&gt;'
