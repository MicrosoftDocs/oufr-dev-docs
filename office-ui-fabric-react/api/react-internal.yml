### YamlMime:TSPackage
uid: '@fluentui/react-internal!'
name: '@fluentui/react-internal'
type: package
summary: ''
classes:
  - '@fluentui/react-internal!ActivityItem:class'
  - '@fluentui/react-internal!AnnouncedBase:class'
  - '@fluentui/react-internal!Autofill:class'
  - '@fluentui/react-internal!BaseExtendedPeoplePicker:class'
  - '@fluentui/react-internal!BaseExtendedPicker:class'
  - '@fluentui/react-internal!BaseFloatingPeoplePicker:class'
  - '@fluentui/react-internal!BaseFloatingPicker:class'
  - '@fluentui/react-internal!BasePeoplePicker:class'
  - '@fluentui/react-internal!BasePeopleSelectedItemsList:class'
  - '@fluentui/react-internal!BasePicker:class'
  - '@fluentui/react-internal!BasePickerListBelow:class'
  - '@fluentui/react-internal!BaseSelectedItemsList:class'
  - '@fluentui/react-internal!ColorPickerBase:class'
  - '@fluentui/react-internal!CommandBarBase:class'
  - '@fluentui/react-internal!CompactPeoplePickerBase:class'
  - '@fluentui/react-internal!ContextualMenuItemBase:class'
  - '@fluentui/react-internal!DialogBase:class'
  - '@fluentui/react-internal!DialogContentBase:class'
  - '@fluentui/react-internal!DialogFooterBase:class'
  - '@fluentui/react-internal!DragDropHelper:class'
  - '@fluentui/react-internal!ExpandingCardBase:class'
  - '@fluentui/react-internal!ExtendedPeoplePicker:class'
  - '@fluentui/react-internal!ExtendedSelectedItem:class'
  - '@fluentui/react-internal!FacepileBase:class'
  - '@fluentui/react-internal!FloatingPeoplePicker:class'
  - '@fluentui/react-internal!HoverCardBase:class'
  - '@fluentui/react-internal!IconBase:class'
  - '@fluentui/react-internal!Keytip:class'
  - '@fluentui/react-internal!KeytipLayerBase:class'
  - '@fluentui/react-internal!KeytipManager:class'
  - '@fluentui/react-internal!LabelBase:class'
  - '@fluentui/react-internal!List:class'
  - '@fluentui/react-internal!ListPeoplePickerBase:class'
  - '@fluentui/react-internal!MemberListPeoplePicker:class'
  - '@fluentui/react-internal!NavBase:class'
  - '@fluentui/react-internal!NormalPeoplePickerBase:class'
  - '@fluentui/react-internal!OverlayBase:class'
  - '@fluentui/react-internal!PanelBase:class'
  - '@fluentui/react-internal!PlainCardBase:class'
  - '@fluentui/react-internal!ProgressIndicatorBase:class'
  - '@fluentui/react-internal!ScrollablePaneBase:class'
  - '@fluentui/react-internal!SelectedPeopleList:class'
  - '@fluentui/react-internal!SelectionZone:class'
  - '@fluentui/react-internal!SpinnerBase:class'
  - '@fluentui/react-internal!Sticky:class'
  - '@fluentui/react-internal!Suggestions:class'
  - '@fluentui/react-internal!SuggestionsControl:class'
  - '@fluentui/react-internal!SuggestionsController:class'
  - '@fluentui/react-internal!SuggestionsCore:class'
  - '@fluentui/react-internal!SuggestionsHeaderFooterItem:class'
  - '@fluentui/react-internal!SuggestionsItem:class'
  - '@fluentui/react-internal!SuggestionsStore:class'
  - '@fluentui/react-internal!TagPickerBase:class'
  - '@fluentui/react-internal!TextFieldBase:class'
  - '@fluentui/react-internal!ThemeGenerator:class'
  - '@fluentui/react-internal!TooltipBase:class'
  - '@fluentui/react-internal!TooltipHostBase:class'
enums:
  - '@fluentui/react-internal!BaseSlots:enum'
  - '@fluentui/react-internal!ContextualMenuItemType:enum'
  - '@fluentui/react-internal!DialogType:enum'
  - '@fluentui/react-internal!ExpandingCardMode:enum'
  - '@fluentui/react-internal!FabricSlots:enum'
  - '@fluentui/react-internal!HoverCardType:enum'
  - '@fluentui/react-internal!IconType:enum'
  - '@fluentui/react-internal!ImageCoverStyle:enum'
  - '@fluentui/react-internal!ImageFit:enum'
  - '@fluentui/react-internal!ImageLoadState:enum'
  - '@fluentui/react-internal!KeyboardSpinDirection:enum'
  - '@fluentui/react-internal!MessageBarType:enum'
  - '@fluentui/react-internal!OpenCardMode:enum'
  - '@fluentui/react-internal!OverflowButtonType:enum'
  - '@fluentui/react-internal!PanelType:enum'
  - '@fluentui/react-internal!PersonaInitialsColor:enum'
  - '@fluentui/react-internal!PersonaPresence:enum'
  - '@fluentui/react-internal!PersonaSize:enum'
  - '@fluentui/react-internal!Position:enum'
  - '@fluentui/react-internal!RatingSize:enum'
  - '@fluentui/react-internal!RectangleEdge:enum'
  - '@fluentui/react-internal!ResizeGroupDirection:enum'
  - '@fluentui/react-internal!ResponsiveMode:enum'
  - '@fluentui/react-internal!SelectableOptionMenuItemType:enum'
  - '@fluentui/react-internal!SemanticColorSlots:enum'
  - '@fluentui/react-internal!Shade:enum'
  - '@fluentui/react-internal!ShimmerElementsDefaultHeights:enum'
  - '@fluentui/react-internal!ShimmerElementType:enum'
  - '@fluentui/react-internal!SpinnerSize:enum'
  - '@fluentui/react-internal!SpinnerType:enum'
  - '@fluentui/react-internal!StickyPositionType:enum'
  - '@fluentui/react-internal!SuggestionActionType:enum'
  - '@fluentui/react-internal!SuggestionItemType:enum'
  - '@fluentui/react-internal!TooltipDelay:enum'
  - '@fluentui/react-internal!TooltipOverflowMode:enum'
  - '@fluentui/react-internal!ValidationState:enum'
interfaces:
  - '@fluentui/react-internal!IAccessiblePopupProps:interface'
  - '@fluentui/react-internal!IActivityItemProps:interface'
  - '@fluentui/react-internal!IActivityItemStyles:interface'
  - '@fluentui/react-internal!IAnnouncedProps:interface'
  - '@fluentui/react-internal!IAnnouncedStyles:interface'
  - '@fluentui/react-internal!IAutofill:interface'
  - '@fluentui/react-internal!IAutofillProps:interface'
  - '@fluentui/react-internal!IAutofillState:interface'
  - '@fluentui/react-internal!IBaseExtendedPicker:interface'
  - '@fluentui/react-internal!IBaseExtendedPickerProps:interface'
  - '@fluentui/react-internal!IBaseExtendedPickerState:interface'
  - '@fluentui/react-internal!IBaseFloatingPicker:interface'
  - '@fluentui/react-internal!IBaseFloatingPickerProps:interface'
  - '@fluentui/react-internal!IBaseFloatingPickerState:interface'
  - '@fluentui/react-internal!IBasePicker:interface'
  - '@fluentui/react-internal!IBasePickerProps:interface'
  - '@fluentui/react-internal!IBasePickerState:interface'
  - '@fluentui/react-internal!IBasePickerStyles:interface'
  - '@fluentui/react-internal!IBasePickerSuggestionsProps:interface'
  - '@fluentui/react-internal!IBaseSelectedItemsList:interface'
  - '@fluentui/react-internal!IBaseSelectedItemsListProps:interface'
  - '@fluentui/react-internal!IBaseSelectedItemsListState:interface'
  - '@fluentui/react-internal!IButtonGrid:interface'
  - '@fluentui/react-internal!IButtonGridCellProps:interface'
  - '@fluentui/react-internal!IButtonGridProps:interface'
  - '@fluentui/react-internal!IButtonGridStyleProps:interface'
  - '@fluentui/react-internal!IButtonGridStyles:interface'
  - '@fluentui/react-internal!ICalloutBeakPositionedInfo:interface'
  - '@fluentui/react-internal!ICalloutContentStyleProps:interface'
  - '@fluentui/react-internal!ICalloutContentStyles:interface'
  - '@fluentui/react-internal!ICalloutPositionedInfo:interface'
  - '@fluentui/react-internal!ICalloutPositionProps:interface'
  - '@fluentui/react-internal!ICalloutProps:interface'
  - '@fluentui/react-internal!ICheckProps:interface'
  - '@fluentui/react-internal!ICheckStyles:interface'
  - '@fluentui/react-internal!IChoiceGroup:interface'
  - '@fluentui/react-internal!IChoiceGroupOption:interface'
  - '@fluentui/react-internal!IChoiceGroupOptionProps:interface'
  - '@fluentui/react-internal!IChoiceGroupOptionStyleProps:interface'
  - '@fluentui/react-internal!IChoiceGroupOptionStyles:interface'
  - '@fluentui/react-internal!IChoiceGroupProps:interface'
  - '@fluentui/react-internal!IChoiceGroupStyleProps:interface'
  - '@fluentui/react-internal!IChoiceGroupStyles:interface'
  - '@fluentui/react-internal!ICircle:interface'
  - '@fluentui/react-internal!ICoachmark:interface'
  - '@fluentui/react-internal!ICoachmarkProps:interface'
  - '@fluentui/react-internal!ICoachmarkStyleProps:interface'
  - '@fluentui/react-internal!ICoachmarkStyles:interface'
  - '@fluentui/react-internal!IColor:interface'
  - '@fluentui/react-internal!IColorCellProps:interface'
  - '@fluentui/react-internal!IColorPicker:interface'
  - '@fluentui/react-internal!IColorPickerGridCellProps:interface'
  - '@fluentui/react-internal!IColorPickerGridCellStyleProps:interface'
  - '@fluentui/react-internal!IColorPickerGridCellStyles:interface'
  - '@fluentui/react-internal!IColorPickerProps:interface'
  - '@fluentui/react-internal!IColorPickerState:interface'
  - '@fluentui/react-internal!IColorPickerStrings:interface'
  - '@fluentui/react-internal!IColorPickerStyles:interface'
  - '@fluentui/react-internal!IColorRectangle:interface'
  - '@fluentui/react-internal!IColorRectangleProps:interface'
  - '@fluentui/react-internal!IColorRectangleStyleProps:interface'
  - '@fluentui/react-internal!IColorRectangleStyles:interface'
  - '@fluentui/react-internal!IColorSlider:interface'
  - '@fluentui/react-internal!IColorSliderProps:interface'
  - '@fluentui/react-internal!IColorSliderStyles:interface'
  - '@fluentui/react-internal!ICommandBar:interface'
  - '@fluentui/react-internal!ICommandBarData:interface'
  - '@fluentui/react-internal!ICommandBarItemProps:interface'
  - '@fluentui/react-internal!ICommandBarProps:interface'
  - '@fluentui/react-internal!ICommandBarStyleProps:interface'
  - '@fluentui/react-internal!ICommandBarStyles:interface'
  - '@fluentui/react-internal!IContextualMenu:interface'
  - '@fluentui/react-internal!IContextualMenuClassNames:interface'
  - '@fluentui/react-internal!IContextualMenuItem:interface'
  - '@fluentui/react-internal!IContextualMenuItemProps:interface'
  - '@fluentui/react-internal!IContextualMenuItemRenderFunctions:interface'
  - '@fluentui/react-internal!IContextualMenuItemRenderProps:interface'
  - '@fluentui/react-internal!IContextualMenuItemStyleProps:interface'
  - '@fluentui/react-internal!IContextualMenuItemStyles:interface'
  - '@fluentui/react-internal!IContextualMenuListProps:interface'
  - '@fluentui/react-internal!IContextualMenuProps:interface'
  - '@fluentui/react-internal!IContextualMenuRenderItem:interface'
  - '@fluentui/react-internal!IContextualMenuSection:interface'
  - '@fluentui/react-internal!IContextualMenuState:interface'
  - '@fluentui/react-internal!IContextualMenuStyleProps:interface'
  - '@fluentui/react-internal!IContextualMenuStyles:interface'
  - '@fluentui/react-internal!IContextualMenuSubComponentStyles:interface'
  - '@fluentui/react-internal!IDialog:interface'
  - '@fluentui/react-internal!IDialogContent:interface'
  - '@fluentui/react-internal!IDialogContentProps:interface'
  - '@fluentui/react-internal!IDialogContentStyleProps:interface'
  - '@fluentui/react-internal!IDialogContentStyles:interface'
  - '@fluentui/react-internal!IDialogFooter:interface'
  - '@fluentui/react-internal!IDialogFooterProps:interface'
  - '@fluentui/react-internal!IDialogFooterStyleProps:interface'
  - '@fluentui/react-internal!IDialogFooterStyles:interface'
  - '@fluentui/react-internal!IDialogProps:interface'
  - '@fluentui/react-internal!IDialogStyleProps:interface'
  - '@fluentui/react-internal!IDialogStyles:interface'
  - '@fluentui/react-internal!IDragDropContext:interface'
  - '@fluentui/react-internal!IDragDropEvent:interface'
  - '@fluentui/react-internal!IDragDropEvents:interface'
  - '@fluentui/react-internal!IDragDropHelper:interface'
  - '@fluentui/react-internal!IDragDropHelperParams:interface'
  - '@fluentui/react-internal!IDragDropOptions:interface'
  - '@fluentui/react-internal!IDragDropTarget:interface'
  - '@fluentui/react-internal!IDragOptions:interface'
  - '@fluentui/react-internal!IEditingSelectedPeopleItemProps:interface'
  - '@fluentui/react-internal!IEditingSelectedPeopleItemStyles:interface'
  - '@fluentui/react-internal!IEditingSelectedPeopleItemStylesProps:interface'
  - '@fluentui/react-internal!IElementPosition:interface'
  - '@fluentui/react-internal!IElementPositionInfo:interface'
  - '@fluentui/react-internal!IEntityRect:interface'
  - '@fluentui/react-internal!IExpandingCard:interface'
  - '@fluentui/react-internal!IExpandingCardProps:interface'
  - '@fluentui/react-internal!IExpandingCardState:interface'
  - '@fluentui/react-internal!IExpandingCardStyleProps:interface'
  - '@fluentui/react-internal!IExpandingCardStyles:interface'
  - '@fluentui/react-internal!IExtendedPeoplePickerProps:interface'
  - '@fluentui/react-internal!IExtendedPersonaProps:interface'
  - '@fluentui/react-internal!IFabricProps:interface'
  - '@fluentui/react-internal!IFabricStyleProps:interface'
  - '@fluentui/react-internal!IFabricStyles:interface'
  - '@fluentui/react-internal!IFacepile:interface'
  - '@fluentui/react-internal!IFacepilePersona:interface'
  - '@fluentui/react-internal!IFacepileProps:interface'
  - '@fluentui/react-internal!IFacepileStyleProps:interface'
  - '@fluentui/react-internal!IFacepileStyles:interface'
  - '@fluentui/react-internal!IFocusTrapCalloutProps:interface'
  - '@fluentui/react-internal!IFocusTrapZone:interface'
  - '@fluentui/react-internal!IFocusTrapZoneProps:interface'
  - '@fluentui/react-internal!IFontIconProps:interface'
  - '@fluentui/react-internal!IGap:interface'
  - '@fluentui/react-internal!IGenericItem:interface'
  - '@fluentui/react-internal!IHoverCard:interface'
  - '@fluentui/react-internal!IHoverCardProps:interface'
  - '@fluentui/react-internal!IHoverCardState:interface'
  - '@fluentui/react-internal!IHoverCardStyleProps:interface'
  - '@fluentui/react-internal!IHoverCardStyles:interface'
  - '@fluentui/react-internal!IHSL:interface'
  - '@fluentui/react-internal!IHSV:interface'
  - '@fluentui/react-internal!IIconContent:interface'
  - '@fluentui/react-internal!IIconProps:interface'
  - '@fluentui/react-internal!IIconState:interface'
  - '@fluentui/react-internal!IIconStyleProps:interface'
  - '@fluentui/react-internal!IIconStyles:interface'
  - '@fluentui/react-internal!IImage:interface'
  - '@fluentui/react-internal!IImageIconProps:interface'
  - '@fluentui/react-internal!IImageProps:interface'
  - '@fluentui/react-internal!IImageState:interface'
  - '@fluentui/react-internal!IImageStyleProps:interface'
  - '@fluentui/react-internal!IImageStyles:interface'
  - '@fluentui/react-internal!IInputProps:interface'
  - '@fluentui/react-internal!IKeytipConfig:interface'
  - '@fluentui/react-internal!IKeytipConfigItem:interface'
  - '@fluentui/react-internal!IKeytipConfigMap:interface'
  - '@fluentui/react-internal!IKeytipDataProps:interface'
  - '@fluentui/react-internal!IKeytipLayer:interface'
  - '@fluentui/react-internal!IKeytipLayerProps:interface'
  - '@fluentui/react-internal!IKeytipLayerState:interface'
  - '@fluentui/react-internal!IKeytipLayerStyleProps:interface'
  - '@fluentui/react-internal!IKeytipLayerStyles:interface'
  - '@fluentui/react-internal!IKeytipProps:interface'
  - '@fluentui/react-internal!IKeytipStyleProps:interface'
  - '@fluentui/react-internal!IKeytipStyles:interface'
  - '@fluentui/react-internal!IKeytipTransitionKey:interface'
  - '@fluentui/react-internal!ILabel:interface'
  - '@fluentui/react-internal!ILabelProps:interface'
  - '@fluentui/react-internal!ILabelStyleProps:interface'
  - '@fluentui/react-internal!ILabelStyles:interface'
  - '@fluentui/react-internal!ILayer:interface'
  - '@fluentui/react-internal!ILayerHost:interface'
  - '@fluentui/react-internal!ILayerHostProps:interface'
  - '@fluentui/react-internal!ILayerProps:interface'
  - '@fluentui/react-internal!ILayerStyleProps:interface'
  - '@fluentui/react-internal!ILayerStyles:interface'
  - '@fluentui/react-internal!ILine:interface'
  - '@fluentui/react-internal!IList:interface'
  - '@fluentui/react-internal!IListOnRenderRootProps:interface'
  - '@fluentui/react-internal!IListOnRenderSurfaceProps:interface'
  - '@fluentui/react-internal!IListProps:interface'
  - '@fluentui/react-internal!IListState:interface'
  - '@fluentui/react-internal!IMarqueeSelection:interface'
  - '@fluentui/react-internal!IMarqueeSelectionProps:interface'
  - '@fluentui/react-internal!IMarqueeSelectionStyleProps:interface'
  - '@fluentui/react-internal!IMarqueeSelectionStyles:interface'
  - '@fluentui/react-internal!IMaskedTextField:interface'
  - '@fluentui/react-internal!IMaskedTextFieldProps:interface'
  - '@fluentui/react-internal!IMenuItemClassNames:interface'
  - '@fluentui/react-internal!IMenuItemStyles:interface'
  - '@fluentui/react-internal!IMessageBar:interface'
  - '@fluentui/react-internal!IMessageBarProps:interface'
  - '@fluentui/react-internal!IMessageBarStyleProps:interface'
  - '@fluentui/react-internal!IMessageBarStyles:interface'
  - '@fluentui/react-internal!IModal:interface'
  - '@fluentui/react-internal!IModalProps:interface'
  - '@fluentui/react-internal!IModalStyles:interface'
  - '@fluentui/react-internal!INav:interface'
  - '@fluentui/react-internal!INavButtonProps:interface'
  - '@fluentui/react-internal!INavLink:interface'
  - '@fluentui/react-internal!INavLinkGroup:interface'
  - '@fluentui/react-internal!INavProps:interface'
  - '@fluentui/react-internal!INavState:interface'
  - '@fluentui/react-internal!INavStyleProps:interface'
  - '@fluentui/react-internal!INavStyles:interface'
  - '@fluentui/react-internal!IOverflowSet:interface'
  - '@fluentui/react-internal!IOverflowSetItemProps:interface'
  - '@fluentui/react-internal!IOverflowSetProps:interface'
  - '@fluentui/react-internal!IOverflowSetStyles:interface'
  - '@fluentui/react-internal!IOverlay:interface'
  - '@fluentui/react-internal!IOverlayProps:interface'
  - '@fluentui/react-internal!IOverlayStyleProps:interface'
  - '@fluentui/react-internal!IOverlayStyles:interface'
  - '@fluentui/react-internal!IPage:interface'
  - '@fluentui/react-internal!IPageProps:interface'
  - '@fluentui/react-internal!IPageSpecification:interface'
  - '@fluentui/react-internal!IPanel:interface'
  - '@fluentui/react-internal!IPanelHeaderRenderer:interface'
  - '@fluentui/react-internal!IPanelProps:interface'
  - '@fluentui/react-internal!IPanelStyleProps:interface'
  - '@fluentui/react-internal!IPanelStyles:interface'
  - '@fluentui/react-internal!IPanelSubComponentStyles:interface'
  - '@fluentui/react-internal!IPeopleFloatingPickerProps:interface'
  - '@fluentui/react-internal!IPeoplePickerItemProps:interface'
  - '@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface'
  - '@fluentui/react-internal!IPeoplePickerItemSelectedStyles:interface'
  - >-
    @fluentui/react-internal!IPeoplePickerItemSelectedSubComponentStyles:interface
  - '@fluentui/react-internal!IPeoplePickerItemSharedProps:interface'
  - '@fluentui/react-internal!IPeoplePickerItemState:interface'
  - '@fluentui/react-internal!IPeoplePickerItemSuggestionProps:interface'
  - '@fluentui/react-internal!IPeoplePickerItemSuggestionStyles:interface'
  - '@fluentui/react-internal!IPeoplePickerItemWithMenuProps:interface'
  - '@fluentui/react-internal!IPeoplePickerProps:interface'
  - '@fluentui/react-internal!IPersona:interface'
  - '@fluentui/react-internal!IPersonaCoinProps:interface'
  - '@fluentui/react-internal!IPersonaCoinStyleProps:interface'
  - '@fluentui/react-internal!IPersonaCoinStyles:interface'
  - '@fluentui/react-internal!IPersonaPresenceProps:interface'
  - '@fluentui/react-internal!IPersonaPresenceStyles:interface'
  - '@fluentui/react-internal!IPersonaProps:interface'
  - '@fluentui/react-internal!IPersonaSharedProps:interface'
  - '@fluentui/react-internal!IPersonaStyleProps:interface'
  - '@fluentui/react-internal!IPersonaStyles:interface'
  - '@fluentui/react-internal!IPersonaWithMenu:interface'
  - '@fluentui/react-internal!IPickerItem:interface'
  - '@fluentui/react-internal!IPickerItemProps:interface'
  - '@fluentui/react-internal!IPlainCard:interface'
  - '@fluentui/react-internal!IPlainCardProps:interface'
  - '@fluentui/react-internal!IPlainCardStyleProps:interface'
  - '@fluentui/react-internal!IPlainCardStyles:interface'
  - '@fluentui/react-internal!IPopupProps:interface'
  - '@fluentui/react-internal!IPopupRestoreFocusParams:interface'
  - '@fluentui/react-internal!IPosition:interface'
  - '@fluentui/react-internal!IPositionDirectionalHintData:interface'
  - '@fluentui/react-internal!IPositionedData:interface'
  - '@fluentui/react-internal!IPositioningContainer:interface'
  - '@fluentui/react-internal!IPositioningContainerProps:interface'
  - '@fluentui/react-internal!IPositionProps:interface'
  - '@fluentui/react-internal!IProgressIndicatorProps:interface'
  - '@fluentui/react-internal!IProgressIndicatorStyleProps:interface'
  - '@fluentui/react-internal!IProgressIndicatorStyles:interface'
  - '@fluentui/react-internal!IRating:interface'
  - '@fluentui/react-internal!IRatingProps:interface'
  - '@fluentui/react-internal!IRatingStyleProps:interface'
  - '@fluentui/react-internal!IRatingStyles:interface'
  - '@fluentui/react-internal!IRelativePositions:interface'
  - '@fluentui/react-internal!IRenderGroupHeaderProps:interface'
  - '@fluentui/react-internal!IResizeGroup:interface'
  - '@fluentui/react-internal!IResizeGroupProps:interface'
  - '@fluentui/react-internal!IResizeGroupState:interface'
  - '@fluentui/react-internal!IResizeGroupStyleProps:interface'
  - '@fluentui/react-internal!IResizeGroupStyles:interface'
  - '@fluentui/react-internal!IRGB:interface'
  - '@fluentui/react-internal!IScrollablePane:interface'
  - '@fluentui/react-internal!IScrollablePaneContext:interface'
  - '@fluentui/react-internal!IScrollablePaneProps:interface'
  - '@fluentui/react-internal!IScrollablePaneState:interface'
  - '@fluentui/react-internal!IScrollablePaneStyleProps:interface'
  - '@fluentui/react-internal!IScrollablePaneStyles:interface'
  - '@fluentui/react-internal!ISearchBox:interface'
  - '@fluentui/react-internal!ISearchBoxProps:interface'
  - '@fluentui/react-internal!ISearchBoxStyleProps:interface'
  - '@fluentui/react-internal!ISearchBoxStyles:interface'
  - '@fluentui/react-internal!ISelectableDroppableTextProps:interface'
  - '@fluentui/react-internal!ISelectableOption:interface'
  - '@fluentui/react-internal!ISelectedItemProps:interface'
  - '@fluentui/react-internal!ISelectedPeopleItemProps:interface'
  - '@fluentui/react-internal!ISelectedPeopleProps:interface'
  - '@fluentui/react-internal!ISelectionZone:interface'
  - '@fluentui/react-internal!ISelectionZoneProps:interface'
  - '@fluentui/react-internal!ISelectionZoneState:interface'
  - '@fluentui/react-internal!ISeparator:interface'
  - '@fluentui/react-internal!ISeparatorProps:interface'
  - '@fluentui/react-internal!ISeparatorStyles:interface'
  - '@fluentui/react-internal!IShimmerCircle:interface'
  - '@fluentui/react-internal!IShimmerCircleProps:interface'
  - '@fluentui/react-internal!IShimmerCircleStyles:interface'
  - '@fluentui/react-internal!IShimmerColors:interface'
  - '@fluentui/react-internal!IShimmerElement:interface'
  - '@fluentui/react-internal!IShimmerElementsGroup:interface'
  - '@fluentui/react-internal!IShimmerElementsGroupProps:interface'
  - '@fluentui/react-internal!IShimmerElementsGroupStyleProps:interface'
  - '@fluentui/react-internal!IShimmerElementsGroupStyles:interface'
  - '@fluentui/react-internal!IShimmerGap:interface'
  - '@fluentui/react-internal!IShimmerGapProps:interface'
  - '@fluentui/react-internal!IShimmerGapStyles:interface'
  - '@fluentui/react-internal!IShimmerLine:interface'
  - '@fluentui/react-internal!IShimmerLineProps:interface'
  - '@fluentui/react-internal!IShimmerLineStyles:interface'
  - '@fluentui/react-internal!IShimmerProps:interface'
  - '@fluentui/react-internal!IShimmerStyleProps:interface'
  - '@fluentui/react-internal!IShimmerStyles:interface'
  - '@fluentui/react-internal!ISpinButton:interface'
  - '@fluentui/react-internal!ISpinButtonProps:interface'
  - '@fluentui/react-internal!ISpinButtonStyleProps:interface'
  - '@fluentui/react-internal!ISpinButtonStyles:interface'
  - '@fluentui/react-internal!ISpinner:interface'
  - '@fluentui/react-internal!ISpinnerProps:interface'
  - '@fluentui/react-internal!ISpinnerStyleProps:interface'
  - '@fluentui/react-internal!ISpinnerStyles:interface'
  - '@fluentui/react-internal!IStackItemProps:interface'
  - '@fluentui/react-internal!IStackItemSlots:interface'
  - '@fluentui/react-internal!IStackItemTokens:interface'
  - '@fluentui/react-internal!IStackProps:interface'
  - '@fluentui/react-internal!IStackSlots:interface'
  - '@fluentui/react-internal!IStackTokens:interface'
  - '@fluentui/react-internal!IStickyProps:interface'
  - '@fluentui/react-internal!IStickyState:interface'
  - '@fluentui/react-internal!ISuggestionItemProps:interface'
  - '@fluentui/react-internal!ISuggestionModel:interface'
  - '@fluentui/react-internal!ISuggestions:interface'
  - '@fluentui/react-internal!ISuggestionsControlProps:interface'
  - '@fluentui/react-internal!ISuggestionsControlState:interface'
  - '@fluentui/react-internal!ISuggestionsCoreProps:interface'
  - '@fluentui/react-internal!ISuggestionsHeaderFooterItemProps:interface'
  - '@fluentui/react-internal!ISuggestionsHeaderFooterProps:interface'
  - '@fluentui/react-internal!ISuggestionsItem:interface'
  - '@fluentui/react-internal!ISuggestionsItemStyles:interface'
  - '@fluentui/react-internal!ISuggestionsProps:interface'
  - '@fluentui/react-internal!ISuggestionsState:interface'
  - '@fluentui/react-internal!ISuggestionsStyles:interface'
  - '@fluentui/react-internal!ISuggestionsSubComponentStyles:interface'
  - '@fluentui/react-internal!ISwatchColorPickerProps:interface'
  - '@fluentui/react-internal!ISwatchColorPickerStyleProps:interface'
  - '@fluentui/react-internal!ISwatchColorPickerStyles:interface'
  - '@fluentui/react-internal!ITag:interface'
  - '@fluentui/react-internal!ITagItemProps:interface'
  - '@fluentui/react-internal!ITagItemStyles:interface'
  - '@fluentui/react-internal!ITagItemSuggestionProps:interface'
  - '@fluentui/react-internal!ITagItemSuggestionStyles:interface'
  - '@fluentui/react-internal!ITagPickerProps:interface'
  - '@fluentui/react-internal!ITeachingBubble:interface'
  - '@fluentui/react-internal!ITeachingBubbleProps:interface'
  - '@fluentui/react-internal!ITeachingBubbleStyles:interface'
  - '@fluentui/react-internal!ITeachingBubbleSubComponentStyles:interface'
  - '@fluentui/react-internal!ITextField:interface'
  - '@fluentui/react-internal!ITextFieldProps:interface'
  - '@fluentui/react-internal!ITextFieldStyles:interface'
  - '@fluentui/react-internal!ITextFieldSubComponentStyles:interface'
  - '@fluentui/react-internal!ITextProps:interface'
  - '@fluentui/react-internal!ITextSlots:interface'
  - '@fluentui/react-internal!ITextTokens:interface'
  - '@fluentui/react-internal!IThemeRules:interface'
  - '@fluentui/react-internal!IThemeSlotRule:interface'
  - '@fluentui/react-internal!ITooltip:interface'
  - '@fluentui/react-internal!ITooltipHost:interface'
  - '@fluentui/react-internal!ITooltipHostProps:interface'
  - '@fluentui/react-internal!ITooltipHostState:interface'
  - '@fluentui/react-internal!ITooltipHostStyleProps:interface'
  - '@fluentui/react-internal!ITooltipHostStyles:interface'
  - '@fluentui/react-internal!ITooltipProps:interface'
  - '@fluentui/react-internal!ITooltipStyleProps:interface'
  - '@fluentui/react-internal!ITooltipStyles:interface'
  - '@fluentui/react-internal!IUniqueKeytip:interface'
  - '@fluentui/react-internal!IVerticalDividerClassNames:interface'
  - '@fluentui/react-internal!IVerticalDividerProps:interface'
  - '@fluentui/react-internal!IVerticalDividerStyles:interface'
  - '@fluentui/react-internal!IWindowWithSegments:interface'
functions:
  - name: buildKeytipConfigMap(config)
    uid: '@fluentui/react-internal!buildKeytipConfigMap:function(1)'
    package: '@fluentui/react-internal!'
    summary: Builds a map of ID to IKeytipProps
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function buildKeytipConfigMap(config: IKeytipConfig):
        IKeytipConfigMap;
      parameters:
        - id: config
          description: IKeytipConfig object
          type: IKeytipConfig
      return:
        type: IKeytipConfigMap
        description: Config map
  - name: canAnyMenuItemsCheck(items)
    uid: '@fluentui/react-internal!canAnyMenuItemsCheck:function(1)'
    package: '@fluentui/react-internal!'
    summary: Returns true if a list of menu items can contain a checkbox
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function canAnyMenuItemsCheck(items:
        IContextualMenuItem[]): boolean;
      parameters:
        - id: items
          description: ''
          type: 'IContextualMenuItem[]'
      return:
        type: boolean
        description: ''
  - name: 'clamp(value, max, min)'
    uid: '@fluentui/react-internal!clamp:function(1)'
    package: '@fluentui/react-internal!'
    summary: Clamp a value to ensure it falls within a given range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function clamp(value: number, max: number, min?: number):
        number;
      parameters:
        - id: value
          description: ''
          type: number
        - id: max
          description: ''
          type: number
        - id: min
          description: ''
          type: number
      return:
        type: number
        description: ''
  - name: 'constructKeytip(configMap, parentSequence, keytip)'
    uid: '@fluentui/react-internal!constructKeytip:function(1)'
    package: '@fluentui/react-internal!'
    summary: Constructs a keytip from an IKeytipConfigItem and puts it in the configMap
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function constructKeytip(configMap: IKeytipConfigMap,
        parentSequence: string[], keytip: IKeytipConfigItem): void;
      parameters:
        - id: configMap
          description: IKeytipConfigMap to store the keytip in
          type: IKeytipConfigMap
        - id: parentSequence
          description: string of the parent keytip
          type: 'string[]'
        - id: keytip
          description: IKeytipConfigItem data
          type: IKeytipConfigItem
      return:
        type: void
        description: ''
  - name: correctHex(hex)
    uid: '@fluentui/react-internal!correctHex:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Corrects a hex color to have length 3 or 6. Defaults to white if too
      short. Does NOT check anything besides the length (such as valid
      characters) and does NOT handle hex values starting with \# sign.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function correctHex(hex: string): string;'
      parameters:
        - id: hex
          description: ''
          type: string
      return:
        type: string
        description: ''
  - name: correctHSV(color)
    uid: '@fluentui/react-internal!correctHSV:function(1)'
    package: '@fluentui/react-internal!'
    summary: Corrects an HSV color to fall within the valid range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function correctHSV(color: IHSV): IHSV;'
      parameters:
        - id: color
          description: ''
          type: IHSV
      return:
        type: IHSV
        description: ''
  - name: correctRGB(color)
    uid: '@fluentui/react-internal!correctRGB:function(1)'
    package: '@fluentui/react-internal!'
    summary: Corrects an RGB color to fall within the valid range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function correctRGB(color: IRGB): IRGB;'
      parameters:
        - id: color
          description: ''
          type: IRGB
      return:
        type: IRGB
        description: ''
  - name: 'createGenericItem(name, currentValidationState)'
    uid: '@fluentui/react-internal!createGenericItem:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function createGenericItem(name: string,
        currentValidationState: ValidationState): IGenericItem & {
            key: React.Key;
        };
      parameters:
        - id: name
          description: ''
          type: string
        - id: currentValidationState
          description: ''
          type: ValidationState
      return:
        type: |-
          IGenericItem & {
              key: React.Key;
          }
        description: ''
  - name: 'createItem(name, isValid)'
    uid: '@fluentui/react-internal!createItem:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function createItem(name: string, isValid: boolean):
        ISuggestionModel<IPersonaProps>;
      parameters:
        - id: name
          description: ''
          type: string
        - id: isValid
          description: ''
          type: boolean
      return:
        type: ISuggestionModel&lt;IPersonaProps&gt;
        description: ''
  - name: cssColor(color)
    uid: '@fluentui/react-internal!cssColor:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Converts a valid CSS color string to an RGB color. Note that hex colors
      \*must\* be prefixed with \# to be considered valid. Alpha in returned
      color defaults to 100. Four and eight digit hex values (with alpha) are
      supported if the current browser supports them.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function cssColor(color?: string): IRGB | undefined;'
      parameters:
        - id: color
          description: ''
          type: string
      return:
        type: IRGB | undefined
        description: ''
  - name: 'getAllSelectedOptions(options, selectedIndices)'
    uid: '@fluentui/react-internal!getAllSelectedOptions:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getAllSelectedOptions(options:
        ISelectableOption[], selectedIndices: number[]): ISelectableOption[];
      parameters:
        - id: options
          description: ''
          type: 'ISelectableOption[]'
        - id: selectedIndices
          description: ''
          type: 'number[]'
      return:
        type: 'ISelectableOption[]'
        description: ''
  - name: getAriaDescribedBy(keySequences)
    uid: '@fluentui/react-internal!getAriaDescribedBy:function(1)'
    package: '@fluentui/react-internal!'
    summary: Gets the aria-describedby value to put on the component with this keytip.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getAriaDescribedBy(keySequences: string[]):
        string;
      parameters:
        - id: keySequences
          description: KeySequences of the keytip.
          type: 'string[]'
      return:
        type: string
        description: The aria-describedby value to set on the component with this keytip.
  - name: 'getBackgroundShade(color, shade, isInverted)'
    uid: '@fluentui/react-internal!getBackgroundShade:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getBackgroundShade(color: IColor, shade: Shade,
        isInverted?: boolean): IColor | null;
      parameters:
        - id: color
          description: ''
          type: IColor
        - id: shade
          description: ''
          type: Shade
        - id: isInverted
          description: ''
          type: boolean
      return:
        type: IColor | null
        description: ''
  - name: 'getBoundsFromTargetWindow(target, targetWindow)'
    uid: '@fluentui/react-internal!getBoundsFromTargetWindow:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getBoundsFromTargetWindow(target: Element |
        MouseEvent | Point | null, targetWindow: IWindowWithSegments):
        IRectangle;
      parameters:
        - id: target
          description: ''
          type: Element | MouseEvent | Point | null
        - id: targetWindow
          description: ''
          type: IWindowWithSegments
      return:
        type: '<xref uid="@fluentui/utilities!IRectangle:interface" />'
        description: ''
  - name: 'getColorFromHSV(hsv, a)'
    uid: '@fluentui/react-internal!getColorFromHSV:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Converts an HSV color (and optional alpha value) to a color object. If `a`
      is not given, a default of 100 is used. Hex in the returned value will
      \*not\* be prefixed with \#. If `a` is unspecified or 100, the result's
      `str` property will contain a hex value (\*not\* prefixed with \#)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getColorFromHSV(hsv: IHSV, a?: number): IColor;'
      parameters:
        - id: hsv
          description: ''
          type: IHSV
        - id: a
          description: ''
          type: number
      return:
        type: IColor
        description: ''
  - name: getColorFromRGBA(rgba)
    uid: '@fluentui/react-internal!getColorFromRGBA:function(1)'
    package: '@fluentui/react-internal!'
    summary: Converts an RGBA color to a color object (alpha defaults to 100).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getColorFromRGBA(rgba: IRGB): IColor;'
      parameters:
        - id: rgba
          description: ''
          type: IRGB
      return:
        type: IColor
        description: ''
  - name: getColorFromString(inputColor)
    uid: '@fluentui/react-internal!getColorFromString:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Converts a CSS color string to a color object. Note that hex colors
      \*must\* be prefixed with \# to be considered valid.


      `inputColor` will be used unmodified as the `str` property of the returned
      object. Alpha defaults to 100 if not specified in `inputColor`<!-- -->.
      Returns undefined if the color string is invalid/not recognized.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getColorFromString(inputColor: string): IColor |
        undefined;
      parameters:
        - id: inputColor
          description: ''
          type: string
      return:
        type: IColor | undefined
        description: ''
  - name: 'getContrastRatio(color1, color2)'
    uid: '@fluentui/react-internal!getContrastRatio:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getContrastRatio(color1: IColor, color2:
        IColor): number;
      parameters:
        - id: color1
          description: ''
          type: IColor
        - id: color2
          description: ''
          type: IColor
      return:
        type: number
        description: ''
  - name: getFullColorString(color)
    uid: '@fluentui/react-internal!getFullColorString:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Converts a color hue to an HTML color string (with \# prefix). This
      implementation ignores all components of `color` except hue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function getFullColorString(color: IColor): string;'
      parameters:
        - id: color
          description: ''
          type: IColor
      return:
        type: string
        description: ''
  - name: 'getMaxHeight(target, targetEdge, gapSpace, bounds, coverTarget)'
    uid: '@fluentui/react-internal!getMaxHeight:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Gets the maximum height that a rectangle can have in order to fit below or
      above a target. If the directional hint specifies a left or right edge
      (i.e. leftCenter) it will limit the height to the topBorder of the target
      given. If no bounds are provided then the window is treated as the bounds.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getMaxHeight(target: Element | MouseEvent |
        Point, targetEdge: DirectionalHint, gapSpace?: number, bounds?:
        IRectangle, coverTarget?: boolean): number;
      parameters:
        - id: target
          description: ''
          type: Element | MouseEvent | Point
        - id: targetEdge
          description: ''
          type: DirectionalHint
        - id: gapSpace
          description: ''
          type: number
        - id: bounds
          description: ''
          type: '<xref uid="@fluentui/utilities!IRectangle:interface" />'
        - id: coverTarget
          description: ''
          type: boolean
      return:
        type: number
        description: ''
  - name: getOppositeEdge(edge)
    uid: '@fluentui/react-internal!getOppositeEdge:function(1)'
    package: '@fluentui/react-internal!'
    summary: Returns the opposite edge of the given RectangleEdge.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getOppositeEdge(edge: RectangleEdge):
        RectangleEdge;
      parameters:
        - id: edge
          description: ''
          type: RectangleEdge
      return:
        type: RectangleEdge
        description: ''
  - name: getPersonaInitialsColor(props)
    uid: '@fluentui/react-internal!getPersonaInitialsColor:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Gets the hex color string (prefixed with \#) for the given persona props.
      This is the logic used internally by the Persona control.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getPersonaInitialsColor(props:
        Pick<IPersonaProps, 'primaryText' | 'text' | 'initialsColor'>): string;
      parameters:
        - id: props
          description: Current persona props
          type: 'Pick&lt;IPersonaProps, ''primaryText'' | ''text'' | ''initialsColor''&gt;'
      return:
        type: string
        description: Hex color string prefixed with \#
  - name: 'getShade(color, shade, isInverted)'
    uid: '@fluentui/react-internal!getShade:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Given a color and a shade specification, generates the requested shade of
      the color. Logic: if white darken via tables defined above if black
      lighten if light strongen if dark soften else default soften or strongen
      depending on shade\#
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getShade(color: IColor, shade: Shade,
        isInverted?: boolean): IColor | null;
      parameters:
        - id: color
          description: The base color whose shade is to be computed
          type: IColor
        - id: shade
          description: The shade of the base color to compute
          type: Shade
        - id: isInverted
          description: >-
            Default false. Whether the given theme is inverted (reverse
            strongen/soften logic)
          type: boolean
      return:
        type: IColor | null
        description: ''
  - name: getSubmenuItems(item)
    uid: '@fluentui/react-internal!getSubmenuItems:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function getSubmenuItems(item: IContextualMenuItem):
        IContextualMenuItem[] | undefined;
      parameters:
        - id: item
          description: ''
          type: IContextualMenuItem
      return:
        type: 'IContextualMenuItem[] | undefined'
        description: ''
  - name: 'hsl2hsv(h, s, l)'
    uid: '@fluentui/react-internal!hsl2hsv:function(1)'
    package: '@fluentui/react-internal!'
    summary: Converts HSL components to an HSV color.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function hsl2hsv(h: number, s: number, l: number): IHSV;'
      parameters:
        - id: h
          description: ''
          type: number
        - id: s
          description: ''
          type: number
        - id: l
          description: ''
          type: number
      return:
        type: IHSV
        description: ''
  - name: 'hsl2rgb(h, s, l)'
    uid: '@fluentui/react-internal!hsl2rgb:function(1)'
    package: '@fluentui/react-internal!'
    summary: Converts HSL components to an RGB color. Does not set the alpha value.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function hsl2rgb(h: number, s: number, l: number): IRGB;'
      parameters:
        - id: h
          description: ''
          type: number
        - id: s
          description: ''
          type: number
        - id: l
          description: ''
          type: number
      return:
        type: IRGB
        description: ''
  - name: 'hsv2hex(h, s, v)'
    uid: '@fluentui/react-internal!hsv2hex:function(1)'
    package: '@fluentui/react-internal!'
    summary: Converts HSV components to a hex color string (without \# prefix).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function hsv2hex(h: number, s: number, v: number):
        string;
      parameters:
        - id: h
          description: ''
          type: number
        - id: s
          description: ''
          type: number
        - id: v
          description: ''
          type: number
      return:
        type: string
        description: ''
  - name: 'hsv2hsl(h, s, v)'
    uid: '@fluentui/react-internal!hsv2hsl:function(1)'
    package: '@fluentui/react-internal!'
    summary: Converts HSV components to an HSL color.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function hsv2hsl(h: number, s: number, v: number): IHSL;'
      parameters:
        - id: h
          description: ''
          type: number
        - id: s
          description: ''
          type: number
        - id: v
          description: ''
          type: number
      return:
        type: IHSL
        description: ''
  - name: 'hsv2rgb(h, s, v)'
    uid: '@fluentui/react-internal!hsv2rgb:function(1)'
    package: '@fluentui/react-internal!'
    summary: Converts HSV components to an RGB color. Does not set the alpha value.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function hsv2rgb(h: number, s: number, v: number): IRGB;'
      parameters:
        - id: h
          description: ''
          type: number
        - id: s
          description: ''
          type: number
        - id: v
          description: ''
          type: number
      return:
        type: IRGB
        description: ''
  - name: isDark(color)
    uid: '@fluentui/react-internal!isDark:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function isDark(color: IColor): boolean;'
      parameters:
        - id: color
          description: ''
          type: IColor
      return:
        type: boolean
        description: ''
  - name: isRelativeUrl(url)
    uid: '@fluentui/react-internal!isRelativeUrl:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function isRelativeUrl(url: string): boolean;'
      parameters:
        - id: url
          description: ''
          type: string
      return:
        type: boolean
        description: ''
  - name: isValidShade(shade)
    uid: '@fluentui/react-internal!isValidShade:function(1)'
    package: '@fluentui/react-internal!'
    summary: Returns true if the argument is a valid Shade value
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function isValidShade(shade?: Shade): boolean;'
      parameters:
        - id: shade
          description: The Shade value to validate.
          type: Shade
      return:
        type: boolean
        description: ''
  - name: ktpTargetFromId(keytipId)
    uid: '@fluentui/react-internal!ktpTargetFromId:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Constructs the data-ktp-execute-target attribute selector from a keytip
      ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function ktpTargetFromId(keytipId: string): string;'
      parameters:
        - id: keytipId
          description: ID of the Keytip.
          type: string
      return:
        type: string
        description: String selector to use to query for the keytip execute target.
  - name: ktpTargetFromSequences(keySequences)
    uid: '@fluentui/react-internal!ktpTargetFromSequences:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Constructs the data-ktp-target attribute selector from a full key
      sequence.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function ktpTargetFromSequences(keySequences: string[]):
        string;
      parameters:
        - id: keySequences
          description: 'Full string\[\] for a Keytip.'
          type: 'string[]'
      return:
        type: string
        description: String selector to use to query for the keytip target.
  - name: 'mergeOverflows(keySequences, overflowKeySequences)'
    uid: '@fluentui/react-internal!mergeOverflows:function(1)'
    package: '@fluentui/react-internal!'
    summary: Merges an overflow sequence with a key sequence.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function mergeOverflows(keySequences: string[],
        overflowKeySequences: string[]): string[];
      parameters:
        - id: keySequences
          description: Full sequence for one keytip.
          type: 'string[]'
        - id: overflowKeySequences
          description: Full overflow keytip sequence.
          type: 'string[]'
      return:
        type: 'string[]'
        description: Sequence that will be used by the keytip when in the overflow.
  - name: 'positionCallout(props, hostElement, elementToPosition, previousPositions)'
    uid: '@fluentui/react-internal!positionCallout:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function positionCallout(props: IPositionProps,
        hostElement: HTMLElement, elementToPosition: HTMLElement,
        previousPositions?: ICalloutPositionedInfo): ICalloutPositionedInfo;
      parameters:
        - id: props
          description: ''
          type: IPositionProps
        - id: hostElement
          description: ''
          type: HTMLElement
        - id: elementToPosition
          description: ''
          type: HTMLElement
        - id: previousPositions
          description: ''
          type: ICalloutPositionedInfo
      return:
        type: ICalloutPositionedInfo
        description: ''
  - name: 'positionCard(props, hostElement, elementToPosition, previousPositions)'
    uid: '@fluentui/react-internal!positionCard:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function positionCard(props: IPositionProps, hostElement:
        HTMLElement, elementToPosition: HTMLElement, previousPositions?:
        ICalloutPositionedInfo): ICalloutPositionedInfo;
      parameters:
        - id: props
          description: ''
          type: IPositionProps
        - id: hostElement
          description: ''
          type: HTMLElement
        - id: elementToPosition
          description: ''
          type: HTMLElement
        - id: previousPositions
          description: ''
          type: ICalloutPositionedInfo
      return:
        type: ICalloutPositionedInfo
        description: ''
  - name: 'positionElement(props, hostElement, elementToPosition, previousPositions)'
    uid: '@fluentui/react-internal!positionElement:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Used to position an element relative to the given positioning props. If
      positioning has been completed before, previousPositions can be passed to
      ensure that the positioning element repositions based on its previous
      targets rather than starting with directionalhint.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function positionElement(props: IPositionProps,
        hostElement: HTMLElement, elementToPosition: HTMLElement,
        previousPositions?: IPositionedData): IPositionedData;
      parameters:
        - id: props
          description: ''
          type: IPositionProps
        - id: hostElement
          description: ''
          type: HTMLElement
        - id: elementToPosition
          description: ''
          type: HTMLElement
        - id: previousPositions
          description: ''
          type: IPositionedData
      return:
        type: IPositionedData
        description: ''
  - name: 'rgb2hex(r, g, b)'
    uid: '@fluentui/react-internal!rgb2hex:function(1)'
    package: '@fluentui/react-internal!'
    summary: Converts RGB components to a hex color string (without \# prefix).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function rgb2hex(r: number, g: number, b: number):
        string;
      parameters:
        - id: r
          description: ''
          type: number
        - id: g
          description: ''
          type: number
        - id: b
          description: ''
          type: number
      return:
        type: string
        description: ''
  - name: 'rgb2hsv(r, g, b)'
    uid: '@fluentui/react-internal!rgb2hsv:function(1)'
    package: '@fluentui/react-internal!'
    summary: Converts RGB components to an HSV color.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function rgb2hsv(r: number, g: number, b: number): IHSV;'
      parameters:
        - id: r
          description: ''
          type: number
        - id: g
          description: ''
          type: number
        - id: b
          description: ''
          type: number
      return:
        type: IHSV
        description: ''
  - name: sequencesToID(keySequences)
    uid: '@fluentui/react-internal!sequencesToID:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Converts a whole set of KeySequences into one keytip ID, which will be the
      ID for the last keytip sequence specified keySequences should not include
      the initial keytip 'start' sequence.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function sequencesToID(keySequences: string[]): string;'
      parameters:
        - id: keySequences
          description: Full path of IKeySequences for one keytip.
          type: 'string[]'
      return:
        type: string
        description: String to use for the keytip ID.
  - name: themeRulesStandardCreator()
    uid: '@fluentui/react-internal!themeRulesStandardCreator:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function themeRulesStandardCreator(): IThemeRules;'
      return:
        type: IThemeRules
        description: ''
  - name: 'transitionKeysAreEqual(key1, key2)'
    uid: '@fluentui/react-internal!transitionKeysAreEqual:function(1)'
    package: '@fluentui/react-internal!'
    summary: Tests for equality between two IKeytipTransitionKeys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function transitionKeysAreEqual(key1:
        IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean;
      parameters:
        - id: key1
          description: First IKeytipTransitionKey.
          type: IKeytipTransitionKey
        - id: key2
          description: Second IKeytipTransitionKey.
          type: IKeytipTransitionKey
      return:
        type: boolean
        description: T/F if the transition keys are equal.
  - name: 'transitionKeysContain(keys, key)'
    uid: '@fluentui/react-internal!transitionKeysContain:function(1)'
    package: '@fluentui/react-internal!'
    summary: Tests if 'key' is present in 'keys'.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function transitionKeysContain(keys:
        IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean;
      parameters:
        - id: keys
          description: Array of IKeytipTransitionKey.
          type: 'IKeytipTransitionKey[]'
        - id: key
          description: IKeytipTransitionKey to find in 'keys'.
          type: IKeytipTransitionKey
      return:
        type: boolean
        description: T/F if 'keys' contains 'key'.
  - name: 'updateA(color, a)'
    uid: '@fluentui/react-internal!updateA:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Gets a color with the given alpha value and the same other components as
      `color`<!-- -->. Does not modify the original color.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function updateA(color: IColor, a: number): IColor;'
      parameters:
        - id: color
          description: ''
          type: IColor
        - id: a
          description: ''
          type: number
      return:
        type: IColor
        description: ''
  - name: 'updateH(color, h)'
    uid: '@fluentui/react-internal!updateH:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Gets a color with the same saturation and value as `color` and the other
      components updated to match the given hue.


      Does not modify the original `color` and does not supply a default alpha
      value.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function updateH(color: IColor, h: number): IColor;'
      parameters:
        - id: color
          description: ''
          type: IColor
        - id: h
          description: ''
          type: number
      return:
        type: IColor
        description: ''
  - name: 'updateRGB(color, component, value)'
    uid: '@fluentui/react-internal!updateRGB:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Gets a color with a single RGBA component updated to a new value. Does not
      modify the original `color`<!-- -->. Alpha defaults to 100 if not set.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function updateRGB(color: IColor, component: keyof IRGB,
        value: number): IColor;
      parameters:
        - id: color
          description: ''
          type: IColor
        - id: component
          description: ''
          type: keyof IRGB
        - id: value
          description: ''
          type: number
      return:
        type: IColor
        description: ''
  - name: 'updateSV(color, s, v)'
    uid: '@fluentui/react-internal!updateSV:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Gets a color with the same hue as `color` and other components updated to
      match the given saturation and value.


      Does not modify the original `color` and does not supply a default alpha
      value.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function updateSV(color: IColor, s: number, v: number):
        IColor;
      parameters:
        - id: color
          description: ''
          type: IColor
        - id: s
          description: ''
          type: number
        - id: v
          description: ''
          type: number
      return:
        type: IColor
        description: ''
  - name: 'updateT(color, t)'
    uid: '@fluentui/react-internal!updateT:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Gets a color with the given transparency value and the same other
      components as `color`<!-- -->. Does not modify the original color.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export declare function updateT(color: IColor, t: number): IColor;'
      parameters:
        - id: color
          description: ''
          type: IColor
        - id: t
          description: ''
          type: number
      return:
        type: IColor
        description: ''
  - name: 'useHeightOffset({ finalHeight }, contentHost)'
    uid: '@fluentui/react-internal!useHeightOffset:function(1)'
    package: '@fluentui/react-internal!'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function useHeightOffset({ finalHeight }:
        IPositioningContainerProps, contentHost: React.RefObject<HTMLDivElement
        | null>): number;
      parameters:
        - id: '{ finalHeight }'
          description: ''
          type: IPositioningContainerProps
        - id: contentHost
          description: ''
          type: React.RefObject&lt;HTMLDivElement | null&gt;
      return:
        type: number
        description: ''
  - name: useKeytipRef(options)
    uid: '@fluentui/react-internal!useKeytipRef:function(1)'
    package: '@fluentui/react-internal!'
    summary: >-
      Hook that creates a ref which is used for passing to Keytip target
      element. The ref will handle setting the attributes needed for Keytip to
      work.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export declare function useKeytipRef<TElement extends HTMLElement =
        HTMLElement>(options: KeytipDataOptions): React.Ref<TElement>;
      parameters:
        - id: options
          description: ''
          type: KeytipDataOptions
      return:
        type: React.Ref&lt;TElement&gt;
        description: ''
