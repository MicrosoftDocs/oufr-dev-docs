### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-internal!IPositionProps:interface'
    name: IPositionProps
    fullName: IPositionProps
    langs:
      - typeScript
    type: interface
    package: '@fluentui/react-internal!'
    children:
      - '@fluentui/react-internal!IPositionProps#alignTargetEdge:member'
      - '@fluentui/react-internal!IPositionProps#bounds:member'
      - '@fluentui/react-internal!IPositionProps#coverTarget:member'
      - '@fluentui/react-internal!IPositionProps#directionalHint:member'
      - '@fluentui/react-internal!IPositionProps#directionalHintFixed:member'
      - '@fluentui/react-internal!IPositionProps#directionalHintForRTL:member'
      - '@fluentui/react-internal!IPositionProps#gapSpace:member'
      - '@fluentui/react-internal!IPositionProps#target:member'
  - uid: '@fluentui/react-internal!IPositionProps#alignTargetEdge:member'
    summary: >-
      If true the positioning logic will prefer flipping edges over nudging the rectangle to fit within bounds, thus
      making sure the element align perfectly with target.
    name: alignTargetEdge
    fullName: alignTargetEdge
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignTargetEdge?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!IPositionProps#bounds:member'
    summary: The bounding rectangle for which the contextual menu can appear in.
    name: bounds
    fullName: bounds
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bounds?: IRectangle;'
      return:
        type:
          - '@fluentui/utilities!IRectangle:interface'
  - uid: '@fluentui/react-internal!IPositionProps#coverTarget:member'
    summary: >-
      If true the position returned will have the menu element cover the target. If false then it will position next to
      the target;
    name: coverTarget
    fullName: coverTarget
    langs:
      - typeScript
    type: property
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!IPositionProps#directionalHint:member'
    summary: how the element should be positioned
    name: directionalHint
    fullName: directionalHint
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: '@fluentui/react-internal!IPositionProps#directionalHintFixed:member'
    summary: >-
      If true the position will not change edges in an attempt to fit the rectangle within bounds. It will still attempt
      to align it to whatever bounds are given.
    name: directionalHintFixed
    fullName: directionalHintFixed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-internal!IPositionProps#directionalHintForRTL:member'
    summary: >-
      How the element should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used
      instead
    name: directionalHintForRTL
    fullName: directionalHintForRTL
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: '@fluentui/react-internal!IPositionProps#gapSpace:member'
    summary: The gap between the callout and the target
    name: gapSpace
    fullName: gapSpace
    langs:
      - typeScript
    type: property
    syntax:
      content: 'gapSpace?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-internal!IPositionProps#target:member'
    name: target
    fullName: target
    langs:
      - typeScript
    type: property
    syntax:
      content: 'target?: Element | MouseEvent | Point;'
      return:
        type:
          - Element | MouseEvent | Point
