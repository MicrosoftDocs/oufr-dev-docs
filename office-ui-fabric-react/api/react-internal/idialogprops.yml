### YamlMime:TSType
name: IDialogProps
uid: '@fluentui/react-internal!IDialogProps:interface'
package: '@fluentui/react-internal!'
fullName: IDialogProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: ariaDescribedById
    uid: '@fluentui/react-internal!IDialogProps#ariaDescribedById:member'
    package: '@fluentui/react-internal!'
    fullName: ariaDescribedById
    summary: Optional id for aria-DescribedBy
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `modalProps.subtitleAriaId` instead.
    syntax:
      content: 'ariaDescribedById?: string;'
      return:
        type: string
  - name: ariaLabelledById
    uid: '@fluentui/react-internal!IDialogProps#ariaLabelledById:member'
    package: '@fluentui/react-internal!'
    fullName: ariaLabelledById
    summary: Optional id for aria-LabelledBy
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `modalProps.titleAriaId` instead.
    syntax:
      content: 'ariaLabelledById?: string;'
      return:
        type: string
  - name: className
    uid: '@fluentui/react-internal!IDialogProps#className:member'
    package: '@fluentui/react-internal!'
    fullName: className
    summary: Optional class name to be added to the root class
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `modalProps.className` instead
    syntax:
      content: 'className?: string;'
      return:
        type: string
  - name: componentRef
    uid: '@fluentui/react-internal!IDialogProps#componentRef:member'
    package: '@fluentui/react-internal!'
    fullName: componentRef
    summary: >-
      Optional callback to access the IDialog interface. Use this instead of ref
      for accessing the public methods and properties of the component.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: 'Unused, returns no value'
    syntax:
      content: 'componentRef?: IRefObject<IDialog>;'
      return:
        type: IRefObject&lt;IDialog&gt;
  - name: containerClassName
    uid: '@fluentui/react-internal!IDialogProps#containerClassName:member'
    package: '@fluentui/react-internal!'
    fullName: containerClassName
    summary: Optional override for container class
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `modalProps.className` instead
    syntax:
      content: 'containerClassName?: string;'
      return:
        type: string
  - name: contentClassName
    uid: '@fluentui/react-internal!IDialogProps#contentClassName:member'
    package: '@fluentui/react-internal!'
    fullName: contentClassName
    summary: Optional override content class
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `dialogContentProps` instead as `className`<!-- -->.
    syntax:
      content: 'contentClassName?: string;'
      return:
        type: string
  - name: dialogContentProps
    uid: '@fluentui/react-internal!IDialogProps#dialogContentProps:member'
    package: '@fluentui/react-internal!'
    fullName: dialogContentProps
    summary: Props to be passed through to Dialog Content
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dialogContentProps?: IDialogContentProps;'
      return:
        type: IDialogContentProps
  - name: hidden
    uid: '@fluentui/react-internal!IDialogProps#hidden:member'
    package: '@fluentui/react-internal!'
    fullName: hidden
    summary: Whether the dialog is hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hidden?: boolean;'
      return:
        type: boolean
  - name: isBlocking
    uid: '@fluentui/react-internal!IDialogProps#isBlocking:member'
    package: '@fluentui/react-internal!'
    fullName: isBlocking
    summary: >-
      Whether the dialog can be light dismissed by clicking outside the dialog
      (on the overlay).
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `modalProps` instead
    syntax:
      content: 'isBlocking?: boolean;'
      return:
        type: boolean
  - name: isDarkOverlay
    uid: '@fluentui/react-internal!IDialogProps#isDarkOverlay:member'
    package: '@fluentui/react-internal!'
    fullName: isDarkOverlay
    summary: Whether the overlay is dark themed.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `modalProps` instead
    syntax:
      content: 'isDarkOverlay?: boolean;'
      return:
        type: boolean
  - name: isOpen
    uid: '@fluentui/react-internal!IDialogProps#isOpen:member'
    package: '@fluentui/react-internal!'
    fullName: isOpen
    summary: 'Whether the dialog is displayed. Deprecated, use `hidden` instead.'
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `hidden` instead
    syntax:
      content: 'isOpen?: boolean;'
      return:
        type: boolean
  - name: maxWidth
    uid: '@fluentui/react-internal!IDialogProps#maxWidth:member'
    package: '@fluentui/react-internal!'
    fullName: maxWidth
    summary: >-
      Sets the maximum width for the dialog. It limits the width property to be
      larger than the value specified in max-width.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxWidth?: ICSSRule | ICSSPixelUnitRule;'
      return:
        type: ICSSRule | ICSSPixelUnitRule
  - name: minWidth
    uid: '@fluentui/react-internal!IDialogProps#minWidth:member'
    package: '@fluentui/react-internal!'
    fullName: minWidth
    summary: >-
      Sets the minimum width of the dialog. It limits the width property to be
      not smaller than the value specified in min-width.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'minWidth?: ICSSRule | ICSSPixelUnitRule;'
      return:
        type: ICSSRule | ICSSPixelUnitRule
  - name: modalProps
    uid: '@fluentui/react-internal!IDialogProps#modalProps:member'
    package: '@fluentui/react-internal!'
    fullName: modalProps
    summary: Props to be passed through to Modal
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'modalProps?: IModalProps;'
      return:
        type: IModalProps
  - name: onDismiss
    uid: '@fluentui/react-internal!IDialogProps#onDismiss:member'
    package: '@fluentui/react-internal!'
    fullName: onDismiss
    summary: >-
      A callback function for when the Dialog is dismissed from the close button
      or light dismiss. Can also be specified separately in content and modal.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;'
      return:
        type: '(ev?: React.MouseEvent&lt;HTMLButtonElement&gt;) =&gt; any'
  - name: onDismissed
    uid: '@fluentui/react-internal!IDialogProps#onDismissed:member'
    package: '@fluentui/react-internal!'
    fullName: onDismissed
    summary: >-
      A callback function which is called after the Dialog is dismissed and the
      animation is complete.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `modalProps` instead
    syntax:
      content: 'onDismissed?: () => any;'
      return:
        type: () =&gt; any
  - name: onLayerDidMount
    uid: '@fluentui/react-internal!IDialogProps#onLayerDidMount:member'
    package: '@fluentui/react-internal!'
    fullName: onLayerDidMount
    summary: >-
      A callback function for when the Dialog content is mounted on the overlay
      layer
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `modalProps.layerProps` instead
    syntax:
      content: 'onLayerDidMount?: () => void;'
      return:
        type: () =&gt; void
  - name: onLayerMounted
    uid: '@fluentui/react-internal!IDialogProps#onLayerMounted:member'
    package: '@fluentui/react-internal!'
    fullName: onLayerMounted
    summary: 'Deprecated at 0.81.2, use `onLayerDidMount` instead.'
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `onLayerDidMount` instead.
    syntax:
      content: 'onLayerMounted?: () => void;'
      return:
        type: () =&gt; void
  - name: styles
    uid: '@fluentui/react-internal!IDialogProps#styles:member'
    package: '@fluentui/react-internal!'
    fullName: styles
    summary: >-
      Call to provide customized styling that will layer on top of the variant
      rules
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IDialogStyleProps, IDialogStyles>;'
      return:
        type: 'IStyleFunctionOrObject&lt;IDialogStyleProps, IDialogStyles&gt;'
  - name: subText
    uid: '@fluentui/react-internal!IDialogProps#subText:member'
    package: '@fluentui/react-internal!'
    fullName: subText
    summary: The subtext to display in the dialog.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `dialogContentProps` instead.
    syntax:
      content: 'subText?: string;'
      return:
        type: string
  - name: theme
    uid: '@fluentui/react-internal!IDialogProps#theme:member'
    package: '@fluentui/react-internal!'
    fullName: theme
    summary: Theme provided by HOC.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
  - name: title
    uid: '@fluentui/react-internal!IDialogProps#title:member'
    package: '@fluentui/react-internal!'
    fullName: title
    summary: The title text to display at the top of the dialog.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `dialogContentProps` instead.
    syntax:
      content: 'title?: string | JSX.Element;'
      return:
        type: string | JSX.Element
  - name: topButtonsProps
    uid: '@fluentui/react-internal!IDialogProps#topButtonsProps:member'
    package: '@fluentui/react-internal!'
    fullName: topButtonsProps
    summary: Other top buttons that will show up next to the close button
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `dialogContentProps` instead.
    syntax:
      content: 'topButtonsProps?: IButtonProps[];'
      return:
        type: 'IButtonProps[]'
  - name: type
    uid: '@fluentui/react-internal!IDialogProps#type:member'
    package: '@fluentui/react-internal!'
    fullName: type
    summary: The type of Dialog to display.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Pass through via `dialogContentProps` instead.
    syntax:
      content: 'type?: DialogType;'
      return:
        type: DialogType
extends: React.ClassAttributes&lt;DialogBase&gt;
