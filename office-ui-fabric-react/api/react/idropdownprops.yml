### YamlMime:TSType
name: IDropdownProps
uid: '@fluentui/react!IDropdownProps:interface'
package: '@fluentui/react!'
fullName: IDropdownProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: defaultSelectedKeys
    uid: '@fluentui/react!IDropdownProps#defaultSelectedKeys:member'
    package: '@fluentui/react!'
    fullName: defaultSelectedKeys
    summary: >-
      Keys that will be initially used to set selected items. This prop is used
      for `multiSelect` scenarios. In other cases, `defaultSelectedKey` should
      be used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultSelectedKeys?: string[] | number[];'
      return:
        type: 'string[] | number[]'
  - name: dropdownWidth
    uid: '@fluentui/react!IDropdownProps#dropdownWidth:member'
    package: '@fluentui/react!'
    fullName: dropdownWidth
    summary: >-
      Custom width for dropdown. If value is 0, width of the input field is
      used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dropdownWidth?: number;'
      return:
        type: number
  - name: isDisabled
    uid: '@fluentui/react!IDropdownProps#isDisabled:member'
    package: '@fluentui/react!'
    fullName: isDisabled
    summary: 'Deprecated at v0.52.0, use `disabled` instead.'
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `disabled` instead.
    syntax:
      content: 'isDisabled?: boolean;'
      return:
        type: boolean
  - name: multiSelectDelimiter
    uid: '@fluentui/react!IDropdownProps#multiSelectDelimiter:member'
    package: '@fluentui/react!'
    fullName: multiSelectDelimiter
    summary: >-
      When multiple items are selected, this still will be used to separate
      values in the dropdown title.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'multiSelectDelimiter?: string;'
      return:
        type: string
  - name: notifyOnReselect
    uid: '@fluentui/react!IDropdownProps#notifyOnReselect:member'
    package: '@fluentui/react!'
    fullName: notifyOnReselect
    summary: >-
      Optional preference to have onChanged still be called when an already
      selected item is clicked in single select mode. Default to false
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'notifyOnReselect?: boolean;'
      return:
        type: boolean
  - name: onChange
    uid: '@fluentui/react!IDropdownProps#onChange:member'
    package: '@fluentui/react!'
    fullName: onChange
    summary: Callback issued when the selected option changes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onChange?: (event: React.FormEvent<HTMLDivElement>, option?:
        IDropdownOption, index?: number) => void;
      return:
        type: >-
          (event: React.FormEvent&lt;HTMLDivElement&gt;, option?:
          IDropdownOption, index?: number) =&gt; void
  - name: onChanged
    uid: '@fluentui/react!IDropdownProps#onChanged:member'
    package: '@fluentui/react!'
    fullName: onChanged
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `onChange` instead.
    syntax:
      content: 'onChanged?: (option: IDropdownOption, index?: number) => void;'
      return:
        type: '(option: IDropdownOption, index?: number) =&gt; void'
  - name: onRenderCaretDown
    uid: '@fluentui/react!IDropdownProps#onRenderCaretDown:member'
    package: '@fluentui/react!'
    fullName: onRenderCaretDown
    summary: Optional custom renderer for chevron icon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderCaretDown?: IRenderFunction<IDropdownProps>;'
      return:
        type: IRenderFunction&lt;IDropdownProps&gt;
  - name: onRenderLabel
    uid: '@fluentui/react!IDropdownProps#onRenderLabel:member'
    package: '@fluentui/react!'
    fullName: onRenderLabel
    summary: Custom render function for the label.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderLabel?: IRenderFunction<IDropdownProps>;'
      return:
        type: IRenderFunction&lt;IDropdownProps&gt;
  - name: onRenderPlaceholder
    uid: '@fluentui/react!IDropdownProps#onRenderPlaceholder:member'
    package: '@fluentui/react!'
    fullName: onRenderPlaceholder
    summary: Optional custom renderer for placeholder text
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderPlaceholder?: IRenderFunction<IDropdownProps>;'
      return:
        type: IRenderFunction&lt;IDropdownProps&gt;
  - name: onRenderPlaceHolder
    uid: '@fluentui/react!IDropdownProps#onRenderPlaceHolder:member'
    package: '@fluentui/react!'
    fullName: onRenderPlaceHolder
    summary: Optional custom renderer for placeholder text
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `onRenderPlaceholder`
    syntax:
      content: 'onRenderPlaceHolder?: IRenderFunction<IDropdownProps>;'
      return:
        type: IRenderFunction&lt;IDropdownProps&gt;
  - name: onRenderTitle
    uid: '@fluentui/react!IDropdownProps#onRenderTitle:member'
    package: '@fluentui/react!'
    fullName: onRenderTitle
    summary: Optional custom renderer for selected option displayed in input
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderTitle?: IRenderFunction<IDropdownOption[]>;'
      return:
        type: 'IRenderFunction&lt;IDropdownOption[]&gt;'
  - name: options
    uid: '@fluentui/react!IDropdownProps#options:member'
    package: '@fluentui/react!'
    fullName: options
    summary: >-
      Options for the dropdown. If using `defaultSelectedKey` or
      `defaultSelectedKeys`<!-- -->, options must be pure for correct behavior.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'options: IDropdownOption[];'
      return:
        type: 'IDropdownOption[]'
  - name: placeHolder
    uid: '@fluentui/react!IDropdownProps#placeHolder:member'
    package: '@fluentui/react!'
    fullName: placeHolder
    summary: Input placeholder text. Displayed until option is selected.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `placeholder`
    syntax:
      content: 'placeHolder?: string;'
      return:
        type: string
  - name: responsiveMode
    uid: '@fluentui/react!IDropdownProps#responsiveMode:member'
    package: '@fluentui/react!'
    fullName: responsiveMode
    summary: >-
      Pass in ResponsiveMode to manually overwrite the way the Dropdown renders.
      ResponsiveMode.large would, for instance, disable the behavior where
      Dropdown options get rendered into a Panel while ResponsiveMode.small
      would result in the Dropdown options always getting rendered in a Panel.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'responsiveMode?: ResponsiveMode;'
      return:
        type: ResponsiveMode
  - name: selectedKeys
    uid: '@fluentui/react!IDropdownProps#selectedKeys:member'
    package: '@fluentui/react!'
    fullName: selectedKeys
    summary: >-
      Keys of the selected items. If you provide this, you must maintain
      selection state by observing onChange events and passing a new value in
      when changed. Passing null in will clear the selection. Mutually exclusive
      with `defaultSelectedKeys`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'selectedKeys?: string[] | number[] | null;'
      return:
        type: 'string[] | number[] | null'
  - name: styles
    uid: '@fluentui/react!IDropdownProps#styles:member'
    package: '@fluentui/react!'
    fullName: styles
    summary: >-
      Call to provide customized styling that will layer on top of the variant
      rules.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>;'
      return:
        type: 'IStyleFunctionOrObject&lt;IDropdownStyleProps, IDropdownStyles&gt;'
  - name: theme
    uid: '@fluentui/react!IDropdownProps#theme:member'
    package: '@fluentui/react!'
    fullName: theme
    summary: Theme provided by higher order component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
extends: 'ISelectableDroppableTextProps&lt;IDropdown, HTMLDivElement&gt;'
