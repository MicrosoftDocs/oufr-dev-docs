### YamlMime:TSType
name: IButtonGridProps
uid: '@fluentui/react-internal!IButtonGridProps:interface'
package: '@fluentui/react-internal!'
fullName: IButtonGridProps
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: ariaPosInSet
    uid: '@fluentui/react-internal!IButtonGridProps#ariaPosInSet:member'
    package: '@fluentui/react-internal!'
    fullName: ariaPosInSet
    summary: >-
      Position this ButtonGrid is in the parent set (index in a parent menu, for
      example)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaPosInSet?: number;'
      return:
        type: number
  - name: ariaSetSize
    uid: '@fluentui/react-internal!IButtonGridProps#ariaSetSize:member'
    package: '@fluentui/react-internal!'
    fullName: ariaSetSize
    summary: 'Size of the parent set (size of parent menu, for example)'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaSetSize?: number;'
      return:
        type: number
  - name: columnCount
    uid: '@fluentui/react-internal!IButtonGridProps#columnCount:member'
    package: '@fluentui/react-internal!'
    fullName: columnCount
    summary: The number of columns
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'columnCount: number;'
      return:
        type: number
  - name: componentRef
    uid: '@fluentui/react-internal!IButtonGridProps#componentRef:member'
    package: '@fluentui/react-internal!'
    fullName: componentRef
    summary: Gets the component ref.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IButtonGrid>;'
      return:
        type: IRefObject&lt;IButtonGrid&gt;
  - name: containerClassName
    uid: '@fluentui/react-internal!IButtonGridProps#containerClassName:member'
    package: '@fluentui/react-internal!'
    fullName: containerClassName
    summary: Class name for the FocusZone container for the ButtonGrid.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: >-
      Use `styles.focusedContainer` to define styling for the focus zone
      container
    syntax:
      content: 'containerClassName?: string;'
      return:
        type: string
  - name: doNotContainWithinFocusZone
    uid: >-
      @fluentui/react-internal!IButtonGridProps#doNotContainWithinFocusZone:member
    package: '@fluentui/react-internal!'
    fullName: doNotContainWithinFocusZone
    summary: >-
      If false (the default), the ButtonGrid is contained inside a FocusZone. If
      true, a FocusZone is not used.  false
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'doNotContainWithinFocusZone?: boolean;'
      return:
        type: boolean
  - name: items
    uid: '@fluentui/react-internal!IButtonGridProps#items:member'
    package: '@fluentui/react-internal!'
    fullName: items
    summary: Items to display in a ButtonGrid with the specified number of columns
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'items: any[];'
      return:
        type: 'any[]'
  - name: onBlur
    uid: '@fluentui/react-internal!IButtonGridProps#onBlur:member'
    package: '@fluentui/react-internal!'
    fullName: onBlur
    summary: Handler for when focus leaves the ButtonGrid.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onBlur?: () => void;'
      return:
        type: () =&gt; void
  - name: onRenderItem
    uid: '@fluentui/react-internal!IButtonGridProps#onRenderItem:member'
    package: '@fluentui/react-internal!'
    fullName: onRenderItem
    summary: Custom renderer for the individual items
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderItem: (item: any, index: number) => JSX.Element;'
      return:
        type: '(item: any, index: number) =&gt; JSX.Element'
  - name: positionInSet
    uid: '@fluentui/react-internal!IButtonGridProps#positionInSet:member'
    package: '@fluentui/react-internal!'
    fullName: positionInSet
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `ariaPosInSet`
    syntax:
      content: 'positionInSet?: number;'
      return:
        type: number
  - name: setSize
    uid: '@fluentui/react-internal!IButtonGridProps#setSize:member'
    package: '@fluentui/react-internal!'
    fullName: setSize
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `ariaSetSize`
    syntax:
      content: 'setSize?: number;'
      return:
        type: number
  - name: shouldFocusCircularNavigate
    uid: >-
      @fluentui/react-internal!IButtonGridProps#shouldFocusCircularNavigate:member
    package: '@fluentui/react-internal!'
    fullName: shouldFocusCircularNavigate
    summary: >-
      Whether focus should cycle back to the beginning once the user navigates
      past the end (and vice versa). Only relevant if
      `doNotContainWithinFocusZone` is not true.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shouldFocusCircularNavigate?: boolean;'
      return:
        type: boolean
  - name: styles
    uid: '@fluentui/react-internal!IButtonGridProps#styles:member'
    package: '@fluentui/react-internal!'
    fullName: styles
    summary: Optional styles for the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        styles?: IStyleFunctionOrObject<IButtonGridStyleProps,
        IButtonGridStyles>;
      return:
        type: 'IStyleFunctionOrObject&lt;IButtonGridStyleProps, IButtonGridStyles&gt;'
  - name: theme
    uid: '@fluentui/react-internal!IButtonGridProps#theme:member'
    package: '@fluentui/react-internal!'
    fullName: theme
    summary: Theme to apply to the component.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme;'
      return:
        type: '<xref uid="@fluentui/theme!ITheme:interface" />'
extends: React.TableHTMLAttributes&lt;HTMLTableElement&gt;
