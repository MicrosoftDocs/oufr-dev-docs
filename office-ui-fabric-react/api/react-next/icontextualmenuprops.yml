### YamlMime:UniversalReference
items:
  - uid: '@fluentui/react-next!IContextualMenuProps:interface'
    name: IContextualMenuProps
    fullName: IContextualMenuProps
    langs:
      - typeScript
    type: interface
    extends:
      - IBaseProps<IContextualMenu>
      - 'IWithResponsiveModeState '
    package: '@fluentui/react-next!'
    children:
      - '@fluentui/react-next!IContextualMenuProps#alignTargetEdge:member'
      - '@fluentui/react-next!IContextualMenuProps#ariaLabel:member'
      - '@fluentui/react-next!IContextualMenuProps#beakWidth:member'
      - '@fluentui/react-next!IContextualMenuProps#bounds:member'
      - '@fluentui/react-next!IContextualMenuProps#calloutProps:member'
      - '@fluentui/react-next!IContextualMenuProps#className:member'
      - '@fluentui/react-next!IContextualMenuProps#componentRef:member'
      - '@fluentui/react-next!IContextualMenuProps#contextualMenuItemAs:member'
      - '@fluentui/react-next!IContextualMenuProps#coverTarget:member'
      - '@fluentui/react-next!IContextualMenuProps#delayUpdateFocusOnHover:member'
      - '@fluentui/react-next!IContextualMenuProps#directionalHint:member'
      - '@fluentui/react-next!IContextualMenuProps#directionalHintFixed:member'
      - '@fluentui/react-next!IContextualMenuProps#directionalHintForRTL:member'
      - '@fluentui/react-next!IContextualMenuProps#doNotLayer:member'
      - '@fluentui/react-next!IContextualMenuProps#focusZoneProps:member'
      - '@fluentui/react-next!IContextualMenuProps#gapSpace:member'
      - '@fluentui/react-next!IContextualMenuProps#getMenuClassNames:member'
      - '@fluentui/react-next!IContextualMenuProps#hidden:member'
      - '@fluentui/react-next!IContextualMenuProps#id:member'
      - '@fluentui/react-next!IContextualMenuProps#isBeakVisible:member'
      - '@fluentui/react-next!IContextualMenuProps#isSubMenu:member'
      - '@fluentui/react-next!IContextualMenuProps#items:member'
      - '@fluentui/react-next!IContextualMenuProps#labelElementId:member'
      - '@fluentui/react-next!IContextualMenuProps#onDismiss:member'
      - '@fluentui/react-next!IContextualMenuProps#onItemClick:member'
      - '@fluentui/react-next!IContextualMenuProps#onMenuDismissed:member'
      - '@fluentui/react-next!IContextualMenuProps#onMenuOpened:member'
      - '@fluentui/react-next!IContextualMenuProps#onRenderMenuList:member'
      - '@fluentui/react-next!IContextualMenuProps#onRenderSubMenu:member'
      - '@fluentui/react-next!IContextualMenuProps#shouldFocusOnContainer:member'
      - '@fluentui/react-next!IContextualMenuProps#shouldFocusOnMount:member'
      - '@fluentui/react-next!IContextualMenuProps#shouldUpdateWhenHidden:member'
      - '@fluentui/react-next!IContextualMenuProps#styles:member'
      - '@fluentui/react-next!IContextualMenuProps#subMenuHoverDelay:member'
      - '@fluentui/react-next!IContextualMenuProps#target:member'
      - '@fluentui/react-next!IContextualMenuProps#theme:member'
      - '@fluentui/react-next!IContextualMenuProps#title:member'
      - '@fluentui/react-next!IContextualMenuProps#useTargetAsMinWidth:member'
      - '@fluentui/react-next!IContextualMenuProps#useTargetWidth:member'
  - uid: '@fluentui/react-next!IContextualMenuProps#alignTargetEdge:member'
    summary: >-
      If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds,
      thus making sure the element aligns perfectly with target's alignment edge
    name: alignTargetEdge
    fullName: alignTargetEdge
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignTargetEdge?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#ariaLabel:member'
    summary: Accessible label for the ContextualMenu's root element (inside the callout).
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IContextualMenuProps#beakWidth:member'
    summary: The width of the beak.
    name: beakWidth
    fullName: beakWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'beakWidth?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-next!IContextualMenuProps#bounds:member'
    summary: The bounding rectangle (or callback that returns a rectangle) which the contextual menu can appear in.
    name: bounds
    fullName: bounds
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bounds?: IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined);'
      return:
        type:
          - 'IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined)'
  - uid: '@fluentui/react-next!IContextualMenuProps#calloutProps:member'
    summary: Additional custom props for the Callout.
    name: calloutProps
    fullName: calloutProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calloutProps?: ICalloutProps;'
      return:
        type:
          - ICalloutProps
  - uid: '@fluentui/react-next!IContextualMenuProps#className:member'
    summary: Additional CSS class to apply to the ContextualMenu.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IContextualMenuProps#componentRef:member'
    summary: >-
      Optional callback to access the IContextualMenu interface. Use this instead of ref for accessing the public
      methods and properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IContextualMenu>;'
      return:
        type:
          - IRefObject<IContextualMenu>
  - uid: '@fluentui/react-next!IContextualMenuProps#contextualMenuItemAs:member'
    summary: Custom component to use for rendering individual menu items.
    name: contextualMenuItemAs
    fullName: contextualMenuItemAs
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        contextualMenuItemAs?: React.ComponentClass<IContextualMenuItemProps> |
        React.FunctionComponent<IContextualMenuItemProps>;
      return:
        type:
          - React.ComponentClass<IContextualMenuItemProps> | React.FunctionComponent<IContextualMenuItemProps>
  - uid: '@fluentui/react-next!IContextualMenuProps#coverTarget:member'
    summary: 'If true, the menu will be positioned to cover the target. If false, it will be positioned next to the target.'
    name: coverTarget
    fullName: coverTarget
    langs:
      - typeScript
    type: property
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#delayUpdateFocusOnHover:member'
    summary: >-
      If true, the contextual menu will not be updated until focus enters the menu via other means. This will only
      result in different behavior when `shouldFocusOnMount = false`<!-- -->.
    name: delayUpdateFocusOnHover
    fullName: delayUpdateFocusOnHover
    langs:
      - typeScript
    type: property
    syntax:
      content: 'delayUpdateFocusOnHover?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#directionalHint:member'
    summary: How the menu should be positioned
    name: directionalHint
    fullName: directionalHint
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: '@fluentui/react-next!IContextualMenuProps#directionalHintFixed:member'
    summary: >-
      If true the position will not change sides in an attempt to fit the ContextualMenu within bounds. It will still
      attempt to align it to whatever bounds are given.
    name: directionalHintFixed
    fullName: directionalHintFixed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#directionalHintForRTL:member'
    summary: 'How the menu should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used.'
    name: directionalHintForRTL
    fullName: directionalHintForRTL
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: '@fluentui/react-next!IContextualMenuProps#doNotLayer:member'
    summary: If true do not render on a new layer. If false render on a new layer.
    name: doNotLayer
    fullName: doNotLayer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doNotLayer?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#focusZoneProps:member'
    summary: >-
      Props to pass down to the FocusZone. NOTE: the default FocusZoneDirection will be used unless a direction is
      specified in the focusZoneProps (even if other focusZoneProps are defined)
    name: focusZoneProps
    fullName: focusZoneProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'focusZoneProps?: IFocusZoneProps;'
      return:
        type:
          - '@fluentui/react-focus!IFocusZoneProps:interface'
  - uid: '@fluentui/react-next!IContextualMenuProps#gapSpace:member'
    summary: The gap between the ContextualMenu and the target
    name: gapSpace
    fullName: gapSpace
    langs:
      - typeScript
    type: property
    syntax:
      content: 'gapSpace?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-next!IContextualMenuProps#getMenuClassNames:member'
    summary: Method to provide the classnames to style the contextual menu.
    deprecated:
      content: Use `styles` instead to leverage mergeStyles API.
    name: getMenuClassNames
    fullName: getMenuClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getMenuClassNames?: (theme: ITheme, className?: string) => IContextualMenuClassNames;'
      return:
        type:
          - '(theme: ITheme, className?: string) => IContextualMenuClassNames'
  - uid: '@fluentui/react-next!IContextualMenuProps#hidden:member'
    summary: >-
      If true, renders the ContextualMenu in a hidden state. Use this flag, rather than rendering a ContextualMenu
      conditionally based on visibility, to improve rendering performance when it becomes visible. Note: When
      ContextualMenu is hidden its content will not be rendered. It will only render once the ContextualMenu is visible.
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hidden?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#id:member'
    summary: >-
      ID for the ContextualMenu's root element (inside the callout). Should be used for `aria-owns` and other such uses,
      rather than direct reference for programmatic purposes.
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IContextualMenuProps#isBeakVisible:member'
    summary: If true then the beak is visible. If false it will not be shown.
    name: isBeakVisible
    fullName: isBeakVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isBeakVisible?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#isSubMenu:member'
    summary: Whether this menu is a submenu of another menu.
    name: isSubMenu
    fullName: isSubMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isSubMenu?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#items:member'
    summary: Menu items to display.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'items: IContextualMenuItem[];'
      return:
        type:
          - 'IContextualMenuItem[]'
  - uid: '@fluentui/react-next!IContextualMenuProps#labelElementId:member'
    summary: Used as `aria-labelledby` for the menu element inside the callout.
    name: labelElementId
    fullName: labelElementId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'labelElementId?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IContextualMenuProps#onDismiss:member'
    summary: Callback when the ContextualMenu tries to close. If `dismissAll` is true then all submenus will be dismissed.
    name: onDismiss
    fullName: onDismiss
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDismiss?: (ev?: Event | React.MouseEvent | React.KeyboardEvent, dismissAll?: boolean) => void;'
      return:
        type:
          - '(ev?: Event | React.MouseEvent | React.KeyboardEvent, dismissAll?: boolean) => void'
  - uid: '@fluentui/react-next!IContextualMenuProps#onItemClick:member'
    summary: >-
      Click handler which is invoked if `onClick` is not passed for individual contextual menu item. Returning true will
      dismiss the menu even if `ev.preventDefault()` was called.
    name: onItemClick
    fullName: onItemClick
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        onItemClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?:
        IContextualMenuItem) => boolean | void;
      return:
        type:
          - >-
            (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) =>
            boolean | void
  - uid: '@fluentui/react-next!IContextualMenuProps#onMenuDismissed:member'
    summary: Callback for when the menu is being closed (removing from the DOM).
    name: onMenuDismissed
    fullName: onMenuDismissed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMenuDismissed?: (contextualMenu?: IContextualMenuProps) => void;'
      return:
        type:
          - '(contextualMenu?: IContextualMenuProps) => void'
  - uid: '@fluentui/react-next!IContextualMenuProps#onMenuOpened:member'
    summary: Callback for when the menu has been opened.
    name: onMenuOpened
    fullName: onMenuOpened
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMenuOpened?: (contextualMenu?: IContextualMenuProps) => void;'
      return:
        type:
          - '(contextualMenu?: IContextualMenuProps) => void'
  - uid: '@fluentui/react-next!IContextualMenuProps#onRenderMenuList:member'
    summary: Method to override the render of the list of menu items.
    name: onRenderMenuList
    fullName: onRenderMenuList
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderMenuList?: IRenderFunction<IContextualMenuListProps>;'
      return:
        type:
          - IRenderFunction<IContextualMenuListProps>
  - uid: '@fluentui/react-next!IContextualMenuProps#onRenderSubMenu:member'
    summary: Custom render function for a submenu.
    name: onRenderSubMenu
    fullName: onRenderSubMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderSubMenu?: IRenderFunction<IContextualMenuProps>;'
      return:
        type:
          - IRenderFunction<IContextualMenuProps>
  - uid: '@fluentui/react-next!IContextualMenuProps#shouldFocusOnContainer:member'
    summary: Whether to focus on the contextual menu container (as opposed to the first menu item).
    name: shouldFocusOnContainer
    fullName: shouldFocusOnContainer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldFocusOnContainer?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#shouldFocusOnMount:member'
    summary: Whether to focus on the menu when mounted.
    name: shouldFocusOnMount
    fullName: shouldFocusOnMount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldFocusOnMount?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#shouldUpdateWhenHidden:member'
    summary: >-
      If true, the menu will be updated even when `hidden=true`<!-- -->. Note that this will consume resources to update
      even when nothing is being shown to the user. This might be helpful if your updates are small and you want the
      menu to display quickly when `hidden` is set to false.
    name: shouldUpdateWhenHidden
    fullName: shouldUpdateWhenHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldUpdateWhenHidden?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#styles:member'
    summary: Call to provide customized styling that will layer on top of the variant rules.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>'
  - uid: '@fluentui/react-next!IContextualMenuProps#subMenuHoverDelay:member'
    summary: Delay (in milliseconds) to wait before expanding / dismissing a submenu on mouseEnter or mouseLeave
    name: subMenuHoverDelay
    fullName: subMenuHoverDelay
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subMenuHoverDelay?: number;'
      return:
        type:
          - number
  - uid: '@fluentui/react-next!IContextualMenuProps#target:member'
    summary: >-
      The target that the ContextualMenu should try to position itself based on. It can be either an element, a query
      selector string resolving to a valid element, or a MouseEvent. If a MouseEvent is given, the origin point of the
      event will be used.
    name: target
    fullName: target
    langs:
      - typeScript
    type: property
    syntax:
      content: 'target?: Target;'
      return:
        type:
          - Target
  - uid: '@fluentui/react-next!IContextualMenuProps#theme:member'
    summary: Theme provided by higher-order component.
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - ITheme
  - uid: '@fluentui/react-next!IContextualMenuProps#title:member'
    summary: 'Title to be displayed at the top of the menu, above the items.'
    name: title
    fullName: title
    langs:
      - typeScript
    type: property
    syntax:
      content: 'title?: string;'
      return:
        type:
          - string
  - uid: '@fluentui/react-next!IContextualMenuProps#useTargetAsMinWidth:member'
    summary: If true the context menu will have a minimum width equal to the width of the target element
    name: useTargetAsMinWidth
    fullName: useTargetAsMinWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useTargetAsMinWidth?: boolean;'
      return:
        type:
          - boolean
  - uid: '@fluentui/react-next!IContextualMenuProps#useTargetWidth:member'
    summary: If true the context menu will render as the same width as the target element
    name: useTargetWidth
    fullName: useTargetWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useTargetWidth?: boolean;'
      return:
        type:
          - boolean
